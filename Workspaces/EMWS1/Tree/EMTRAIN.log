MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "02:26:29 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 16, 2022
Time:                02:26:29 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0HHY4VF "D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0HHY4VF new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "02:26:29 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                manas";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70192439";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "02:26:29 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                manas";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
21524      proc freq data=EMWS1.Tree_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree_VariableSet noprint;
21525      table ROLE*LEVEL/out=WORK.TreeMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TreeMETA;
21526      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

21527      proc print data=WORK.TreeMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TreeMETA label noobs;
21528      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
21529      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
21530      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21531      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
21532      run;

NOTE: There were 5 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

21533      title10;
MPRINT(EM_DIAGRAM):   title10;
21534      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Part_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class class(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="class";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=class));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="class";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids_class_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by class;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by class;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
21563      data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
21564      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
21565      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
21566         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
21567      set EMWS1.IDS_CLASS_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS_CLASS_DM( where=(_TYPE_="TARGET"));
21568      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
21569      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
21570      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
21571      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
21572      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
21573      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
21574      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
21575      end;
MPRINT(EM_DIAGRAM):   end;
21576      output;
MPRINT(EM_DIAGRAM):   output;
21577      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS_CLASS_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
      

21578      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21579      proc print data=WORK.Tree_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree_EVENT noobs label;
21580      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
21581      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21582      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
21583      run;

NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

21584      title10;
MPRINT(EM_DIAGRAM):   title10;
21585      proc print data = EMWS1.Ids_class_DD noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_class_DD noobs label;
21586      var class
21587      TRAINPRIOR
21588      DECISION1
21589      DECISION2
21590      ;
MPRINT(EM_DIAGRAM):   var class TRAINPRIOR DECISION1 DECISION2 ;
21591      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21592      title10 "Decision Matrix";
MPRINT(EM_DIAGRAM):   title10 "Decision Matrix";
MPRINT(EM_DIAGRAM):   run;
21593      run;

NOTE: There were 2 observations read from the data set EMWS1.IDS_CLASS_DD.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21594      title10;
MPRINT(EM_DIAGRAM):   title10;
21595      proc print data = EMWS1.Ids_class_DM noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS1.Ids_class_DM noobs label;
21596      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
21597      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
21598      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
21599      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21600      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
21601      run;

NOTE: There were 11 observations read from the data set EMWS1.IDS_CLASS_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

21602      title10;
MPRINT(EM_DIAGRAM):   title10;
21603      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify class(type=PROFIT label= class);
MPRINT(EM_DIAGRAM):   label DECISION1= "RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   label DECISION2= "NO-RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = '127097210_Pahuja';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Decriptive';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.class;
MPRINT(EM_DECDATA):   length class $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "RECURRENCE-EVENTS" DECISION2= "NO-RECURRENCE-EVENTS" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   class="RECURRENCE-EVENTS";
MPRINT(EM_DECDATA):   COUNT=85;
MPRINT(EM_DECDATA):   DATAPRIOR=0.2972027972;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.2972027972;
MPRINT(EM_DECDATA):   DECPRIOR=0.2972;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   class="NO-RECURRENCE-EVENTS";
MPRINT(EM_DECDATA):   COUNT=201;
MPRINT(EM_DECDATA):   DATAPRIOR=0.7027972028;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.7027972028;
MPRINT(EM_DECDATA):   DECPRIOR=0.7028;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify class(type=PROFIT label= class);
MPRINT(EM_DECDATA):   label DECISION1= 'RECURRENCE-EVENTS';
MPRINT(EM_DECDATA):   label DECISION2= 'NO-RECURRENCE-EVENTS';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify class(type=PROFIT label= class);
MPRINT(EM_DIAGRAM):   label DECISION1= "RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   label DECISION2= "NO-RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="class";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_class_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_class_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="class";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_class_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_class_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
22128      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22129      * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
22130      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
22131      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

22132      %let EMEXCEPTIONSTRING=;
22133      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22134      * TRAIN: Tree;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree;
22135      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22136      %let EM_ACTION = TRAIN;
22137      %let syscc = 0;
22138      %macro main;
22139      
22140        %if %upcase(&EM_ACTION) = CREATE %then %do;
22141          filename temp catalog 'sashelp.emmodl.tree_create.source';
22142          %include temp;
22143          filename temp;
22144      
22145          %em_tree_create;
22146        %end;
22147      
22148         %else
22149         %if %upcase(&EM_ACTION) = TRAIN %then %do;
22150      
22151             filename temp catalog 'sashelp.emmodl.tree_train.source';
22152             %include temp;
22153             filename temp;
22154             %em_tree_train;
22155         %end;
22156      
22157        %else
22158        %if %upcase(&EM_ACTION) = SCORE %then %do;
22159          filename temp catalog 'sashelp.emmodl.tree_score.source';
22160          %include temp;
22161          filename temp;
22162      
22163          %em_tree_score;
22164      
22165        %end;
22166      
22167        %else
22168        %if %upcase(&EM_ACTION) = REPORT %then %do;
22169      
22170             filename temp catalog 'sashelp.emmodl.tree_report.source';
22171             %include temp;
22172             filename temp;
22173      
22174             %em_tree_report;
22175         %end;
22176      
22177        %else
22178        %if %upcase(&EM_ACTION) = OPENINT %then %do;
22179      
22180             filename temp catalog 'sashelp.emmodl.tree_actions.source';
22181             %include temp;
22182             filename temp;
22183             %EM_TREE_OPENTREEVIEWER;
22184      
22185         %end;
22186      
22187        %else
22188        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
22189      
22190             filename temp catalog 'sashelp.emmodl.tree_actions.source';
22191             %include temp;
22192             filename temp;
22193             %EM_TREE_CLOSETREEVIEWER;
22194      
22195         %end;
22196      
22197      
22198         %doendm:
22199      %mend main;
22200      
22201      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
22203     +%macro em_tree_train;
22205     +   %if &EM_IMPORT_DATA eq %then %do;
22206     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
22207     +       %put &em_codebar;
22208     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
22209     +       %put &errormsg;
22210     +       %put &em_codebar;
22211     +       %goto doendm;
22212     +   %end;
22213     +   %else
22214     +       %let EMEXCEPTIONSTRING =;
22216     +   %if  &EM_NUM_TARGET lt 1 %then %do;
22217     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
22218     +        %put &em_codebar;
22219     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
22220     +        %put &errormsg;
22221     +        %put &em_codebar;
22222     +        %goto doendm;
22223     +   %end;
22225     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
22226     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
22227     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
22228     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
22229     +        %put &em_codebar;
22230     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
22231     +        %put &errormsg;
22232     +        %put &em_codebar;
22233     +        %goto doendm;
22234     +   %end;
22236     +   /* Initialize property macro variables */
22237     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
22238     +   %include temp;
22239     +   filename temp;
22241     +   %EM_SetProperties;
22243     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
22244     +   %EM_GETNAME(key=EMTREE, type=DATA);
22245     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
22246     +     /* if import eq Y and no importtable defined, throw an exception */
22247     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
22248     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
22249     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
22250     +         %put &em_codebar;
22251     +         %put &errmsg;
22252     +         %put &em_codebar;
22253     +         %goto doendm;
22254     +      %end;
22255     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
22256     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
22257     +         %put &em_codebar;
22258     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
22259     +         %put &errormsg;
22260     +         %put &em_codebar;
22261     +         %goto doendm;
22262     +      %end;
22263     +      %else %do;
22264     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
22265     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
22266     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
22267     +         %let varnumX = %sysfunc(varnum(&dsid,X));
22268     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
22269     +         %let dsid = %sysfunc(close(&dsid));
22270     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
22271     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
22272     +            %put &em_codebar;
22273     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
22274     +            %put &errormsg;
22275     +            %put &em_codebar;
22276     +            %goto doendm;
22277     +         %end;
22278     +      %end;
22279     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
22280     +         proc delete data=&EM_USER_EMTREE;
22281     +         run;
22282     +      %end;
22283     +   %end;
22284     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
22285     +      proc delete data=&EM_USER_EMTREE;
22286     +      run;
22287     +   %end;
22289     +   /* load tree macros */
22290     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
22291     +   %include temp;
22292     +   filename temp;
22294     +   /* data sets */
22295     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
22296     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
22297     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
22299     +   /* files */
22300     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
22302     +   /* check actual num of target levels */
22303     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
22304     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
22305     +                              nLevel=_nTargetLevel );
22306     +      %if &_nTargetLevel  > 2 %then %do;
22307     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
22308     +        %put &em_codebar;
22309     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
22310     +        %put &errormsg;
22311     +        %put &em_codebar;
22312     +        %goto doendm;
22313     +      %end;
22314     +   %end;
22316     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
22317     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
22318     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
22319     +        %let costflag=0;
22320     +        data _null_;
22321     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
22322     +          if eof then call symput("costflag", _N_);
22323     +        run;
22324     +        %if &costflag gt 0 %then %do;
22325     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
22326     +          %put &em_codebar;
22327     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
22328     +          %put &errormsg;
22329     +          %put &em_codebar;
22330     +          %goto doendm;
22331     +       %end;
22332     +     %end;
22333     +   %end;
22335     +   /* determine if multiple targets will be processed */
22336     +   %let em_tree_multipleTargets=N;
22337     +   %let em_tree_numTarget = 1;
22338     +   %let em_tree_targetVars=;
22340     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
22341     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
22342     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
22343     +         %let em_tree_multipleTargets=N;
22344     +      %end;
22345     +      %else %do;
22346     +         /* create macro array of targets  */
22347     +         data _null_;
22348     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
22349     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
22350     +           if eof then
22351     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
22352     +        run;
22354     +        %if &em_tree_numTarget gt 1 %then %do;
22355     +           %let em_tree_multipleTargets=Y;
22356     +        %end;
22357     +      %end;
22358     +   %end;
22360     +   /* create view of only necessary variable for performance reasons */
22361     +   %let tempData = &EM_LIB..em_&EM_NODEID;
22362     +   data &tempData / view=&tempData;
22363     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
22364     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
22365     +       %EM_TARGET
22366     +     %end;
22367     +     %else %do;
22368     +       %if &em_tree_numTarget ne 0 %then %do;
22369     +         %do i=1 %to &em_tree_numTarget;
22370     +            &&em_tree_targetVars&i
22371     +         %end;
22372     +       %end;
22373     +     %end;
22374     +     );
22375     +   run;
22377     +   /* run Tree procedure */
22378     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
22380     +   /* Check return code and throw exception if error is detected */
22381     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
22382     +   %if &syserr %then %do;
22383     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
22384     +     %goto doendm;
22385     +   %end;
22387     +   /* add decision score code if multiple targets are processed */
22388     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
22389     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
22390     +   %end;
22392     +   /* create outfit dataset if multiple score statements have been executed */
22393     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
22395     +   /* create English Rules */
22396     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
22397     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
22398     +       %em_tree_makeEnglishRules;
22400     +       /* English Rules */
22401     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
22403     +     %end;
22404     +   filename x;
22406     +   %doendm:
22407     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
22408     +%macro EM_SetProperties;
22410     +   /* train properties */
22411     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
22412     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
22413     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
22414     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
22415     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
22416     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
22417     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
22418     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
22419     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
22420     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
22421     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
22422     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
22423     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
22424     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
22425     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
22426     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
22427     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
22428     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
22429     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
22430     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
22431     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
22432     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
22433     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
22434     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
22435     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
22436     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
22437     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
22438     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
22439     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
22440     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
22441     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
22442     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
22443     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
22444     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
22445     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
22446     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
22447     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
22448     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
22449     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
22450     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
22451     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
22453     +   /* properties for interactive sample */
22454     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
22455     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
22456     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
22457     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
22459     +   /* report properties */
22460     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
22461     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
22462     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
22463     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
22464     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
22465     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
22466     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
22467     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
22468     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
22469     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
22470     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
22471     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
22472     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
22474     +   /* score properties */
22475     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
22476     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
22478     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   proc delete data=EMWS1.Tree_EMTREE;
MPRINT(EM_TREE_TRAIN):   run;

NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
22480     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
22481     +  %global &nLevel;
22482     +  proc dmdb batch data=&indata
22483     +    classout=_tmp_dmdbout;
22484     +    class &target;
22485     +  run;
22486     +  data _tmp_dmdbout;
22487     +    set _tmp_dmdbout;
22488     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
22489     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
22490     +  run;
22491     +  data _null_;
22492     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
22493     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
22494     +    %let dsid = %sysfunc(close(&dsid));
22495     +     call symput("&nLevel", put(&_obs, Best12.));
22496     +  run;
22498     +  proc datasets lib=work nolist;
22499     +     delete _tmp_dmdbout;
22500     +  run;
22501     +  quit;
22502     +%Mend EM_CheckBinaryTargetLevel;
22505     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
22507     +  /* determine the number of obs in training data */
22508     +  proc sql;
22509     +    reset noprint;
22510     +    select count(*) into :em_nobs from &indata;
22511     +  quit;
22513     +  /* determine the number of input variables */
22514     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
22515     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
22517     +  /* retrieve targetEvent from decmeta */
22518     +  %let targetEvent=;
22519     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
22520     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
22521     +      data _null_;
22522     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
22523     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
22524     +      run;
22525     +    %end;
22526     +  %end;
22528     +  /* create targetTable if multipleTar eq Y */
22529     +  data temptarget;
22530     +    set &EM_DATA_VARIABLESET;
22531     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
22532     +  run;
22534     + /* data sets */
22535     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
22536     + %EM_GETNAME(key=EMTREE,        type=DATA);
22537     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
22538     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
22539     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
22540     + %EM_GETNAME(key=OUTNODES,      type=DATA);
22541     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
22542     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
22543     + %EM_GETNAME(key=OUTPATH,       type=DATA);
22544     + %EM_GETNAME(key=OUTRULES,      type=DATA);
22546     + /* files */
22547     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
22548     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
22550     + /* turn on pmml if requested */
22551     + %let nnpmml=0;
22552     + %if %symexist(EM_PMML) %then %do;
22553     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
22554     +       %let nnpmml=1;
22556     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
22557     +%end;
22559     + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
22561     + %if &nnpmml or &numClassTarget %then %do;
22563     +       /* create dmdb needed for pmml generation */
22564     +       %let tree_maxlevel = 512;
22565     +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
22566     +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
22567     +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
22568     +         %end;
22569     +       %end;
22570     +       %if &tree_maxlevel gt 0 %then %do;
22571     +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
22572     +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
22573     +       %end;
22575     +       %let targetOrderString =;
22576     +       %let targetString = ;
22577     +       data _null_;
22578     +          length orderString nameString $10000;
22579     +          retain orderString nameString;
22580     +          set &em_data_variableset end=eof;
22581     +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
22582     +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
22583     +          %end;
22584     +          %else %do;
22585     +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
22586     +          %end;          select(order);
22587     +            when('')        order ='DESC';
22588     +            when('FMTASC')  order='ASCFMT';
22589     +            when('FMTDESC') order='DESFMT';
22590     +            otherwise;
22591     +          end;
22592     +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
22593     +          nameString = trim(nameString)!!' '!!trim(NAME);
22595     +          if eof then do;
22596     +             call symput('targetOrderString', trim(orderString));
22597     +             call symput('targetString', trim(nameString));
22598     +          end;
22599     +       run;
22601     +       %let arborkluge= "work._treeDMDB";
22603     +       proc dmdb batch data=&indata
22604     +       %if &nnpmml %then %do;
22605     +           PMML
22606     +       %end;
22607     +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
22610     +   %if &nnpmml %then %do;
22611     +        %if "%EM_ID" ne "" %then %do;
22612     +          id %EM_ID;
22613     +        %end;
22614     +        %if &EM_NUM_CLASS gt 0 %then %do;
22615     +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
22616     +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
22617     +               &targetOrderString;
22618     +        %end;
22619     +        %if &EM_NUM_INTERVAL gt 0 %then %do;
22620     +          var %EM_INTERVAL;
22621     +        %end;
22622     +        target &targetString %EM_INTERVAL_TARGET;
22623     +        %if "%EM_FREQ" ne "" %then %do;
22624     +          freq %EM_FREQ;
22625     +        %end;
22626     +  %end;
22627     +  %else %do;
22628     +      class  &targetOrderString;
22629     +      target &targetString %EM_INTERVAL_TARGET;
22630     +  %end;
22631     +       run;
22632     +       quit;
22634     +       proc datasets lib=work nolist;
22635     +          delete classout varout;
22636     +       run;
22637     +       quit;
22639     +    %end;
22640     + %end;
22642     + /* run Arbor procedure */
22643     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
22644     +  proc arbor data=&INDATA
22646     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
22647     +    Leafsize = &EM_PROPERTY_LEAFSIZE
22648     +  %end;
22650     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
22651     +    Splitsize = &EM_PROPERTY_SPLITSIZE
22652     +  %end;
22654     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
22655     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
22656     +  %end;
22658     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
22659     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
22660     +  %end;
22662     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
22663     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
22664     +  %end;
22666     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
22667     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
22668     +  %end;
22669     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
22670     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
22671     +  %end;
22672     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
22673     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
22674     +  %end;
22676     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
22677     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
22678     +      alpha = &EM_PROPERTY_SIGLEVEL
22679     +    %end;
22680     +  %end;
22682     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
22683     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
22684     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
22685     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
22686     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
22688     +        padjust =
22689     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
22690     +          &chaid
22691     +        %end;
22692     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
22693     +          DEPTH
22694     +        %end;
22695     +      %end;
22696     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
22697     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
22698     +         pvars = &num_inputs
22699     +      %end;
22700     +    %end;
22701     +  %end;
22702     +  %else %do;
22703     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
22704     +         padjust = NONE
22705     +      %end;
22706     +  %end;
22708     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
22709     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
22710     +    Maxrules = &num_nrules
22711     +  %end;
22713     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
22714     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
22715     +    Maxsurrs = &num_nsurrs
22716     +  %end;
22718     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
22719     +     Missing=&EM_PROPERTY_MISSINGVALUE
22720     +  %end;
22722     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
22723     +     USEVARONCE
22724     +  %end;
22726     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
22727     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
22728     +  %end;
22731     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
22732     +    event = "&targetEvent"
22733     +  %end;
22735     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
22736     +     DECSEARCH
22737     +  %end;
22739     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
22740     +     PRIORSSEARCH
22741     +  %end;
22743     +  %if &arbor_1 ne %then %do;
22744     +    &arbor_1
22745     +  %end;
22747     +  %if &em_arbor ne %then %do;
22748     +     &em_arbor
22749     +  %end;
22750     +  ;
22751     + %end;
22752     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
22753     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
22754     +       interact;
22755     + %end;
22756     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
22757     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
22758     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
22759     +    %put &em_codebar;
22760     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
22761     +    %put &errormsg;
22762     +    %put &em_codebar;
22763     +    %goto doendm;
22764     +   %end;
22765     +   %else %do;
22766     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
22767     +       interact;
22768     +   %end;
22769     + %end;
22771     + %else %do;
22772     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
22773     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
22774     +    %put &em_codebar;
22775     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
22776     +    %put &errormsg;
22777     +    %put &em_codebar;
22778     +    %goto doendm;
22779     +   %end;
22780     +   %else %do;
22781     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
22782     +        interact;
22783     +   %end;
22784     + %end;
22786     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
22787     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
22788     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
22789     +    %end;
22791     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
22792     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
22793     +    %end;
22795     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
22796     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
22797     +    %end;
22799     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
22800     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
22801     +    %end;
22803     +    %if "%EM_FREQ" ne "" %then %do;
22804     +       freq %EM_FREQ;
22805     +    %end;
22807     +    %if "&multipleTar" eq "Y" %then %do;
22808     +       /* cycle through all target vars in variableset */
22809     +       %let tdsid = %sysfunc(open(temptarget));
22810     +       %if &tdsid %then %do;
22811     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
22812     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
22813     +          %do %while(^ %sysfunc(fetch(&tdsid)));
22814     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
22815     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
22816     +             target &var / level = &lvl
22817     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
22818     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
22819     +             %end;
22820     +             %else %if "&lvl" eq "INTERVAL" %then %do;
22821     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
22822     +             %end;
22823     +             %else %if "&lvl" eq "ORDINAL" %then %do;
22824     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
22825     +             %end;
22826     +          %end;
22827     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
22828     +       %end;
22829     +       useTarget variable = %EM_TARGET;
22830     +    %end;
22831     +    %else %do;
22832     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
22833     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
22834     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
22835     +      %end;
22836     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
22837     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
22838     +      %end;
22839     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
22840     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
22841     +      %end;
22842     +    %end;
22844     +    %if "&multipleTar" eq "N" %then %do;
22845     +      &EM_DEC_STATEMENT;
22846     +    %end;
22848     +    Performance &EM_PROPERTY_PERFORMANCE
22849     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
22850     +      nodesize=&EM_PROPERTY_NODESAMPLE
22851     +    %end;
22852     +    ;
22854     +    %if "&intFlag" eq "Y" %then %do;
22855     +       INTERACT Largest;
22856     +       Train maxnewdepth=0;
22857     +    %end;
22859     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
22860     +         Assess
22861     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
22862     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
22863     +              %put &em_codebar;
22864     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
22865     +              %put &errormsg;
22866     +              %put &em_codebar;
22867     +            %end;
22868     +            %else %do;
22869     +               Validata=&EM_IMPORT_VALIDATE
22870     +            %end;
22871     +         %end;
22872     +         %else %do;
22873     +           NoValidata
22874     +         %end;
22875     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
22876     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
22877     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
22878     +               %if &dsid %then %do;
22879     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
22880     +                 %do %while(^ %sysfunc(fetch(&dsid)));
22881     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
22882     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
22883     +                   %else %do;
22884     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
22885     +                      %else %let measure= MISC;
22886     +                   %end;
22887     +                 %end;
22888     +               %end;
22889     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
22890     +            %end;
22891     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
22892     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
22893     +                 %let measure=ASE;
22894     +              %end;
22895     +              %else %do;
22896     +                 %let measure=MISC;
22897     +              %end;
22898     +            %end;
22899     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
22900     +              %let measure=ASE;
22901     +            %end;
22902     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
22903     +               %let measure = LIFT;
22904     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
22905     +               %if &dsid %then %do;
22906     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
22907     +                 %do %while(^ %sysfunc(fetch(&dsid)));
22908     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
22909     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
22910     +                 %end;
22911     +               %end;
22912     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
22913     +            %end;
22914     +            measure=&measure
22915     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
22916     +               event = "&targetEvent"
22917     +            %end;
22918     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
22919     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
22920     +            %end;
22921     +         %end;
22922     +         %if "&multipleTar" eq "N" %then %do;
22923     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
22924     +               CV
22925     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
22926     +                 CVNITer = &EM_PROPERTY_CVNITER
22927     +               %end;
22928     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
22929     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
22930     +               %end;
22931     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
22932     +                 CVSeed = &EM_PROPERTY_CVSEED
22933     +               %end;
22934     +            %end;
22935     +         %end;
22936     +       %end;
22937     +      ;
22939     +      %if "&intFlag" ne "Y" %then %do;
22940     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
22941     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
22942     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
22943     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
22945     +          SUBTREE &subtree
22946     +          %if "&subtree" eq "NLEAVES" %then %do;
22947     +            =&EM_PROPERTY_NSUBTREE
22948     +          %end;
22949     +          ;
22950     +        %end;
22952     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
22953     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
22954     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
22955     +          %end;
22956     +       %end;
22957     +      %end;
22958     + %end;
22961     + MakeMacro nleaves = nleaves;
22962     + save
22963     + %if "&EM_USER_EMTREE" ne "" %then %do;
22964     +   MODEL=&EM_USER_EMTREE
22965     + %end;
22966     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
22967     +   SEQUENCE=&EM_USER_OUTSEQ
22968     + %end;
22969     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
22970     +   IMPORTANCE=&EM_USER_OUTIMPORT
22971     + %end;
22972     + %if "&EM_USER_OUTNODES" ne "" %then %do;
22973     +   NODESTAT=&EM_USER_OUTNODES
22974     + %end;
22975     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
22976     +   SUMMARY=&EM_USER_OUTSUMMARY
22977     + %end;
22978     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
22979     +   STATSBYNODE=&EM_USER_OUTSTATS
22980     + %end;
22981     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
22982     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
22983     + %end;
22984     + %if "&EM_USER_OUTPATH" ne "" %then %do;
22985     +   Pathlistnonmissing=&EM_USER_OUTPATH
22986     + %end;
22987     + %if "&EM_USER_OUTRULES" ne "" %then %do;
22988     +   RULES = &EM_USER_OUTRULES
22989     + %end;
22990     + ;
22992     + %if "&intFlag" ne "Y" %then %do;
22994     +   %let lookupString = ;
22995     +   %if ^%symexist(EM_OPTION) %then
22996     +      %let EM_OPTION=;
22998     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
22999     +      %let lookupString = LOOKUP=SELECT;
23000     +   %end;
23002     +   %let codetext=;
23003     +   %let norescodetxt=;
23005     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
23006     +     %let codetext=&codetext DUMMY;
23007     +     %let norescodetxt=&norescodetxt DUMMY;
23008     +   %end;
23009     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
23010     +     %let codetext=&codetext NOLEAFID;
23011     +     %let norescodetxt=&norescodetxt NOLEAFID;
23012     +   %end;
23013     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
23014     +     %let norescodetxt=&norescodetxt NOPRED;
23015     +   %end;
23017     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
23018     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
23020     +   %if &nnpmml %then %do;
23021     +     code pmml;
23022     +   %end;
23024     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
23025     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
23026     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
23027     +   %end;
23028     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
23029     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
23030     +   %end;
23031     + %end;
23033     + run;
23034     + quit;
23036     + /*%em_checkerror(); */
23037     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
23038     +   /* Delete DMDB catalog */
23039     +   proc datasets lib=work nolist;
23040     +       delete _treeDMDB / mt=cat;
23041     +  run;
23042     +  %end;
23044     + %if &nnpmml %then %do;
23045     +    ods pmml close;
23046     + %end;
23048     +  %doendm:
23050     +%mend em_tree_runTreeProcedure;
23052     +%macro em_tree_createFitStats( multipleTar= );
23055     +  /* create targetTable is multipleTar eq Y */
23056     +  data temptarget;
23057     +    set &EM_DATA_VARIABLESET;
23058     +    where ROLE="TARGET";
23059     +  run;
23061     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
23062     +   data &EM_USER_EMOUTFIT;
23063     +     length target $32;
23064     +     merge work.fit_train
23065     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
23066     +       work.fit_valid
23067     +     %end;
23068     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
23069     +       work.fit_test
23070     +     %end;
23071     +     ;
23072     +     %if "&multipleTar" eq "N" %then %do;
23073     +       target="%EM_TARGET";
23074     +     %end;
23075     +     %else %do;
23076     +       target = _TARGET_;
23077     +     %end;
23078     +     drop _NW_ _SUMW_
23079     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
23080     +        _VSUMW_
23081     +     %end;
23082     +     ;
23083     +   run;
23085     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
23086     +     proc datasets library=work nolist;
23087     +       delete fit_valid;
23088     +     run;
23089     +   %end;
23090     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
23091     +     proc datasets library=work nolist;
23092     +       delete fit_test;
23093     +     run;
23094     +   %end;
23096     +%mend em_tree_createFitStats;
23099     +%macro em_tree_makeEnglishRules;
23101     +  %EM_GETNAME(key=OUTNODES, type=DATA);
23102     +  %EM_GETNAME(key=OUTPATH, type=DATA);
23104     +  /* verify that necessary tables exist and if not, skip processing */
23105     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
23106     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
23107     +    %goto doendm;
23108     +  %end;
23109     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
23110     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
23111     +    %goto doendm;
23112     +  %end;
23114     +  /* determine length of variable in outpath dataset */
23115     +  %let vlength= ;
23116     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
23117     +  %if &dsid ne %then %do;
23118     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
23119     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
23120     +  %end;
23121     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
23123     +  data tempoutpath;
23124     +    length varname $&vlength;
23125     +    retain varname;
23126     +    set &EM_USER_OUTPATH;
23128     +    if ^missing(variable) then varname=variable;
23129     +    else if ^missing(var_name) then varname=var_name;
23130     +    output;
23131     +  run;
23133     +  /* create an array of generated predicted variable names */
23134     +  %let tree_pred_vars = ;
23135     +  %let tree_pred_label = ;
23136     +  %let numpred= 0;
23137     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
23139     +    data _null_;
23140     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
23141     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
23142     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
23143     +     if eof then
23144     +       call symput('numpred', strip(put(_N_, BEST.)));
23145     +    run;
23146     +  %end;
23148     +  /* determine if NPRIORS exists in outnodes  */
23149     +  %local nprior_flag;
23150     +  data _null_;
23151     +    set &EM_USER_OUTNODES(obs=2) end=eof;
23152     +    if eof then do;
23153     +      call symput('nprior_flag', strip(put(npriors, best.)));
23154     +    end;
23155     +  run;
23157     +  proc sort data=tempoutpath; by node; run;
23158     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
23160     +  data tempoutpath;
23161     +    merge tempoutpath(in=_a) outnodes(keep= node
23162     +    %if "&nprior_flag" ne "." %then %do;
23163     +      NPRIORS
23164     +    %end;
23165     +    %else %do;
23166     +      N
23167     +    %end;
23168     +    %if &numpred gt 0 %then %do;
23169     +      %do i=1 %to &numpred;
23170     +        &&tree_pred_vars&i
23171     +      %end;
23172     +    %end;
23173     +    );
23174     +    by node;
23175     +    if _a;
23176     +  run;
23178     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
23180     +  data _null_;
23181     +    file x;
23182     +    set tempoutpath;
23183     +    by node descending varname;
23184     +    retain origvar oldnode string;
23185     +    length origvar $32 oldnode 8 string $200;
23187     +    if _N_ = 1 then do;
23188     +      origvar = varname;
23189     +      oldnode = node;
23190     +    end;
23192     +    if first.node then do;
23193     +       put "&EM_CODEBAR";
23194     +       put " Node = " node;
23195     +       put "&EM_CODEBAR";
23196     +    end;
23198     +      if first.varname then do;
23199     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
23200     +            if MISSING(CHARACTER_VALUE) then do;
23201     +             if NUMERIC_VALUE ne .  then do;
23202     +              if ^first.node then do;
23203     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
23204     +              end;
23205     +              else do;
23206     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
23207     +              end;
23208     +             end;
23209     +            end;
23210     +            else do;
23211     +              if ^first.node then do;
23212     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
23213     +              end;
23214     +              else do;
23215     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
23216     +              end;
23217     +             end;
23218     +         end;
23219     +         else if RELATION in ("=") then do;
23220     +            if ^first.node then do;
23221     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
23222     +            end;
23223     +            else do;
23224     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
23225     +            end;
23226     +         end;
23227     +         else if RELATION in ("ISMISSING") then do;
23228     +            if ^first.node then do;
23229     +              string = " AND "|| strip(varname) || " equals Missing";
23230     +            end;
23231     +            else do;
23232     +              string = "if "|| strip(varname) ||" equals Missing";
23233     +            end;
23234     +         end;
23235     +         else if RELATION in ("ISNOTMISSING") then do;
23236     +            if ^first.node then do;
23237     +              string = " AND "|| strip(varname) || " equals All Values";
23238     +            end;
23239     +            else do;
23240     +              string = "if "|| strip(varname) ||" equals All Values";
23241     +            end;
23242     +         end;
23243     +         if ^missing(varname) then origvar = varname;
23244     +         oldnode=node;
23246     +      end;
23247     +      else do;
23248     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
23249     +          if MISSING(CHARACTER_VALUE) then do;
23250     +           if  NUMERIC_VALUE ne .  then do;
23251     +            if ^MISSING(string) then
23252     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
23253     +            else
23254     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
23255     +           end;
23256     +          end;
23257     +          else do;
23258     +            if ^MISSING(string) then
23259     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
23260     +            else
23261     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
23262     +          end;
23264     +         end;
23265     +         else if RELATION in ("=") then do;
23266     +           string = strip(string)||", "||strip(character_value);
23267     +         end;
23268     +         else if RELATION in ("ISMISSING") then do;
23270     +         end;
23271     +         if ^missing(varname) then origvar = varname;
23272     +         oldnode=node;
23273     +      end;
23274     +      if last.varname then do;
23275     +         if RELATION in ("ISMISSING") then do;
23276     +           if ^first.varname then do;
23277     +             string = strip(string) || " or MISSING";
23278     +           end;
23279     +         end;
23280     +         put string;
23281     +         if ^missing(varname) then origvar = varname;
23282     +         oldnode=node;
23283     +      end;
23285     +      if last.node then do;
23286     +         put "then ";
23287     +         put " Tree Node Identifier   = " node;
23289     +         %if "&nprior_flag" ne "." %then %do;
23290     +           put " Number of Observations = " NPRIORS;
23291     +         %end;
23292     +         %else %do;
23293     +           put " Number of Observations = " N;
23294     +         %end;
23296     +         %if &numpred gt 0 %then %do;
23297     +           %do i=1 %to &numpred;
23298     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
23299     +           %end;
23300     +         %end;
23302     +         put " ";
23303     +         if ^missing(varname) then origvar = varname;
23304     +         oldnode=node;
23305     +      end;
23307     +  run;
23309     +  proc datasets lib=work nolist;
23310     +    delete tempoutpath outnodes;
23311     +  run;
23313     +  %doendm:
23314     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS1.Part_TRAIN classout=_tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   class class;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;

NOTE: Records processed = 227   Memory used = 511K.
NOTE: There were 227 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(EM_CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS1.em_Tree / view=EMWS1.em_Tree;
MPRINT(EM_TREE_TRAIN):   set EMWS1.Part_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =AvgAge AvgTumorSize Avginv_node_group age breast breast_quad deg_malig inv_nodes irradiat menopause node_caps tumor_size class class );
MPRINT(EM_TREE_TRAIN):   run;

NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS1.em_Tree;
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
NOTE: There were 227 observations read from the data set EMWS1.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Ids_class_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS_CLASS_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   length orderString nameString $10000;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   retain orderString nameString;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree_VariableSet end=eof;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select(order);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('') order ='DESC';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTASC') order='ASCFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTDESC') order='DESFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   otherwise;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   nameString = trim(nameString)!!' '!!trim(NAME);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   if eof then do;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetOrderString', trim(orderString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetString', trim(nameString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc dmdb batch data=EMWS1.em_Tree dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=513;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   class class(DESC);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target class
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: Records processed = 227   Memory used = 511K.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      
NOTE: There were 227 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 227 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete classout varout;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS1.em_Tree Leafsize = 5 MinCatSize = 5 MaxBranch = 2 MaxDepth = 6
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 5 Maxsurrs = 0 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   event = "RECURRENCE-EVENTS" ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   AvgAge AvgTumorSize Avginv_node_group deg_malig
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   age breast_quad inv_nodes menopause tumor_size
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_BINARY_INPUT):   breast irradiat node_caps
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   class
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   BINARY
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBCHISQ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   decision decdata=WORK.class decvars= DECISION1 DECISION2;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS1.Part_VALIDATE measure=PROFIT
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1589282 kilobytes of physical memory.
NOTE: Will use 227 out of 227 training cases.
NOTE: Using memory pool with 93052928 bytes.
NOTE: Passed training data 7 times.
NOTE: Training used 100936 bytes of work memory.
NOTE: The subtree sequence contains 5 subtrees. The largest has 9 nodes and 5 leaves.
NOTE: Using subtree with 5 nodes and 3 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 5 nodes and 3 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 3.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS1.Tree_EMTREE SEQUENCE=EMWS1.Tree_OUTSEQ IMPORTANCE=EMWS1.Tree_OUTIMPORT NODESTAT=EMWS1.Tree_OUTNODES SUMMARY=EMWS1.Tree_OUTSUMMARY STATSBYNODE=EMWS1.Tree_OUTSTATS TOPOLOGY=EMWS1.Tree_OUTTOPOLOGY 
Pathlistnonmissing=EMWS1.Tree_OUTPATH RULES = EMWS1.Tree_OUTRULES ;
NOTE: The data set EMWS1.TREE_OUTIMPORT has 12 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 356 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 5 observations and 24 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 12 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 46 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 5 observations and 24 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 55 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 5 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\TREEFLOW.sas" res group=Tree ;
NOTE: External file D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\TREEPUBLISH.sas" nores group=Tree ;
NOTE: External file D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.em_Tree out=_NULL_ outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 12 variables.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      
NOTE: There were 227 observations read from the data set EMWS1.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Part_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 10 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.28 seconds
      cpu time            0.17 seconds
      
NOTE: There were 227 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 227 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.30 seconds
      cpu time            0.18 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete _treeDMDB / mt=cat;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS1.Tree_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS1.Tree_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "class";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $17;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 12 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Ids_class_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 2 observations read from the data set EMWS1.IDS_CLASS_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 12 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 12 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS1.Tree_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 5 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 5 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node NPRIORS P_classrecurrence_events P_classno_recurrence_events );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 12 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 5 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 12 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 12 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 12 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " NPRIORS;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: class=recurrence-events = " P_classrecurrence_events;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: class=no-recurrence-events = " P_classno_recurrence_events;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195   
NOTE: The file X is:
      Filename=D:\\127097210_Pahuja\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=April 16, 2022 02:26:32 o'clock,
      Create Time=April 16, 2022 02:26:32 o'clock

NOTE: 32 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 12 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26649251220118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23316      
23317      *------------------------------------------------------------*;
23318      * End TRAIN: Tree;
23319      *------------------------------------------------------------*;

23320      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23321      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
23322      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23323      ;
MPRINT(EM_DIAGRAM):   ;
23324      ;
MPRINT(EM_DIAGRAM):   ;
23325      ;
MPRINT(EM_DIAGRAM):   ;
23326      ;
MPRINT(EM_DIAGRAM):   ;
23327      quit;
MPRINT(EM_DIAGRAM):   quit;
23328      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23329      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
23330      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23331      /*; *"; *'; */
23332      ;
MPRINT(EM_DIAGRAM):   ;
23333      run;
MPRINT(EM_DIAGRAM):   run;
23334      quit;
MPRINT(EM_DIAGRAM):   quit;
23335      /* Reset EM Options */
23336      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
23337      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
23338      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
23339      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
23340      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
23341      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
