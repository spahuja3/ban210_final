*------------------------------------------------------------*
User:                manas
Date:                April 16, 2022
Time:                02:26:54 o'clock
Site:                70192439
Platform:            X64_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "02:26:44 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 16, 2022
Time:                02:26:44 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0M0B07O
"D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0M0B07O new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMLOG.log"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "02:26:44 o'clock"
);
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                manas";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70192439";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "02:26:44 o'clock"
);
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                manas";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
40731      proc freq data=EMWS1.Neural_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Neural_VariableSet noprint;
40732      table ROLE*LEVEL/out=WORK.NeuralMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.NeuralMETA;
40733      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.NEURAL_VARIABLESET.
NOTE: The data set WORK.NEURALMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
40734      proc print data=WORK.NeuralMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.NeuralMETA label noobs;
40735      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
40736      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
40736    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
40736    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
40737      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40738      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
40739      run;
 
NOTE: There were 4 observations read from the data set WORK.NEURALMETA.
NOTE: The PROCEDURE PRINT printed page 13.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
40740      title10;
MPRINT(EM_DIAGRAM):   title10;
40741      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Impt_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class class(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="class";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=class));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="class";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids_class_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by class;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by class;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
40770      data WORK.Neural_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Neural_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
40771      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
40772      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
40772    ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
40772    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
40773         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
40773    ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
40773    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
40774      set EMWS1.IDS_CLASS_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS_CLASS_DM( where=(_TYPE_="TARGET"));
40775      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
40776      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
40777      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
40778      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
40779      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
40780      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
40781      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
40782      end;
MPRINT(EM_DIAGRAM):   end;
40783      output;
MPRINT(EM_DIAGRAM):   output;
40784      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_CLASS_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.NEURAL_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
40785      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40786      proc print data=WORK.Neural_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Neural_EVENT noobs label;
40787      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
40788      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40789      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
40790      run;
 
NOTE: There were 1 observations read from the data set WORK.NEURAL_EVENT.
NOTE: The PROCEDURE PRINT printed page 14.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
40791      title10;
MPRINT(EM_DIAGRAM):   title10;
40792      proc print data = EMWS1.Ids_class_DD noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_class_DD noobs label;
40793      var class
40794      TRAINPRIOR
40795      DECISION1
40796      DECISION2
40797      ;
MPRINT(EM_DIAGRAM):   var class TRAINPRIOR DECISION1 DECISION2 ;
40798      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40799      title10 "Decision Matrix";
MPRINT(EM_DIAGRAM):   title10 "Decision Matrix";
MPRINT(EM_DIAGRAM):   run;
40800      run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_CLASS_DD.
NOTE: The PROCEDURE PRINT printed page 15.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
40801      title10;
MPRINT(EM_DIAGRAM):   title10;
40802      proc print data = EMWS1.Ids_class_DM noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS1.Ids_class_DM noobs label;
40803      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
40804      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
40805      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
40805    ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
40805    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
40806      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40807      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
40808      run;
 
NOTE: There were 11 observations read from the data set EMWS1.IDS_CLASS_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 16.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
40809      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M3Q0UNVW;
MPRINT(EM_DIAGRAM):   set WORK.M3Q0UNVW;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
40819      data WORK.M3Q0UNVW;
MPRINT(EM_DIAGRAM):    data WORK.M3Q0UNVW;
40820      set WORK.M3Q0UNVW end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M3Q0UNVW end=eof;
40821      output;
MPRINT(EM_DIAGRAM):   output;
40822      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
40823      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
40824      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
40825      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
40826      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
40827      output;
MPRINT(EM_DIAGRAM):   output;
40828      end;
MPRINT(EM_DIAGRAM):   end;
40829      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.M3Q0UNVW.
NOTE: The data set WORK.M3Q0UNVW has 14 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_CLASS_DD.
NOTE: The data set WORK.CLASS has 2 observations and 7 variables.
NOTE: There were 2 observations read from the data set EMWS1.IDS_CLASS_DD.
NOTE: The data set WORK.CLASS has 2 observations and 7 variables.
40830      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
40831      * Neural: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Neural: Create decision matrix;
40832      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40833      data WORK.class;
MPRINT(EM_DIAGRAM):   data WORK.class;
40834        length   class                            $  32
40835                 COUNT                                8
40836                 DATAPRIOR                            8
40837                 TRAINPRIOR                           8
40838                 DECPRIOR                             8
40839                 DECISION1                            8
40840                 DECISION2                            8
40841                 ;
MPRINT(EM_DIAGRAM):   length class $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
40842
40843        label    COUNT="Level Counts"
40844                 DATAPRIOR="Data Proportions"
40845                 TRAINPRIOR="Training Proportions"
40846                 DECPRIOR="Decision Priors"
40847                 DECISION1="RECURRENCE-EVENTS"
40848                 DECISION2="NO-RECURRENCE-EVENTS"
40849                 ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "RECURRENCE-EVENTS" DECISION2=
"NO-RECURRENCE-EVENTS" ;
40850        format   COUNT 10.
40851                 ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
40852      class="RECURRENCE-EVENTS"; COUNT=85; DATAPRIOR=0.2972027972; TRAINPRIOR=0.2972027972
40852    ! ; DECPRIOR=0.2972; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   class="RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   COUNT=85;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.2972027972;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.2972027972;
MPRINT(EM_DIAGRAM):   DECPRIOR=0.2972;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
40853      output;
MPRINT(EM_DIAGRAM):   output;
40854      class="NO-RECURRENCE-EVENTS"; COUNT=201; DATAPRIOR=0.7027972028;
40854    ! TRAINPRIOR=0.7027972028; DECPRIOR=0.7028; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   class="NO-RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   COUNT=201;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.7027972028;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.7027972028;
MPRINT(EM_DIAGRAM):   DECPRIOR=0.7028;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
40855      output;
MPRINT(EM_DIAGRAM):   output;
40856      ;
MPRINT(EM_DIAGRAM):   ;
40857      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.CLASS has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
40858      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
40859      modify class(type=PROFIT label=class);
MPRINT(EM_DIAGRAM):   modify class(type=PROFIT label= class);
MPRINT(EM_DIAGRAM):   label DECISION1= 'RECURRENCE-EVENTS';
MPRINT(EM_DIAGRAM):   label DECISION2= 'NO-RECURRENCE-EVENTS';
MPRINT(EM_DIAGRAM):   run;
40860      label DECISION1= 'RECURRENCE-EVENTS';
40861      label DECISION2= 'NO-RECURRENCE-EVENTS';
40862      run;
 
NOTE: MODIFY was successful for WORK.CLASS.DATA.
40863      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
40864      data EM_Neural;
MPRINT(EM_DIAGRAM):   data EM_Neural;
40865      set EMWS1.Impt_TRAIN(keep=
40866      AvgAge AvgTumorSize Avginv_node_group IMP_node_caps age breast breast_quad
40867      class deg_malig inv_nodes irradiat menopause tumor_size );
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TRAIN(keep= AvgAge AvgTumorSize Avginv_node_group
IMP_node_caps age breast breast_quad class deg_malig inv_nodes irradiat menopause tumor_size );
40868      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: There were 227 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 227 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: The data set WORK.EM_NEURAL has 227 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40869      *------------------------------------------------------------* ;
40870      * Neural: DMDBClass Macro ;
40871      *------------------------------------------------------------* ;
40872      %macro DMDBClass;
40873          IMP_node_caps(ASC) age(ASC) breast(ASC) breast_quad(ASC) class(DESC)
40874         inv_nodes(ASC) irradiat(ASC) menopause(ASC) tumor_size(ASC)
40875      %mend DMDBClass;
40876      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40877      * Neural: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Neural: DMDBVar Macro ;
40878      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40879      %macro DMDBVar;
40880          AvgAge AvgTumorSize Avginv_node_group deg_malig
40881      %mend DMDBVar;
40882      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40883      * Neural: Create DMDB;
MPRINT(EM_DIAGRAM):   * Neural: Create DMDB;
40884      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40885      proc dmdb batch data=WORK.EM_Neural
40886      dmdbcat=WORK.Neural_DMDB
40887      maxlevel = 513
40888      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_Neural dmdbcat=WORK.Neural_DMDB maxlevel =
513 ;
MPRINT(EM_DIAGRAM):   class
40889      class %DMDBClass;
MPRINT(DMDBCLASS):   IMP_node_caps(ASC) age(ASC) breast(ASC) breast_quad(ASC) class(DESC)
inv_nodes(ASC) irradiat(ASC) menopause(ASC) tumor_size(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
40890      var %DMDBVar;
MPRINT(DMDBVAR):   AvgAge AvgTumorSize Avginv_node_group deg_malig
MPRINT(EM_DIAGRAM):  ;
40891      target
40892      class
40893      ;
MPRINT(EM_DIAGRAM):   target class ;
40894      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 227   Memory used = 511K.
NOTE: There were 227 observations read from the data set WORK.EM_NEURAL.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
40895      quit;
40896      *--- end code ---*;
 
40897      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
40898      * Neural: Interval Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Interval Input Variables Macro ;
40899      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40900      %macro INTINPUTS;
40901          AvgAge AvgTumorSize Avginv_node_group deg_malig
40902      %mend INTINPUTS;
40903      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40904      * Neural: Binary Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Binary Inputs Macro ;
40905      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40906      %macro BININPUTS;
40907          IMP_node_caps breast irradiat
40908      %mend BININPUTS;
40909      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40910      * Neural: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Nominal Inputs Macro ;
40911      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40912      %macro NOMINPUTS;
40913          age breast_quad inv_nodes menopause tumor_size
40914      %mend NOMINPUTS;
40915      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40916      * Neural: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Ordinal Inputs Macro ;
40917      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40918      %macro ORDINPUTS;
40919
40920      %mend ORDINPUTS;
40921      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40922      * Neural Network Training;
MPRINT(EM_DIAGRAM):   * Neural Network Training;
40923      ;
MPRINT(EM_DIAGRAM):   ;
40924      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40925      proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB
40926      validdata = EMWS1.Impt_VALIDATE
40927      random=12345
40928      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB validdata =
EMWS1.Impt_VALIDATE random=12345 ;
40929      nloptions
40930      ;
MPRINT(EM_DIAGRAM):   nloptions ;
40931      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
40932      decision decdata=WORK.class
40933      decvars=
40934      DECISION1
40935      DECISION2
40936      ;
MPRINT(EM_DIAGRAM):   decision decdata=WORK.class decvars= DECISION1 DECISION2 ;
40937      netopts
40938      decay=0;
MPRINT(EM_DIAGRAM):   netopts decay=0;
MPRINT(EM_DIAGRAM):   input
40939      input %INTINPUTS / level=interval id=intvl
MPRINT(INTINPUTS):   AvgAge AvgTumorSize Avginv_node_group deg_malig
40940      ;
MPRINT(EM_DIAGRAM):   / level=interval id=intvl ;
MPRINT(EM_DIAGRAM):   input
40941      input %BININPUTS / level=nominal id=bin
MPRINT(BININPUTS):   IMP_node_caps breast irradiat
40942      ;
MPRINT(EM_DIAGRAM):   / level=nominal id=bin ;
MPRINT(EM_DIAGRAM):   input
40943      input %NOMINPUTS / level=nominal id=nom
MPRINT(NOMINPUTS):   age breast_quad inv_nodes menopause tumor_size
40944      ;
MPRINT(EM_DIAGRAM):   / level=nominal id=nom ;
40945      target class / level=NOMINAL id=class
40946      bias
40947      ;
MPRINT(EM_DIAGRAM):   target class / level=NOMINAL id=class bias ;
40948      arch MLP
40949      Hidden=3
40950      ;
MPRINT(EM_DIAGRAM):   arch MLP Hidden=3 ;
40951      Prelim 5 preiter=10
40952      pretime=3600
40953      Outest=EMWS1.Neural_PRELIM_OUTEST
40954      ;
MPRINT(EM_DIAGRAM):   Prelim 5 preiter=10 pretime=3600 Outest=EMWS1.Neural_PRELIM_OUTEST ;
NOTE:  Synchronizing the objectives and the Solution.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: The data set EMWS1.NEURAL_PRELIM_OUTEST has 11 observations and 124 variables.
40955      save network=EMWS1.Neural_NETWORK.dm_neural;
MPRINT(EM_DIAGRAM):   save network=EMWS1.Neural_NETWORK.dm_neural;
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been closed.
40956      train Maxiter=50
40957      maxtime=14400
40958      Outest=EMWS1.Neural_outest estiter=1
40959      Outfit=EMWS1.Neural_OUTFIT
40960      ;
MPRINT(EM_DIAGRAM):   train Maxiter=50 maxtime=14400 Outest=EMWS1.Neural_outest estiter=1
Outfit=EMWS1.Neural_OUTFIT ;
WARNING: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 50 iterations or 2147483647 function calls.
NOTE: The data set EMWS1.NEURAL_OUTEST has 53 observations and 124 variables.
NOTE: The data set EMWS1.NEURAL_OUTFIT has 104 observations and 40 variables.
40961      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL has 227 observations and 13 variables.
NOTE: The data set EMWS1.IMPT_VALIDATE has . observations and 15 variables.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.35 seconds
      cpu time            0.29 seconds
 
NOTE: There were 59 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: The data set WORK.CLASS has 2 observations and 7 variables.
NOTE: Closing the Neural Application.
NOTE: The PROCEDURE NEURAL printed pages 17-20.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.48 seconds
      cpu time            0.31 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
40962      quit;
 
40963      proc sort data=EMWS1.Neural_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL"))
40963    ! out=fit_Neural;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_OUTFIT(where=(_iter_ ne . and
_NAME_="OVERALL")) out=fit_Neural;
40964      by DESCENDING _VAPROF_;
MPRINT(EM_DIAGRAM):   by DESCENDING _VAPROF_;
40965      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL_OUTFIT.
      WHERE (_iter_ not = .) and (_NAME_='OVERALL');
NOTE: The data set WORK.FIT_NEURAL has 52 observations and 40 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
40966      %GLOBAL ITER;
40967      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
40968      set fit_Neural(obs=1);
MPRINT(EM_DIAGRAM):   set fit_Neural(obs=1);
40969      call symput('ITER',put(_ITER_, 6.));
MPRINT(EM_DIAGRAM):   call symput('ITER',put(_ITER_, 6.));
40970      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_NEURAL.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
40971      data EMWS1.Neural_INITIAL;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_INITIAL;
40972      set EMWS1.Neural_outest(where=(_ITER_ eq &ITER and _OBJ_ ne .));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_outest(where=(_ITER_ eq 1 and _OBJ_ ne .));
40973      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_OUTEST.
      WHERE (_ITER_=1) and (_OBJ_ not = .);
NOTE: The data set EMWS1.NEURAL_INITIAL has 1 observations and 124 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
40974      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
40975      * Neural Network Model Selection;
MPRINT(EM_DIAGRAM):   * Neural Network Model Selection;
40976      ;
MPRINT(EM_DIAGRAM):   ;
40977      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40978      proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB
40979      validdata = EMWS1.Impt_VALIDATE
40980      network = EMWS1.Neural_NETWORK.dm_neural
40981      random=12345
40982      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB validdata =
EMWS1.Impt_VALIDATE network = EMWS1.Neural_NETWORK.dm_neural random=12345 ;
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been closed.
40983      nloptions noprint;
MPRINT(EM_DIAGRAM):   nloptions noprint;
40984      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
40985      decision decdata=WORK.class
40986      decvars=
40987      DECISION1
40988      DECISION2
40989      ;
MPRINT(EM_DIAGRAM):   decision decdata=WORK.class decvars= DECISION1 DECISION2 ;
40990      initial inest=EMWS1.Neural_INITIAL;
MPRINT(EM_DIAGRAM):   initial inest=EMWS1.Neural_INITIAL;
NOTE: The data set EMWS1.NEURAL_INITIAL has 1 observations and 124 variables.
40991      train tech=NONE;
MPRINT(EM_DIAGRAM):   train tech=NONE;
NOTE: No optimization performed.
40992      code file="D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\SCORECODE.sas"
40993      group=Neural
40994      ;
MPRINT(EM_DIAGRAM):   code file="D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\SCORECODE.sas"
group=Neural ;
NOTE: External file D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\SCORECODE.sas opened.
40995      ;
MPRINT(EM_DIAGRAM):   ;
40996      code file="D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\RESIDUALSCORECODE.sas"
40997      group=Neural
40998      residual
40999      ;
MPRINT(EM_DIAGRAM):   code
file="D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\RESIDUALSCORECODE.sas" group=Neural
residual ;
NOTE: External file D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\RESIDUALSCORECODE.sas opened.
41000      ;
MPRINT(EM_DIAGRAM):   ;
41001      score data=EMWS1.Impt_TRAIN out=_NULL_
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
41002      outfit=WORK.FIT1
41003      role=TRAIN
41004      outkey=EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Impt_TRAIN out=_NULL_ outfit=WORK.FIT1 role=TRAIN
outkey=EMWS1.Neural_OUTKEY;
NOTE: The data set EMWS1.NEURAL_OUTKEY has 53 observations and 8 variables.
NOTE: The data set EMWS1.IMPT_TRAIN has . observations and 15 variables.
NOTE: There were 227 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT1 has 2 observations and 25 variables.
41005      score data=EMWS1.Impt_VALIDATE out=_NULL_
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
41006      outfit=WORK.FIT2
41007      role=VALID
41008      outkey=EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Impt_VALIDATE out=_NULL_ outfit=WORK.FIT2 role=VALID
outkey=EMWS1.Neural_OUTKEY;
NOTE: The data set EMWS1.NEURAL_OUTKEY has 53 observations and 8 variables.
NOTE: The data set EMWS1.IMPT_VALIDATE has . observations and 15 variables.
NOTE: There were 59 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: The data set WORK.FIT2 has 2 observations and 17 variables.
41009      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL has 227 observations and 13 variables.
NOTE: The data set EMWS1.IMPT_VALIDATE has . observations and 15 variables.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.18 seconds
 
NOTE: There were 59 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: The data set WORK.CLASS has 2 observations and 7 variables.
NOTE: Closing the Neural Application.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.25 seconds
      cpu time            0.20 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
41010      quit;
41011      data EMWS1.Neural_OUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_OUTFIT;
41012      merge WORK.FIT1 WORK.FIT2;
MPRINT(EM_DIAGRAM):   merge WORK.FIT1 WORK.FIT2;
41013      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.FIT1.
NOTE: There were 2 observations read from the data set WORK.FIT2.
NOTE: The data set EMWS1.NEURAL_OUTFIT has 2 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
41014      data EMWS1.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMESTIMATE;
41015      set EMWS1.Neural_outest;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_outest;
41016      if _type_ ^in('HESSIAN' 'GRAD');
MPRINT(EM_DIAGRAM):   if _type_ ^in('HESSIAN' 'GRAD');
41017      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set EMWS1.NEURAL_OUTEST.
NOTE: The data set EMWS1.NEURAL_EMESTIMATE has 52 observations and 124 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
41018      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
41019      delete EM_Neural;
MPRINT(EM_DIAGRAM):   delete EM_Neural;
41020      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.EM_NEURAL (memtype=DATA).
41021      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
41022      data EMWS1.Neural_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
41023      set fit_Neural;
MPRINT(EM_DIAGRAM):   set fit_Neural;
41024      attrib _ITER_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_trainiterations_vlabel  ,
41024    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _ITER_ label="Training Iterations";
41025      attrib _NAME_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name  ,
41025    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _NAME_ label="Name";
41026      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set WORK.FIT_NEURAL.
NOTE: The data set EMWS1.NEURAL_PLOTDS has 52 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
41027      proc sort data=EMWS1.Neural_PLOTDS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_PLOTDS;
41028      by _ITER_;
MPRINT(EM_DIAGRAM):   by _ITER_;
41029      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL_PLOTDS.
NOTE: The data set EMWS1.NEURAL_PLOTDS has 52 observations and 40 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
41030      data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_
41030    ! where=(_type_ eq "PARMS" and _iter_ eq 1) );
MPRINT(EM_DIAGRAM):    data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_
_averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 1) );
41031      set EMWS1.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMESTIMATE;
41032      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL_EMESTIMATE.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 116 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
41033      proc sort;
MPRINT(EM_DIAGRAM):   proc sort;
41034      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
41035      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 116 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
41036      proc transpose data=tempweight out=EMWS1.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   proc transpose data=tempweight out=EMWS1.Neural_WEIGHTDS;
41037      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
41038      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set EMWS1.NEURAL_WEIGHTDS has 114 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
41039      data EMWS1.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_WEIGHTDS;
41040      set EMWS1.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_WEIGHTDS;
41041      FROM = trim(left(scan(_LABEL_, 1, '->')));
MPRINT(EM_DIAGRAM):   FROM = trim(left(scan(_LABEL_, 1, '->')));
41042      TO = trim(left(scan(_LABEL_, 2, '>')));
MPRINT(EM_DIAGRAM):   TO = trim(left(scan(_LABEL_, 2, '>')));
41043      WEIGHT = COL1;
MPRINT(EM_DIAGRAM):   WEIGHT = COL1;
41044      if (TO eq '') or (FROM eq '') then delete;
MPRINT(EM_DIAGRAM):   if (TO eq '') or (FROM eq '') then delete;
41045      label _LABEL_ ="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))" FROM
41045    ! = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel  , NOQUOTE))" TO =
41045    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel  , NOQUOTE))" WEIGHT =
41046         "%sysfunc(sasmsg(sashelp.dmine, rpt_weight_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LABEL_ = "Label" FROM = "From" TO = "Into" WEIGHT = "Weight";
41047      keep FROM TO WEIGHT _LABEL_;
MPRINT(EM_DIAGRAM):   keep FROM TO WEIGHT _LABEL_;
41048      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 114 observations read from the data set EMWS1.NEURAL_WEIGHTDS.
NOTE: The data set EMWS1.NEURAL_WEIGHTDS has 109 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
41049      proc sort data=EMWS1.Neural_WEIGHTDS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_WEIGHTDS nodupkey;
41050      by _LABEL_;
MPRINT(EM_DIAGRAM):   by _LABEL_;
41051      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 109 observations read from the data set EMWS1.NEURAL_WEIGHTDS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL_WEIGHTDS has 109 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "02:26:48 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 16, 2022
Time:                02:26:48 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0SSU2FM
"D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0SSU2FM new;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of
      this session.
41153      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
41154      set EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTKEY;
41155      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
41156      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set EMWS1.NEURAL_OUTKEY.
NOTE: The data set WORK.OUTKEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
41157      filename emflow "D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41158      *------------------------------------------------------------*;
41159      * Neural: Scoring DATA data;
41160      *------------------------------------------------------------*;
41161      data EMWS1.Neural_TRAIN
41162      / view=EMWS1.Neural_TRAIN
41163      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_TRAIN / view=EMWS1.Neural_TRAIN ;
41164      set EMWS1.Impt_TRAIN
41165      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TRAIN ;
41166      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
41167     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
41168     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
41169     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
41170     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
41171     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
41172     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
41173     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
41174     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
41175     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
41176     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
41177     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
41178     +LENGTH _WARN_ $4
41179     +      F_class  $ 20
41180     +      I_class  $ 20
41181     +      U_class  $ 20
41182     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_class $ 20 I_class $ 20 U_class $ 20 ;
41183     +      label S_AvgAge = 'Standard: AvgAge' ;
MPRINT(EM_DIAGRAM):   label S_AvgAge = 'Standard: AvgAge' ;
41184     +
41185     +      label S_AvgTumorSize = 'Standard: AvgTumorSize' ;
MPRINT(EM_DIAGRAM):   label S_AvgTumorSize = 'Standard: AvgTumorSize' ;
41186     +
41187     +      label S_Avginv_node_group = 'Standard: Avginv_node_group' ;
MPRINT(EM_DIAGRAM):   label S_Avginv_node_group = 'Standard: Avginv_node_group' ;
41188     +
41189     +      label S_deg_malig = 'Standard: deg_malig' ;
MPRINT(EM_DIAGRAM):   label S_deg_malig = 'Standard: deg_malig' ;
41190     +
41191     +      label IMP_node_capsno = 'Dummy: IMP_node_caps=no' ;
MPRINT(EM_DIAGRAM):   label IMP_node_capsno = 'Dummy: IMP_node_caps=no' ;
41192     +
41193     +      label breastleft = 'Dummy: breast=left' ;
MPRINT(EM_DIAGRAM):   label breastleft = 'Dummy: breast=left' ;
41194     +
41195     +      label irradiatno = 'Dummy: irradiat=no' ;
MPRINT(EM_DIAGRAM):   label irradiatno = 'Dummy: irradiat=no' ;
41196     +
41197     +      label age20_29 = 'Dummy: age=20-29' ;
MPRINT(EM_DIAGRAM):   label age20_29 = 'Dummy: age=20-29' ;
41198     +
41199     +      label age30_39 = 'Dummy: age=30-39' ;
MPRINT(EM_DIAGRAM):   label age30_39 = 'Dummy: age=30-39' ;
41200     +
41201     +      label age40_49 = 'Dummy: age=40-49' ;
MPRINT(EM_DIAGRAM):   label age40_49 = 'Dummy: age=40-49' ;
41202     +
41203     +      label age50_59 = 'Dummy: age=50-59' ;
MPRINT(EM_DIAGRAM):   label age50_59 = 'Dummy: age=50-59' ;
41204     +
41205     +      label age60_69 = 'Dummy: age=60-69' ;
MPRINT(EM_DIAGRAM):   label age60_69 = 'Dummy: age=60-69' ;
41206     +
41207     +      label breast_quadcentral = 'Dummy: breast_quad=central' ;
MPRINT(EM_DIAGRAM):   label breast_quadcentral = 'Dummy: breast_quad=central' ;
41208     +
41209     +      label breast_quadleft_low = 'Dummy: breast_quad=left_low' ;
MPRINT(EM_DIAGRAM):   label breast_quadleft_low = 'Dummy: breast_quad=left_low' ;
41210     +
41211     +      label breast_quadleft_up = 'Dummy: breast_quad=left_up' ;
MPRINT(EM_DIAGRAM):   label breast_quadleft_up = 'Dummy: breast_quad=left_up' ;
41212     +
41213     +      label breast_quadright_low = 'Dummy: breast_quad=right_low' ;
MPRINT(EM_DIAGRAM):   label breast_quadright_low = 'Dummy: breast_quad=right_low' ;
41214     +
41215     +      label inv_nodes0_2 = 'Dummy: inv_nodes=0-2' ;
MPRINT(EM_DIAGRAM):   label inv_nodes0_2 = 'Dummy: inv_nodes=0-2' ;
41216     +
41217     +      label inv_nodes12_14 = 'Dummy: inv_nodes=12-14' ;
MPRINT(EM_DIAGRAM):   label inv_nodes12_14 = 'Dummy: inv_nodes=12-14' ;
41218     +
41219     +      label inv_nodes15_17 = 'Dummy: inv_nodes=15-17' ;
MPRINT(EM_DIAGRAM):   label inv_nodes15_17 = 'Dummy: inv_nodes=15-17' ;
41220     +
41221     +      label inv_nodes24_26 = 'Dummy: inv_nodes=24-26' ;
MPRINT(EM_DIAGRAM):   label inv_nodes24_26 = 'Dummy: inv_nodes=24-26' ;
41222     +
41223     +      label inv_nodes3_5 = 'Dummy: inv_nodes=3-5' ;
MPRINT(EM_DIAGRAM):   label inv_nodes3_5 = 'Dummy: inv_nodes=3-5' ;
41224     +
41225     +      label inv_nodes6_8 = 'Dummy: inv_nodes=6-8' ;
MPRINT(EM_DIAGRAM):   label inv_nodes6_8 = 'Dummy: inv_nodes=6-8' ;
41226     +
41227     +      label menopausege40 = 'Dummy: menopause=ge40' ;
MPRINT(EM_DIAGRAM):   label menopausege40 = 'Dummy: menopause=ge40' ;
41228     +
41229     +      label menopauselt40 = 'Dummy: menopause=lt40' ;
MPRINT(EM_DIAGRAM):   label menopauselt40 = 'Dummy: menopause=lt40' ;
41230     +
41231     +      label tumor_size0_4 = 'Dummy: tumor_size=0-4' ;
MPRINT(EM_DIAGRAM):   label tumor_size0_4 = 'Dummy: tumor_size=0-4' ;
41232     +
41233     +      label tumor_size10_14 = 'Dummy: tumor_size=10-14' ;
MPRINT(EM_DIAGRAM):   label tumor_size10_14 = 'Dummy: tumor_size=10-14' ;
41234     +
41235     +      label tumor_size15_19 = 'Dummy: tumor_size=15-19' ;
MPRINT(EM_DIAGRAM):   label tumor_size15_19 = 'Dummy: tumor_size=15-19' ;
41236     +
41237     +      label tumor_size20_24 = 'Dummy: tumor_size=20-24' ;
MPRINT(EM_DIAGRAM):   label tumor_size20_24 = 'Dummy: tumor_size=20-24' ;
41238     +
41239     +      label tumor_size25_29 = 'Dummy: tumor_size=25-29' ;
MPRINT(EM_DIAGRAM):   label tumor_size25_29 = 'Dummy: tumor_size=25-29' ;
41240     +
41241     +      label tumor_size30_34 = 'Dummy: tumor_size=30-34' ;
MPRINT(EM_DIAGRAM):   label tumor_size30_34 = 'Dummy: tumor_size=30-34' ;
41242     +
41243     +      label tumor_size35_39 = 'Dummy: tumor_size=35-39' ;
MPRINT(EM_DIAGRAM):   label tumor_size35_39 = 'Dummy: tumor_size=35-39' ;
41244     +
41245     +      label tumor_size40_44 = 'Dummy: tumor_size=40-44' ;
MPRINT(EM_DIAGRAM):   label tumor_size40_44 = 'Dummy: tumor_size=40-44' ;
41246     +
41247     +      label tumor_size45_49 = 'Dummy: tumor_size=45-49' ;
MPRINT(EM_DIAGRAM):   label tumor_size45_49 = 'Dummy: tumor_size=45-49' ;
41248     +
41249     +      label tumor_size5_9 = 'Dummy: tumor_size=5-9' ;
MPRINT(EM_DIAGRAM):   label tumor_size5_9 = 'Dummy: tumor_size=5-9' ;
41250     +
41251     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
41252     +
41253     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
41254     +
41255     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
41256     +
41257     +      label I_class = 'Into: class' ;
MPRINT(EM_DIAGRAM):   label I_class = 'Into: class' ;
41258     +
41259     +      label F_class = 'From: class' ;
MPRINT(EM_DIAGRAM):   label F_class = 'From: class' ;
41260     +
41261     +      label U_class = 'Unnormalized Into: class' ;
MPRINT(EM_DIAGRAM):   label U_class = 'Unnormalized Into: class' ;
41262     +
41263     +      label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
41264     +
41265     +      label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
41266     +
41267     +      label P_classno_recurrence_events =
41268     +'Predicted: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classno_recurrence_events = 'Predicted:
class=no-recurrence-events' ;
41269     +
41270     +      label R_classno_recurrence_events =
41271     +'Residual: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classno_recurrence_events = 'Residual:
class=no-recurrence-events' ;
41272     +
41273     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
41274     +
41275     +*** Generate dummy variables for IMP_node_caps ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_node_caps ;
41276     +drop IMP_node_capsno ;
MPRINT(EM_DIAGRAM):   drop IMP_node_capsno ;
41277     +if missing( IMP_node_caps ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_node_caps ) then do;
41278     +   IMP_node_capsno = .;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = .;
41279     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
41280     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41281     +end;
MPRINT(EM_DIAGRAM):   end;
41282     +else do;
MPRINT(EM_DIAGRAM):   else do;
41283     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
41284     +   _dm3 = put( IMP_node_caps , $3. );
MPRINT(EM_DIAGRAM):   _dm3 = put( IMP_node_caps , $3. );
41285     +   %DMNORMIP( _dm3 )
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
41286     +   if _dm3 = 'NO'  then do;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = -1;
41287     +      IMP_node_capsno = 1;
MPRINT(EM_DIAGRAM):   end;
41288     +   end;
41289     +   else if _dm3 = 'YES'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = .;
41290     +      IMP_node_capsno = -1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
41291     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41292     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
41293     +      IMP_node_capsno = .;
41294     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for breast ;
41295     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop breastleft ;
41296     +   end;
MPRINT(EM_DIAGRAM):   if missing( breast ) then do;
41297     +end;
MPRINT(EM_DIAGRAM):   breastleft = .;
41298     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
41299     +*** Generate dummy variables for breast ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41300     +drop breastleft ;
MPRINT(EM_DIAGRAM):   end;
41301     +if missing( breast ) then do;
41302     +   breastleft = .;
MPRINT(EM_DIAGRAM):   else do;
41303     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
41304     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
41305     +end;
MPRINT(EM_DIAGRAM):   _dm5 = put( breast , $5. );
41306     +else do;
41307     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(DMNORMIP):   call dmnorm(_dm5,
41308     +   _dm5 = put( breast , $5. );
41309     +   %DMNORMIP( _dm5 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm5 = 'LEFT' then do;
MPRINT(EM_DIAGRAM):   breastleft = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'RIGHT' then do;
41310     +   if _dm5 = 'LEFT'  then do;
MPRINT(EM_DIAGRAM):   breastleft = -1;
41311     +      breastleft = 1;
MPRINT(EM_DIAGRAM):   end;
41312     +   end;
41313     +   else if _dm5 = 'RIGHT'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   breastleft = .;
41314     +      breastleft = -1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
41315     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41316     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
41317     +      breastleft = .;
41318     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for irradiat ;
41319     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop irradiatno ;
41320     +   end;
MPRINT(EM_DIAGRAM):   if missing( irradiat ) then do;
41321     +end;
MPRINT(EM_DIAGRAM):   irradiatno = .;
41322     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
41323     +*** Generate dummy variables for irradiat ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41324     +drop irradiatno ;
MPRINT(EM_DIAGRAM):   end;
41325     +if missing( irradiat ) then do;
41326     +   irradiatno = .;
MPRINT(EM_DIAGRAM):   else do;
41327     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
41328     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
41329     +end;
MPRINT(EM_DIAGRAM):   _dm3 = put( irradiat , $3. );
41330     +else do;
41331     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(DMNORMIP):   call dmnorm(_dm3,
41332     +   _dm3 = put( irradiat , $3. );
41333     +   %DMNORMIP( _dm3 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   irradiatno = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
41334     +   if _dm3 = 'NO'  then do;
MPRINT(EM_DIAGRAM):   irradiatno = -1;
41335     +      irradiatno = 1;
MPRINT(EM_DIAGRAM):   end;
41336     +   end;
41337     +   else if _dm3 = 'YES'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   irradiatno = .;
41338     +      irradiatno = -1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
41339     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41340     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
41341     +      irradiatno = .;
41342     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for age ;
41343     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop age20_29 age30_39 age40_49 age50_59 age60_69 ;
41344     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
41345     +end;
MPRINT(EM_DIAGRAM):   age20_29 = 0;
41346     +
MPRINT(EM_DIAGRAM):   age30_39 = 0;
41347     +*** Generate dummy variables for age ;
MPRINT(EM_DIAGRAM):   age40_49 = 0;
41348     +drop age20_29 age30_39 age40_49 age50_59 age60_69 ;
MPRINT(EM_DIAGRAM):   age50_59 = 0;
41349     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   age60_69 = 0;
41350     +age20_29 = 0;
MPRINT(EM_DIAGRAM):   if missing( age ) then do;
41351     +age30_39 = 0;
MPRINT(EM_DIAGRAM):   age20_29 = .;
41352     +age40_49 = 0;
MPRINT(EM_DIAGRAM):   age30_39 = .;
41353     +age50_59 = 0;
MPRINT(EM_DIAGRAM):   age40_49 = .;
41354     +age60_69 = 0;
MPRINT(EM_DIAGRAM):   age50_59 = .;
41355     +if missing( age ) then do;
MPRINT(EM_DIAGRAM):   age60_69 = .;
41356     +   age20_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
41357     +   age30_39 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41358     +   age40_49 = .;
MPRINT(EM_DIAGRAM):   end;
41359     +   age50_59 = .;
41360     +   age60_69 = .;
MPRINT(EM_DIAGRAM):   else do;
41361     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
41362     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
41363     +end;
MPRINT(EM_DIAGRAM):   _dm5 = put( age , $5. );
41364     +else do;
41365     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(DMNORMIP):   call dmnorm(_dm5,
41366     +   _dm5 = put( age , $5. );
41367     +   %DMNORMIP( _dm5 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm5 <= '40-49' then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '30-39' then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '20-29' then do;
MPRINT(EM_DIAGRAM):   age20_29 = 1;
41368     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41369     +   if _dm5 <= '40-49'  then do;
MPRINT(EM_DIAGRAM):   end;
41370     +      if _dm5 <= '30-39'  then do;
41371     +         if _dm5 = '20-29'  then do;
MPRINT(EM_DIAGRAM):   else do;
41372     +            age20_29 = 1;
MPRINT(EM_DIAGRAM):   if _dm5 = '30-39' then do;
41373     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   age30_39 = 1;
41374     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41375     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
41376     +            if _dm5 = '30-39'  then do;
MPRINT(EM_DIAGRAM):   end;
41377     +               age30_39 = 1;
41378     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
41379     +            end;
MPRINT(EM_DIAGRAM):   if _dm5 = '40-49' then do;
41380     +         end;
MPRINT(EM_DIAGRAM):   age40_49 = 1;
41381     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41382     +      else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
41383     +         if _dm5 = '40-49'  then do;
MPRINT(EM_DIAGRAM):   end;
41384     +            age40_49 = 1;
41385     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
41386     +         end;
MPRINT(EM_DIAGRAM):   if _dm5 <= '60-69' then do;
41387     +      end;
MPRINT(EM_DIAGRAM):   if _dm5 = '50-59' then do;
41388     +   end;
MPRINT(EM_DIAGRAM):   age50_59 = 1;
41389     +   else do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
41390     +      if _dm5 <= '60-69'  then do;
41391     +         if _dm5 = '50-59'  then do;
MPRINT(EM_DIAGRAM):   else do;
41392     +            age50_59 = 1;
MPRINT(EM_DIAGRAM):   if _dm5 = '60-69' then do;
41393     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   age60_69 = 1;
41394     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41395     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
41396     +            if _dm5 = '60-69'  then do;
MPRINT(EM_DIAGRAM):   end;
41397     +               age60_69 = 1;
41398     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
41399     +            end;
MPRINT(EM_DIAGRAM):   if _dm5 = '70-79' then do;
41400     +         end;
MPRINT(EM_DIAGRAM):   age20_29 = -1;
41401     +      end;
MPRINT(EM_DIAGRAM):   age30_39 = -1;
41402     +      else do;
MPRINT(EM_DIAGRAM):   age40_49 = -1;
MPRINT(EM_DIAGRAM):   age50_59 = -1;
41403     +         if _dm5 = '70-79'  then do;
MPRINT(EM_DIAGRAM):   age60_69 = -1;
41404     +            age20_29 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41405     +            age30_39 = -1;
MPRINT(EM_DIAGRAM):   end;
41406     +            age40_49 = -1;
MPRINT(EM_DIAGRAM):   end;
41407     +            age50_59 = -1;
MPRINT(EM_DIAGRAM):   end;
41408     +            age60_69 = -1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
41409     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   age20_29 = .;
41410     +         end;
MPRINT(EM_DIAGRAM):   age30_39 = .;
41411     +      end;
MPRINT(EM_DIAGRAM):   age40_49 = .;
41412     +   end;
MPRINT(EM_DIAGRAM):   age50_59 = .;
41413     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   age60_69 = .;
41414     +      age20_29 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
41415     +      age30_39 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41416     +      age40_49 = .;
MPRINT(EM_DIAGRAM):   end;
41417     +      age50_59 = .;
MPRINT(EM_DIAGRAM):   end;
41418     +      age60_69 = .;
41419     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for breast_quad ;
41420     +      _DM_BAD = 1;
41421     +   end;
MPRINT(EM_DIAGRAM):   drop breast_quadcentral breast_quadleft_low breast_quadleft_up
breast_quadright_low ;
41422     +end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
41423     +
MPRINT(EM_DIAGRAM):   breast_quadcentral = 0;
41424     +*** Generate dummy variables for breast_quad ;
MPRINT(EM_DIAGRAM):   breast_quadleft_low = 0;
41425     +drop breast_quadcentral breast_quadleft_low breast_quadleft_up
MPRINT(EM_DIAGRAM):   breast_quadleft_up = 0;
41426     +        breast_quadright_low ;
MPRINT(EM_DIAGRAM):   breast_quadright_low = 0;
41427     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   if missing( breast_quad ) then do;
41428     +breast_quadcentral = 0;
MPRINT(EM_DIAGRAM):   breast_quadcentral = .;
41429     +breast_quadleft_low = 0;
MPRINT(EM_DIAGRAM):   breast_quadleft_low = .;
41430     +breast_quadleft_up = 0;
MPRINT(EM_DIAGRAM):   breast_quadleft_up = .;
41431     +breast_quadright_low = 0;
MPRINT(EM_DIAGRAM):   breast_quadright_low = .;
41432     +if missing( breast_quad ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
41433     +   breast_quadcentral = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41434     +   breast_quadleft_low = .;
MPRINT(EM_DIAGRAM):   end;
41435     +   breast_quadleft_up = .;
41436     +   breast_quadright_low = .;
MPRINT(EM_DIAGRAM):   else do;
41437     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm9 $ 9;
41438     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm9 ;
41439     +end;
MPRINT(EM_DIAGRAM):   _dm9 = put( breast_quad , $9. );
41440     +else do;
41441     +   length _dm9 $ 9; drop _dm9 ;
MPRINT(DMNORMIP):   call dmnorm(_dm9,
41442     +   _dm9 = put( breast_quad , $9. );
41443     +   %DMNORMIP( _dm9 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm9 = 'LEFT_UP' then do;
MPRINT(EM_DIAGRAM):   breast_quadleft_up = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'LEFT_LOW' then do;
41444     +   if _dm9 = 'LEFT_UP'  then do;
MPRINT(EM_DIAGRAM):   breast_quadleft_low = 1;
41445     +      breast_quadleft_up = 1;
MPRINT(EM_DIAGRAM):   end;
41446     +   end;
41447     +   else if _dm9 = 'LEFT_LOW'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'RIGHT_UP' then do;
MPRINT(EM_DIAGRAM):   breast_quadcentral = -1;
41448     +      breast_quadleft_low = 1;
MPRINT(EM_DIAGRAM):   breast_quadleft_low = -1;
41449     +   end;
MPRINT(EM_DIAGRAM):   breast_quadleft_up = -1;
41450     +   else if _dm9 = 'RIGHT_UP'  then do;
MPRINT(EM_DIAGRAM):   breast_quadright_low = -1;
MPRINT(EM_DIAGRAM):   end;
41451     +      breast_quadcentral = -1;
41452     +      breast_quadleft_low = -1;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'CENTRAL' then do;
41453     +      breast_quadleft_up = -1;
MPRINT(EM_DIAGRAM):   breast_quadcentral = 1;
41454     +      breast_quadright_low = -1;
MPRINT(EM_DIAGRAM):   end;
41455     +   end;
41456     +   else if _dm9 = 'CENTRAL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'RIGHT_LOW' then do;
MPRINT(EM_DIAGRAM):   breast_quadright_low = 1;
41457     +      breast_quadcentral = 1;
MPRINT(EM_DIAGRAM):   end;
41458     +   end;
41459     +   else if _dm9 = 'RIGHT_LOW'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   breast_quadcentral = .;
41460     +      breast_quadright_low = 1;
MPRINT(EM_DIAGRAM):   breast_quadleft_low = .;
41461     +   end;
MPRINT(EM_DIAGRAM):   breast_quadleft_up = .;
41462     +   else do;
MPRINT(EM_DIAGRAM):   breast_quadright_low = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
41463     +      breast_quadcentral = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41464     +      breast_quadleft_low = .;
MPRINT(EM_DIAGRAM):   end;
41465     +      breast_quadleft_up = .;
MPRINT(EM_DIAGRAM):   end;
41466     +      breast_quadright_low = .;
41467     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for inv_nodes ;
41468     +      _DM_BAD = 1;
41469     +   end;
MPRINT(EM_DIAGRAM):   drop inv_nodes0_2 inv_nodes12_14 inv_nodes15_17 inv_nodes24_26
inv_nodes3_5 inv_nodes6_8 ;
41470     +end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
41471     +
MPRINT(EM_DIAGRAM):   inv_nodes0_2 = 0;
41472     +*** Generate dummy variables for inv_nodes ;
MPRINT(EM_DIAGRAM):   inv_nodes12_14 = 0;
41473     +drop inv_nodes0_2 inv_nodes12_14 inv_nodes15_17 inv_nodes24_26 inv_nodes3_5
MPRINT(EM_DIAGRAM):   inv_nodes15_17 = 0;
41474     +        inv_nodes6_8 ;
MPRINT(EM_DIAGRAM):   inv_nodes24_26 = 0;
41475     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   inv_nodes3_5 = 0;
41476     +inv_nodes0_2 = 0;
MPRINT(EM_DIAGRAM):   inv_nodes6_8 = 0;
41477     +inv_nodes12_14 = 0;
MPRINT(EM_DIAGRAM):   if missing( inv_nodes ) then do;
41478     +inv_nodes15_17 = 0;
MPRINT(EM_DIAGRAM):   inv_nodes0_2 = .;
41479     +inv_nodes24_26 = 0;
MPRINT(EM_DIAGRAM):   inv_nodes12_14 = .;
41480     +inv_nodes3_5 = 0;
MPRINT(EM_DIAGRAM):   inv_nodes15_17 = .;
41481     +inv_nodes6_8 = 0;
MPRINT(EM_DIAGRAM):   inv_nodes24_26 = .;
41482     +if missing( inv_nodes ) then do;
MPRINT(EM_DIAGRAM):   inv_nodes3_5 = .;
41483     +   inv_nodes0_2 = .;
MPRINT(EM_DIAGRAM):   inv_nodes6_8 = .;
41484     +   inv_nodes12_14 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
41485     +   inv_nodes15_17 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41486     +   inv_nodes24_26 = .;
MPRINT(EM_DIAGRAM):   end;
41487     +   inv_nodes3_5 = .;
41488     +   inv_nodes6_8 = .;
MPRINT(EM_DIAGRAM):   else do;
41489     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
41490     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
41491     +end;
MPRINT(EM_DIAGRAM):   _dm5 = put( inv_nodes , $5. );
41492     +else do;
41493     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(DMNORMIP):   call dmnorm(_dm5,
41494     +   _dm5 = put( inv_nodes , $5. );
41495     +   %DMNORMIP( _dm5 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm5 = '0-2' then do;
MPRINT(EM_DIAGRAM):   inv_nodes0_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm5 = '3-5' then do;
41496     +   if _dm5 = '0-2'  then do;
MPRINT(EM_DIAGRAM):   inv_nodes3_5 = 1;
41497     +      inv_nodes0_2 = 1;
MPRINT(EM_DIAGRAM):   end;
41498     +   end;
41499     +   else if _dm5 = '3-5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '6-8' then do;
MPRINT(EM_DIAGRAM):   inv_nodes6_8 = 1;
41500     +      inv_nodes3_5 = 1;
MPRINT(EM_DIAGRAM):   end;
41501     +   end;
41502     +   else if _dm5 = '6-8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '9-11' then do;
MPRINT(EM_DIAGRAM):   inv_nodes0_2 = -1;
41503     +      inv_nodes6_8 = 1;
MPRINT(EM_DIAGRAM):   inv_nodes12_14 = -1;
41504     +   end;
MPRINT(EM_DIAGRAM):   inv_nodes15_17 = -1;
41505     +   else if _dm5 = '9-11'  then do;
MPRINT(EM_DIAGRAM):   inv_nodes24_26 = -1;
MPRINT(EM_DIAGRAM):   inv_nodes3_5 = -1;
41506     +      inv_nodes0_2 = -1;
MPRINT(EM_DIAGRAM):   inv_nodes6_8 = -1;
41507     +      inv_nodes12_14 = -1;
MPRINT(EM_DIAGRAM):   end;
41508     +      inv_nodes15_17 = -1;
41509     +      inv_nodes24_26 = -1;
MPRINT(EM_DIAGRAM):   else if _dm5 = '15-17' then do;
41510     +      inv_nodes3_5 = -1;
MPRINT(EM_DIAGRAM):   inv_nodes15_17 = 1;
41511     +      inv_nodes6_8 = -1;
MPRINT(EM_DIAGRAM):   end;
41512     +   end;
41513     +   else if _dm5 = '15-17'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '12-14' then do;
MPRINT(EM_DIAGRAM):   inv_nodes12_14 = 1;
41514     +      inv_nodes15_17 = 1;
MPRINT(EM_DIAGRAM):   end;
41515     +   end;
41516     +   else if _dm5 = '12-14'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '24-26' then do;
MPRINT(EM_DIAGRAM):   inv_nodes24_26 = 1;
41517     +      inv_nodes12_14 = 1;
MPRINT(EM_DIAGRAM):   end;
41518     +   end;
41519     +   else if _dm5 = '24-26'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   inv_nodes0_2 = .;
41520     +      inv_nodes24_26 = 1;
MPRINT(EM_DIAGRAM):   inv_nodes12_14 = .;
41521     +   end;
MPRINT(EM_DIAGRAM):   inv_nodes15_17 = .;
41522     +   else do;
MPRINT(EM_DIAGRAM):   inv_nodes24_26 = .;
MPRINT(EM_DIAGRAM):   inv_nodes3_5 = .;
41523     +      inv_nodes0_2 = .;
MPRINT(EM_DIAGRAM):   inv_nodes6_8 = .;
41524     +      inv_nodes12_14 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
41525     +      inv_nodes15_17 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41526     +      inv_nodes24_26 = .;
MPRINT(EM_DIAGRAM):   end;
41527     +      inv_nodes3_5 = .;
MPRINT(EM_DIAGRAM):   end;
41528     +      inv_nodes6_8 = .;
41529     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for menopause ;
41530     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop menopausege40 menopauselt40 ;
41531     +   end;
MPRINT(EM_DIAGRAM):   if missing( menopause ) then do;
41532     +end;
MPRINT(EM_DIAGRAM):   menopausege40 = .;
41533     +
MPRINT(EM_DIAGRAM):   menopauselt40 = .;
41534     +*** Generate dummy variables for menopause ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
41535     +drop menopausege40 menopauselt40 ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41536     +if missing( menopause ) then do;
MPRINT(EM_DIAGRAM):   end;
41537     +   menopausege40 = .;
41538     +   menopauselt40 = .;
MPRINT(EM_DIAGRAM):   else do;
41539     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
41540     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
41541     +end;
MPRINT(EM_DIAGRAM):   _dm7 = put( menopause , $7. );
41542     +else do;
41543     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(DMNORMIP):   call dmnorm(_dm7,
41544     +   _dm7 = put( menopause , $7. );
41545     +   %DMNORMIP( _dm7 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm7 = 'PREMENO' then do;
MPRINT(EM_DIAGRAM):   menopausege40 = -1;
MPRINT(EM_DIAGRAM):   menopauselt40 = -1;
MPRINT(EM_DIAGRAM):   end;
41546     +   if _dm7 = 'PREMENO'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'GE40' then do;
41547     +      menopausege40 = -1;
MPRINT(EM_DIAGRAM):   menopausege40 = 1;
41548     +      menopauselt40 = -1;
MPRINT(EM_DIAGRAM):   menopauselt40 = 0;
41549     +   end;
MPRINT(EM_DIAGRAM):   end;
41550     +   else if _dm7 = 'GE40'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'LT40' then do;
41551     +      menopausege40 = 1;
MPRINT(EM_DIAGRAM):   menopausege40 = 0;
41552     +      menopauselt40 = 0;
MPRINT(EM_DIAGRAM):   menopauselt40 = 1;
41553     +   end;
MPRINT(EM_DIAGRAM):   end;
41554     +   else if _dm7 = 'LT40'  then do;
MPRINT(EM_DIAGRAM):   else do;
41555     +      menopausege40 = 0;
MPRINT(EM_DIAGRAM):   menopausege40 = .;
41556     +      menopauselt40 = 1;
MPRINT(EM_DIAGRAM):   menopauselt40 = .;
41557     +   end;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
41558     +   else do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
41559     +      menopausege40 = .;
MPRINT(EM_DIAGRAM):   end;
41560     +      menopauselt40 = .;
41561     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for tumor_size ;
41562     +      _DM_BAD = 1;
41563     +   end;
41564     +end;
MPRINT(EM_DIAGRAM):   drop tumor_size0_4 tumor_size10_14 tumor_size15_19 tumor_size20_24
tumor_size25_29 tumor_size30_34 tumor_size35_39 tumor_size40_44 tumor_size45_49 tumor_size5_9 ;
41565     +
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
41566     +*** Generate dummy variables for tumor_size ;
MPRINT(EM_DIAGRAM):   tumor_size0_4 = 0;
41567     +drop tumor_size0_4 tumor_size10_14 tumor_size15_19 tumor_size20_24
MPRINT(EM_DIAGRAM):   tumor_size10_14 = 0;
41568     +        tumor_size25_29 tumor_size30_34 tumor_size35_39 tumor_size40_44
MPRINT(EM_DIAGRAM):   tumor_size15_19 = 0;
41569     +        tumor_size45_49 tumor_size5_9 ;
MPRINT(EM_DIAGRAM):   tumor_size20_24 = 0;
41570     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   tumor_size25_29 = 0;
41571     +tumor_size0_4 = 0;
MPRINT(EM_DIAGRAM):   tumor_size30_34 = 0;
41572     +tumor_size10_14 = 0;
MPRINT(EM_DIAGRAM):   tumor_size35_39 = 0;
41573     +tumor_size15_19 = 0;
MPRINT(EM_DIAGRAM):   tumor_size40_44 = 0;
41574     +tumor_size20_24 = 0;
MPRINT(EM_DIAGRAM):   tumor_size45_49 = 0;
41575     +tumor_size25_29 = 0;
MPRINT(EM_DIAGRAM):   tumor_size5_9 = 0;
41576     +tumor_size30_34 = 0;
MPRINT(EM_DIAGRAM):   if missing( tumor_size ) then do;
41577     +tumor_size35_39 = 0;
MPRINT(EM_DIAGRAM):   tumor_size0_4 = .;
41578     +tumor_size40_44 = 0;
MPRINT(EM_DIAGRAM):   tumor_size10_14 = .;
41579     +tumor_size45_49 = 0;
MPRINT(EM_DIAGRAM):   tumor_size15_19 = .;
41580     +tumor_size5_9 = 0;
MPRINT(EM_DIAGRAM):   tumor_size20_24 = .;
41581     +if missing( tumor_size ) then do;
MPRINT(EM_DIAGRAM):   tumor_size25_29 = .;
41582     +   tumor_size0_4 = .;
MPRINT(EM_DIAGRAM):   tumor_size30_34 = .;
41583     +   tumor_size10_14 = .;
MPRINT(EM_DIAGRAM):   tumor_size35_39 = .;
41584     +   tumor_size15_19 = .;
MPRINT(EM_DIAGRAM):   tumor_size40_44 = .;
41585     +   tumor_size20_24 = .;
MPRINT(EM_DIAGRAM):   tumor_size45_49 = .;
41586     +   tumor_size25_29 = .;
MPRINT(EM_DIAGRAM):   tumor_size5_9 = .;
41587     +   tumor_size30_34 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
41588     +   tumor_size35_39 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41589     +   tumor_size40_44 = .;
MPRINT(EM_DIAGRAM):   end;
41590     +   tumor_size45_49 = .;
41591     +   tumor_size5_9 = .;
MPRINT(EM_DIAGRAM):   else do;
41592     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
41593     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
41594     +end;
MPRINT(EM_DIAGRAM):   _dm5 = put( tumor_size , $5. );
41595     +else do;
41596     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(DMNORMIP):   call dmnorm(_dm5,
41597     +   _dm5 = put( tumor_size , $5. );
41598     +   %DMNORMIP( _dm5 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm5 <= '30-34' then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '15-19' then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '10-14' then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '0-4' then do;
41599     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   tumor_size0_4 = 1;
41600     +   if _dm5 <= '30-34'  then do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41601     +      if _dm5 <= '15-19'  then do;
MPRINT(EM_DIAGRAM):   end;
41602     +         if _dm5 <= '10-14'  then do;
41603     +            if _dm5 = '0-4'  then do;
MPRINT(EM_DIAGRAM):   else do;
41604     +               tumor_size0_4 = 1;
MPRINT(EM_DIAGRAM):   if _dm5 = '10-14' then do;
41605     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   tumor_size10_14 = 1;
41606     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41607     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
41608     +               if _dm5 = '10-14'  then do;
MPRINT(EM_DIAGRAM):   end;
41609     +                  tumor_size10_14 = 1;
41610     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
41611     +               end;
MPRINT(EM_DIAGRAM):   if _dm5 = '15-19' then do;
41612     +            end;
MPRINT(EM_DIAGRAM):   tumor_size15_19 = 1;
41613     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41614     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
41615     +            if _dm5 = '15-19'  then do;
MPRINT(EM_DIAGRAM):   end;
41616     +               tumor_size15_19 = 1;
41617     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
41618     +            end;
MPRINT(EM_DIAGRAM):   if _dm5 <= '25-29' then do;
41619     +         end;
MPRINT(EM_DIAGRAM):   if _dm5 = '20-24' then do;
41620     +      end;
MPRINT(EM_DIAGRAM):   tumor_size20_24 = 1;
41621     +      else do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
41622     +         if _dm5 <= '25-29'  then do;
41623     +            if _dm5 = '20-24'  then do;
MPRINT(EM_DIAGRAM):   else do;
41624     +               tumor_size20_24 = 1;
MPRINT(EM_DIAGRAM):   if _dm5 = '25-29' then do;
41625     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   tumor_size25_29 = 1;
41626     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41627     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
41628     +               if _dm5 = '25-29'  then do;
MPRINT(EM_DIAGRAM):   end;
41629     +                  tumor_size25_29 = 1;
41630     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
41631     +               end;
MPRINT(EM_DIAGRAM):   if _dm5 = '30-34' then do;
41632     +            end;
MPRINT(EM_DIAGRAM):   tumor_size30_34 = 1;
41633     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41634     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
41635     +            if _dm5 = '30-34'  then do;
MPRINT(EM_DIAGRAM):   end;
41636     +               tumor_size30_34 = 1;
MPRINT(EM_DIAGRAM):   end;
41637     +               _dm_find = 1;
41638     +            end;
MPRINT(EM_DIAGRAM):   else do;
41639     +         end;
MPRINT(EM_DIAGRAM):   if _dm5 <= '45-49' then do;
41640     +      end;
MPRINT(EM_DIAGRAM):   if _dm5 <= '40-44' then do;
41641     +   end;
MPRINT(EM_DIAGRAM):   if _dm5 = '35-39' then do;
41642     +   else do;
MPRINT(EM_DIAGRAM):   tumor_size35_39 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41643     +      if _dm5 <= '45-49'  then do;
MPRINT(EM_DIAGRAM):   end;
41644     +         if _dm5 <= '40-44'  then do;
41645     +            if _dm5 = '35-39'  then do;
MPRINT(EM_DIAGRAM):   else do;
41646     +               tumor_size35_39 = 1;
MPRINT(EM_DIAGRAM):   if _dm5 = '40-44' then do;
41647     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   tumor_size40_44 = 1;
41648     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41649     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
41650     +               if _dm5 = '40-44'  then do;
MPRINT(EM_DIAGRAM):   end;
41651     +                  tumor_size40_44 = 1;
41652     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
41653     +               end;
MPRINT(EM_DIAGRAM):   if _dm5 = '45-49' then do;
41654     +            end;
MPRINT(EM_DIAGRAM):   tumor_size45_49 = 1;
41655     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41656     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
41657     +            if _dm5 = '45-49'  then do;
MPRINT(EM_DIAGRAM):   end;
41658     +               tumor_size45_49 = 1;
41659     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
41660     +            end;
MPRINT(EM_DIAGRAM):   if _dm5 = '5-9' then do;
41661     +         end;
MPRINT(EM_DIAGRAM):   tumor_size5_9 = 1;
41662     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41663     +      else do;
MPRINT(EM_DIAGRAM):   end;
41664     +         if _dm5 = '5-9'  then do;
MPRINT(EM_DIAGRAM):   else do;
41665     +            tumor_size5_9 = 1;
MPRINT(EM_DIAGRAM):   if _dm5 = '50-54' then do;
41666     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   tumor_size0_4 = -1;
41667     +         end;
MPRINT(EM_DIAGRAM):   tumor_size10_14 = -1;
41668     +         else do;
MPRINT(EM_DIAGRAM):   tumor_size15_19 = -1;
MPRINT(EM_DIAGRAM):   tumor_size20_24 = -1;
41669     +            if _dm5 = '50-54'  then do;
MPRINT(EM_DIAGRAM):   tumor_size25_29 = -1;
41670     +               tumor_size0_4 = -1;
MPRINT(EM_DIAGRAM):   tumor_size30_34 = -1;
41671     +               tumor_size10_14 = -1;
MPRINT(EM_DIAGRAM):   tumor_size35_39 = -1;
41672     +               tumor_size15_19 = -1;
MPRINT(EM_DIAGRAM):   tumor_size40_44 = -1;
41673     +               tumor_size20_24 = -1;
MPRINT(EM_DIAGRAM):   tumor_size45_49 = -1;
41674     +               tumor_size25_29 = -1;
MPRINT(EM_DIAGRAM):   tumor_size5_9 = -1;
41675     +               tumor_size30_34 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
41676     +               tumor_size35_39 = -1;
MPRINT(EM_DIAGRAM):   end;
41677     +               tumor_size40_44 = -1;
MPRINT(EM_DIAGRAM):   end;
41678     +               tumor_size45_49 = -1;
MPRINT(EM_DIAGRAM):   end;
41679     +               tumor_size5_9 = -1;
MPRINT(EM_DIAGRAM):   end;
41680     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
41681     +            end;
MPRINT(EM_DIAGRAM):   tumor_size0_4 = .;
41682     +         end;
MPRINT(EM_DIAGRAM):   tumor_size10_14 = .;
41683     +      end;
MPRINT(EM_DIAGRAM):   tumor_size15_19 = .;
41684     +   end;
MPRINT(EM_DIAGRAM):   tumor_size20_24 = .;
41685     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   tumor_size25_29 = .;
41686     +      tumor_size0_4 = .;
MPRINT(EM_DIAGRAM):   tumor_size30_34 = .;
41687     +      tumor_size10_14 = .;
MPRINT(EM_DIAGRAM):   tumor_size35_39 = .;
41688     +      tumor_size15_19 = .;
MPRINT(EM_DIAGRAM):   tumor_size40_44 = .;
41689     +      tumor_size20_24 = .;
MPRINT(EM_DIAGRAM):   tumor_size45_49 = .;
41690     +      tumor_size25_29 = .;
MPRINT(EM_DIAGRAM):   tumor_size5_9 = .;
41691     +      tumor_size30_34 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
41692     +      tumor_size35_39 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41693     +      tumor_size40_44 = .;
MPRINT(EM_DIAGRAM):   end;
41694     +      tumor_size45_49 = .;
MPRINT(EM_DIAGRAM):   end;
41695     +      tumor_size5_9 = .;
41696     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** *************************;
41697     +      _DM_BAD = 1;
41698     +   end;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
41699     +end;
41700     +
41701     +*** *************************;
41702     +*** Checking missing input Interval
41703     +*** *************************;
41704     +
MPRINT(EM_DIAGRAM):   IF NMISS( AvgAge , AvgTumorSize , Avginv_node_group , deg_malig ) THEN
DO;
41705     +IF NMISS(
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
41706     +   AvgAge ,
41707     +   AvgTumorSize ,
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41708     +   Avginv_node_group ,
MPRINT(EM_DIAGRAM):   END;
The SAS System
 
41709     +   deg_malig   ) THEN DO;
MPRINT(EM_DIAGRAM):   *** *************************;
41710     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
41711     +
MPRINT(EM_DIAGRAM):   *** *************************;
41712     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
41713     +END;
MPRINT(EM_DIAGRAM):   S_AvgAge = -5.17542134396122 + 0.10002730056017 * AvgAge ;
41714     +*** *************************;
41715     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   S_AvgTumorSize = -2.52494540353916 + 0.09506760766352 * AvgTumorSize ;
41716     +*** *************************;
41717     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_Avginv_node_group = -0.69351787747727 + 0.31173971918285 *
Avginv_node_group ;
41718     +   S_AvgAge  =    -5.17542134396122 +     0.10002730056017 * AvgAge ;
MPRINT(EM_DIAGRAM):   S_deg_malig = -2.75629070254781 + 1.34265662978187 * deg_malig ;
41719     +   S_AvgTumorSize  =    -2.52494540353916 +     0.09506760766352 *
MPRINT(EM_DIAGRAM):   END;
41720     +        AvgTumorSize ;
41721     +   S_Avginv_node_group  =    -0.69351787747727 +     0.31173971918285 *
MPRINT(EM_DIAGRAM):   ELSE DO;
41722     +        Avginv_node_group ;
MPRINT(EM_DIAGRAM):   IF MISSING( AvgAge ) THEN S_AvgAge = . ;
41723     +   S_deg_malig  =    -2.75629070254781 +     1.34265662978187 * deg_malig ;
41724     +END;
MPRINT(EM_DIAGRAM):   ELSE S_AvgAge = -5.17542134396122 + 0.10002730056017 * AvgAge ;
41725     +ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( AvgTumorSize ) THEN S_AvgTumorSize = . ;
41726     +   IF MISSING( AvgAge ) THEN S_AvgAge  = . ;
41727     +   ELSE S_AvgAge  =    -5.17542134396122 +     0.10002730056017 * AvgAge ;
MPRINT(EM_DIAGRAM):   ELSE S_AvgTumorSize = -2.52494540353916 + 0.09506760766352 *
AvgTumorSize ;
MPRINT(EM_DIAGRAM):   IF MISSING( Avginv_node_group ) THEN S_Avginv_node_group = . ;
41728     +   IF MISSING( AvgTumorSize ) THEN S_AvgTumorSize  = . ;
41729     +   ELSE S_AvgTumorSize  =    -2.52494540353916 +     0.09506760766352 *
MPRINT(EM_DIAGRAM):   ELSE S_Avginv_node_group = -0.69351787747727 + 0.31173971918285 *
Avginv_node_group ;
41730     +        AvgTumorSize ;
MPRINT(EM_DIAGRAM):   IF MISSING( deg_malig ) THEN S_deg_malig = . ;
41731     +   IF MISSING( Avginv_node_group ) THEN S_Avginv_node_group  = . ;
41732     +   ELSE S_Avginv_node_group  =    -0.69351787747727 +     0.31173971918285 *
MPRINT(EM_DIAGRAM):   ELSE S_deg_malig = -2.75629070254781 + 1.34265662978187 * deg_malig ;
41733     +        Avginv_node_group ;
MPRINT(EM_DIAGRAM):   END;
41734     +   IF MISSING( deg_malig ) THEN S_deg_malig  = . ;
MPRINT(EM_DIAGRAM):   *** *************************;
41735     +   ELSE S_deg_malig  =    -2.75629070254781 +     1.34265662978187 * deg_malig
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** *************************;
41736     +         ;
MPRINT(EM_DIAGRAM):   *** *************************;
41737     +END;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
41738     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
41739     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** *************************;
41740     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
41741     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
41742     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
41743     +*** *************************;
41744     +*** *************************;
41745     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   H11 = -0.61497493528093 * S_AvgAge + 0.95387181547091 * S_AvgTumorSize +
-0.07696387186429 * S_Avginv_node_group + -0.37968136001267 * S_deg_malig ;
41746     +*** *************************;
41747     +IF _DM_BAD EQ 0 THEN DO;
41748     +   H11  =    -0.61497493528093 * S_AvgAge  +     0.95387181547091 *
MPRINT(EM_DIAGRAM):   H12 = -0.10284288284194 * S_AvgAge + 0.37352136247344 * S_AvgTumorSize +
0.68676513170483 * S_Avginv_node_group + 0.47005499648247 * S_deg_malig ;
41749     +        S_AvgTumorSize  +    -0.07696387186429 * S_Avginv_node_group
41750     +          +    -0.37968136001267 * S_deg_malig ;
41751     +   H12  =    -0.10284288284194 * S_AvgAge  +     0.37352136247344 *
MPRINT(EM_DIAGRAM):   H13 = 0.9145919034759 * S_AvgAge + 0.05826862125007 * S_AvgTumorSize +
-0.00110862274069 * S_Avginv_node_group + 1.75176090163572 * S_deg_malig ;
41752     +        S_AvgTumorSize  +     0.68676513170483 * S_Avginv_node_group
41753     +          +     0.47005499648247 * S_deg_malig ;
41754     +   H13  =      0.9145919034759 * S_AvgAge  +     0.05826862125007 *
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.36327134003845 * IMP_node_capsno + -0.61958170054396 *
breastleft + -0.76320688913225 * irradiatno ;
41755     +        S_AvgTumorSize  +    -0.00110862274069 * S_Avginv_node_group
41756     +          +     1.75176090163572 * S_deg_malig ;
41757     +   H11  = H11  +     0.36327134003845 * IMP_node_capsno
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.79264758501102 * IMP_node_capsno + 0.38736672542142 *
breastleft + -0.41943897063306 * irradiatno ;
41758     +          +    -0.61958170054396 * breastleft  +    -0.76320688913225 *
41759     +        irradiatno ;
41760     +   H12  = H12  +     0.79264758501102 * IMP_node_capsno
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.57775127561597 * IMP_node_capsno + 0.72019942479724 *
breastleft + -0.27388143245069 * irradiatno ;
41761     +          +     0.38736672542142 * breastleft  +    -0.41943897063306 *
41762     +        irradiatno ;
41763     +   H13  = H13  +    -0.57775127561597 * IMP_node_capsno
41764     +          +     0.72019942479724 * breastleft  +    -0.27388143245069 *
41765     +        irradiatno ;
41766     +   H11  = H11  +     0.03389920437167 * age20_29  +     0.72089986894102 *
41767     +        age30_39  +     0.28798904753624 * age40_49  +     0.44335242159532 *
41768     +        age50_59  +     0.52451229055658 * age60_69  +     0.26756102661582 *
41769     +        breast_quadcentral  +    -0.27707826700111 * breast_quadleft_low
41770     +          +    -0.50619587378469 * breast_quadleft_up
41771     +          +     0.32385655977639 * breast_quadright_low
41772     +          +    -0.34095159639954 * inv_nodes0_2  +      0.4491951931604 *
41773     +        inv_nodes12_14  +    -0.18585971024084 * inv_nodes15_17
41774     +          +     0.46197576963823 * inv_nodes24_26  +     1.13872977786161 *
41775     +        inv_nodes3_5  +    -0.24695704463614 * inv_nodes6_8
41776     +          +     -1.6254898573616 * menopausege40  +    -0.92858614182967 *
41777     +        menopauselt40  +    -0.38889900414931 * tumor_size0_4
41778     +          +    -1.07107947032064 * tumor_size10_14  +     0.03210466953987 *
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.03389920437167 * age20_29 + 0.72089986894102 * age30_39 +
0.28798904753624 * age40_49 + 0.44335242159532 * age50_59 + 0.52451229055658 * age60_69 +
0.26756102661582 * breast_quadcentral + -0.27707826700111 * breast_quadleft_low +
-0.50619587378469 * breast_quadleft_up + 0.32385655977639 * breast_quadright_low +
-0.34095159639954 * inv_nodes0_2 + 0.4491951931604 * inv_nodes12_14 + -0.18585971024084 *
inv_nodes15_17 + 0.46197576963823 * inv_nodes24_26 + 1.13872977786161 * inv_nodes3_5 +
-0.24695704463614 * inv_nodes6_8 + -1.6254898573616 * menopausege40 + -0.92858614182967 *
menopauselt40 + -0.38889900414931 * tumor_size0_4 + -1.07107947032064 * tumor_size10_14 +
0.03210466953987 * tumor_size15_19 + 2.09618876020959 * tumor_size20_24 + -0.2438896271209 *
tumor_size25_29 + -0.22402647329776 * tumor_size30_34 + 0.34369986972179 * tumor_size35_39 +
0.10609442400314 * tumor_size40_44 + -0.33854013913445 * tumor_size45_49 + -0.02593198988185 *
tumor_size5_9 ;
41779     +        tumor_size15_19  +     2.09618876020959 * tumor_size20_24
41780     +          +     -0.2438896271209 * tumor_size25_29  +    -0.22402647329776 *
41781     +        tumor_size30_34  +     0.34369986972179 * tumor_size35_39
41782     +          +     0.10609442400314 * tumor_size40_44  +    -0.33854013913445 *
41783     +        tumor_size45_49  +    -0.02593198988185 * tumor_size5_9 ;
41784     +   H12  = H12  +     0.01685296927978 * age20_29  +     0.35307919317833 *
41785     +        age30_39  +    -0.69893461072245 * age40_49  +    -0.24523441741186 *
41786     +        age50_59  +     0.07558333902437 * age60_69  +     0.37289958336996 *
41787     +        breast_quadcentral  +     0.36773572083573 * breast_quadleft_low
41788     +          +     1.18722346758725 * breast_quadleft_up
41789     +          +     0.06349587968543 * breast_quadright_low
41790     +          +      -0.059174362514 * inv_nodes0_2  +     0.15010019016924 *
41791     +        inv_nodes12_14  +     0.21292950214496 * inv_nodes15_17
41792     +          +    -0.38120373140886 * inv_nodes24_26  +    -0.78617065785688 *
41793     +        inv_nodes3_5  +    -0.53988580512066 * inv_nodes6_8
41794     +          +     0.37876358329232 * menopausege40  +     0.98534893153269 *
41795     +        menopauselt40  +     0.26937806074223 * tumor_size0_4
41796     +          +    -0.42069656657828 * tumor_size10_14  +    -0.06792429022016 *
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.01685296927978 * age20_29 + 0.35307919317833 * age30_39 +
-0.69893461072245 * age40_49 + -0.24523441741186 * age50_59 + 0.07558333902437 * age60_69 +
0.37289958336996 * breast_quadcentral + 0.36773572083573 * breast_quadleft_low +
1.18722346758725 * breast_quadleft_up + 0.06349587968543 * breast_quadright_low +
-0.059174362514 * inv_nodes0_2 + 0.15010019016924 * inv_nodes12_14 + 0.21292950214496 *
inv_nodes15_17 + -0.38120373140886 * inv_nodes24_26 + -0.78617065785688 * inv_nodes3_5 +
-0.53988580512066 * inv_nodes6_8 + 0.37876358329232 * menopausege40 + 0.98534893153269 *
menopauselt40 + 0.26937806074223 * tumor_size0_4 + -0.42069656657828 * tumor_size10_14 +
-0.06792429022016 * tumor_size15_19 + 0.58136904760064 * tumor_size20_24 + -0.08769804820483 *
tumor_size25_29 + 0.03374092030048 * tumor_size30_34 + 0.1829108052925 * tumor_size35_39 +
0.01690568296329 * tumor_size40_44 + 0.13224531669088 * tumor_size45_49 + -0.22204959796125 *
tumor_size5_9 ;
41797     +        tumor_size15_19  +     0.58136904760064 * tumor_size20_24
41798     +          +    -0.08769804820483 * tumor_size25_29  +     0.03374092030048 *
41799     +        tumor_size30_34  +      0.1829108052925 * tumor_size35_39
41800     +          +     0.01690568296329 * tumor_size40_44  +     0.13224531669088 *
41801     +        tumor_size45_49  +    -0.22204959796125 * tumor_size5_9 ;
41802     +   H13  = H13  +     0.18753630570782 * age20_29  +    -0.03350421785345 *
41803     +        age30_39  +     0.14623047416945 * age40_49  +    -0.41701616903549 *
41804     +        age50_59  +     0.89967320394619 * age60_69  +    -0.20761226509696 *
41805     +        breast_quadcentral  +    -1.04013447085256 * breast_quadleft_low
41806     +          +     -1.7692938970504 * breast_quadleft_up
41807     +          +     0.20743849640219 * breast_quadright_low
41808     +          +    -0.29974021420975 * inv_nodes0_2  +     0.85993563103741 *
41809     +        inv_nodes12_14  +     0.50250813126704 * inv_nodes15_17
41810     +          +     0.35668817181134 * inv_nodes24_26  +     1.00306353211516 *
41811     +        inv_nodes3_5  +      0.3582805661238 * inv_nodes6_8
41812     +          +     0.31231492228923 * menopausege40  +     0.61342571580869 *
41813     +        menopauselt40  +     0.20376513631778 * tumor_size0_4
41814     +          +      -0.185934474148 * tumor_size10_14  +    -0.10040191113771 *
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.18753630570782 * age20_29 + -0.03350421785345 * age30_39 +
0.14623047416945 * age40_49 + -0.41701616903549 * age50_59 + 0.89967320394619 * age60_69 +
-0.20761226509696 * breast_quadcentral + -1.04013447085256 * breast_quadleft_low +
-1.7692938970504 * breast_quadleft_up + 0.20743849640219 * breast_quadright_low +
-0.29974021420975 * inv_nodes0_2 + 0.85993563103741 * inv_nodes12_14 + 0.50250813126704 *
inv_nodes15_17 + 0.35668817181134 * inv_nodes24_26 + 1.00306353211516 * inv_nodes3_5 +
0.3582805661238 * inv_nodes6_8 + 0.31231492228923 * menopausege40 + 0.61342571580869 *
menopauselt40 + 0.20376513631778 * tumor_size0_4 + -0.185934474148 * tumor_size10_14 +
-0.10040191113771 * tumor_size15_19 + 0.1860239709766 * tumor_size20_24 + 0.72634109614906 *
tumor_size25_29 + 0.08646236423332 * tumor_size30_34 + 0.36660157691503 * tumor_size35_39 +
-0.82183765104013 * tumor_size40_44 + 0.38021345065478 * tumor_size45_49 + -0.06805996233089 *
tumor_size5_9 ;
41815     +        tumor_size15_19  +      0.1860239709766 * tumor_size20_24
MPRINT(EM_DIAGRAM):   H11 = 1.87635201395074 + H11 ;
41816     +          +     0.72634109614906 * tumor_size25_29  +     0.08646236423332 *
MPRINT(EM_DIAGRAM):   H12 = 0.04770355881681 + H12 ;
41817     +        tumor_size30_34  +     0.36660157691503 * tumor_size35_39
MPRINT(EM_DIAGRAM):   H13 = -1.760700478131 + H13 ;
41818     +          +    -0.82183765104013 * tumor_size40_44  +     0.38021345065478 *
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
41819     +        tumor_size45_49  +    -0.06805996233089 * tumor_size5_9 ;
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
41820     +   H11  =     1.87635201395074 + H11 ;
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
41821     +   H12  =     0.04770355881681 + H12 ;
MPRINT(EM_DIAGRAM):   END;
41822     +   H13  =      -1.760700478131 + H13 ;
41823     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   ELSE DO;
41824     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H11 = .;
41825     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H12 = .;
41826     +END;
MPRINT(EM_DIAGRAM):   H13 = .;
41827     +ELSE DO;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
41828     +   H11  = .;
MPRINT(EM_DIAGRAM):   *** Writing the Node class ;
41829     +   H12  = .;
MPRINT(EM_DIAGRAM):   *** *************************;
41830     +   H13  = .;
41831     +END;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for class ;
41832     +*** *************************;
MPRINT(EM_DIAGRAM):   drop classrecurrence_events classno_recurrence_events ;
41833     +*** Writing the Node class ;
MPRINT(EM_DIAGRAM):   label F_class = 'From: class' ;
41834     +*** *************************;
41835     +
MPRINT(EM_DIAGRAM):   length F_class $ 20;
41836     +*** Generate dummy variables for class ;
41837     +drop classrecurrence_events classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   F_class = put( class , $20. );
41838     +label F_class = 'From: class' ;
41839     +length F_class $ 20;
MPRINT(DMNORMIP):   call dmnorm(F_class,
41840     +F_class = put( class , $20. );
41841     +%DMNORMIP( F_class )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( class ) then do;
MPRINT(EM_DIAGRAM):   classrecurrence_events = .;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = .;
MPRINT(EM_DIAGRAM):   end;
41842     +if missing( class ) then do;
MPRINT(EM_DIAGRAM):   else do;
41843     +   classrecurrence_events = .;
MPRINT(EM_DIAGRAM):   if F_class = 'NO-RECURRENCE-EVENTS' then do;
41844     +   classno_recurrence_events = .;
MPRINT(EM_DIAGRAM):   classrecurrence_events = 0;
41845     +end;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = 1;
41846     +else do;
MPRINT(EM_DIAGRAM):   end;
41847     +   if F_class = 'NO-RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   else if F_class = 'RECURRENCE-EVENTS' then do;
41848     +      classrecurrence_events = 0;
MPRINT(EM_DIAGRAM):   classrecurrence_events = 1;
41849     +      classno_recurrence_events = 1;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = 0;
41850     +   end;
MPRINT(EM_DIAGRAM):   end;
41851     +   else if F_class = 'RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   else do;
41852     +      classrecurrence_events = 1;
MPRINT(EM_DIAGRAM):   classrecurrence_events = .;
41853     +      classno_recurrence_events = 0;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = .;
41854     +   end;
MPRINT(EM_DIAGRAM):   end;
41855     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
41856     +      classrecurrence_events = .;
41857     +      classno_recurrence_events = .;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 2.49224982498149 * H11 + 1.14059984464365 *
H12 + 2.20917444320522 * H13 ;
41858     +   end;
41859     +end;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = -1.04524170486537 + P_classrecurrence_events ;
41860     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0;
41861     +   P_classrecurrence_events  =     2.49224982498149 * H11
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_classrecurrence_events , P_classno_recurrence_events );
41862     +          +     1.14059984464365 * H12  +     2.20917444320522 * H13 ;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
41863     +   P_classrecurrence_events  =    -1.04524170486537 + P_classrecurrence_events
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = EXP(P_classrecurrence_events - _MAX_);
41864     +         ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_classrecurrence_events ;
41865     +   P_classno_recurrence_events  = 0;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = EXP(P_classno_recurrence_events - _MAX_);
41866     +   _MAX_ = MAX (P_classrecurrence_events , P_classno_recurrence_events );
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_classno_recurrence_events ;
41867     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = P_classrecurrence_events / _SUM_;
41868     +   P_classrecurrence_events  = EXP(P_classrecurrence_events  - _MAX_);
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = P_classno_recurrence_events / _SUM_;
41869     +   _SUM_ = _SUM_ + P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   END;
41870     +   P_classno_recurrence_events  = EXP(P_classno_recurrence_events  - _MAX_);
41871     +   _SUM_ = _SUM_ + P_classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   ELSE DO;
41872     +   P_classrecurrence_events  = P_classrecurrence_events  / _SUM_;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = .;
41873     +   P_classno_recurrence_events  = P_classno_recurrence_events  / _SUM_;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = .;
41874     +END;
MPRINT(EM_DIAGRAM):   END;
41875     +ELSE DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 0.29203539823008;
41876     +   P_classrecurrence_events  = .;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0.70796460176991;
41877     +   P_classno_recurrence_events  = .;
MPRINT(EM_DIAGRAM):   END;
41878     +END;
MPRINT(EM_DIAGRAM):   *** *****************************;
41879     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node class ;
41880     +   P_classrecurrence_events  =     0.29203539823008;
MPRINT(EM_DIAGRAM):   *** ******************************;
41881     +   P_classno_recurrence_events  =     0.70796460176991;
MPRINT(EM_DIAGRAM):   IF MISSING( classrecurrence_events ) THEN R_classrecurrence_events = . ;
41882     +END;
41883     +*** *****************************;
41884     +*** Writing the Residuals  of the Node class ;
MPRINT(EM_DIAGRAM):   ELSE R_classrecurrence_events = classrecurrence_events -
P_classrecurrence_events ;
41885     +*** ******************************;
41886     +IF MISSING( classrecurrence_events ) THEN R_classrecurrence_events  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( classno_recurrence_events ) THEN R_classno_recurrence_events
= . ;
41887     +ELSE R_classrecurrence_events  = classrecurrence_events  -
41888     +        P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   ELSE R_classno_recurrence_events = classno_recurrence_events -
P_classno_recurrence_events ;
41889     +IF MISSING( classno_recurrence_events ) THEN R_classno_recurrence_events
41890     +          = . ;
41891     +ELSE R_classno_recurrence_events  = classno_recurrence_events  -
MPRINT(EM_DIAGRAM):   *** Decision Processing;
MPRINT(EM_DIAGRAM):   label D_CLASS = 'Decision: class' ;
41892     +        P_classno_recurrence_events ;
41893     +
MPRINT(EM_DIAGRAM):   label EP_CLASS = 'Expected Profit: class' ;
41894     +
41895     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   label BP_CLASS = 'Best Profit: class' ;
41896     +label D_CLASS = 'Decision: class' ;
MPRINT(EM_DIAGRAM):   label CP_CLASS = 'Computed Profit: class' ;
41897     +label EP_CLASS = 'Expected Profit: class' ;
41898     +label BP_CLASS = 'Best Profit: class' ;
MPRINT(EM_DIAGRAM):   length D_CLASS $ 20;
41899     +label CP_CLASS = 'Computed Profit: class' ;
MPRINT(EM_DIAGRAM):   D_CLASS = ' ';
41900     +
MPRINT(EM_DIAGRAM):   EP_CLASS = .;
41901     +length D_CLASS $ 20;
MPRINT(EM_DIAGRAM):   BP_CLASS = .;
MPRINT(EM_DIAGRAM):   CP_CLASS = .;
41902     +
41903     +D_CLASS = ' ';
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
41904     +EP_CLASS = .;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
41905     +BP_CLASS = .;
41906     +CP_CLASS = .;
MPRINT(EM_DIAGRAM):   D_CLASS = 'RECURRENCE-EVENTS' ;
41907     +
MPRINT(EM_DIAGRAM):   EP_CLASS = P_classrecurrence_events * 1 + P_classno_recurrence_events *
0;
41908     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   drop _sum;
41909     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _sum = P_classrecurrence_events * 0 + P_classno_recurrence_events * 1;
41910     +
MPRINT(EM_DIAGRAM):   if _sum > EP_CLASS + 4.547474E-13 then do;
41911     +D_CLASS = 'RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   EP_CLASS = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
41912     +EP_CLASS = P_classrecurrence_events * 1 + P_classno_recurrence_events * 0;
MPRINT(EM_DIAGRAM):   D_CLASS = 'NO-RECURRENCE-EVENTS' ;
41913     +drop _sum;
MPRINT(EM_DIAGRAM):   end;
41914     +_sum = P_classrecurrence_events * 0 + P_classno_recurrence_events * 1;
41915     +if _sum > EP_CLASS + 4.547474E-13 then do;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
41916     +   EP_CLASS = _sum; _decnum = 2;
41917     +   D_CLASS = 'NO-RECURRENCE-EVENTS' ;
41918     +end;
41919     +
MPRINT(EM_DIAGRAM):   array NEURALdema [2,2] _temporary_ ( 1 0 0 1 );
41920     +*** Decision Matrix;
41921     +array NEURALdema [2,2] _temporary_ (
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
41922     +/* row 1 */  1 0
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_class );
41923     +/* row 2 */  0 1
MPRINT(EM_DIAGRAM):   when('RECURRENCE-EVENTS' ) _tarnum = 1;
41924     +);
MPRINT(EM_DIAGRAM):   when('NO-RECURRENCE-EVENTS' ) _tarnum = 2;
41925     +
41926     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
41927     +drop _tarnum; select( F_class );
MPRINT(EM_DIAGRAM):   end;
41928     +   when('RECURRENCE-EVENTS' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto NEURALdeex;
41929     +   when('NO-RECURRENCE-EVENTS' ) _tarnum = 2;
41930     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   CP_CLASS = NEURALdema [_tarnum,_decnum];
41931     +end;
41932     +if _tarnum <= 0 then goto NEURALdeex;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
41933     +
MPRINT(EM_DIAGRAM):   array NEURALdebe [2] _temporary_ ( 1 1);
41934     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   BP_CLASS = NEURALdebe [_tarnum];
41935     +CP_CLASS = NEURALdema [_tarnum,_decnum];
41936     +
41937     +*** Best Possible Consequence of Any Decision without Cost;
41938     +array NEURALdebe [2] _temporary_ ( 1 1);
MPRINT(EM_DIAGRAM):   NEURALdeex:;
41939     +BP_CLASS = NEURALdebe [_tarnum];
41940     +
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
41941     +
MPRINT(EM_DIAGRAM):   *** *************************;
41942     +NEURALdeex:;
MPRINT(EM_DIAGRAM):   *** Writing the I_class AND U_class ;
MPRINT(EM_DIAGRAM):   *** *************************;
41943     +
MPRINT(EM_DIAGRAM):   _MAXP_ = P_classrecurrence_events ;
41944     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   I_class = "RECURRENCE-EVENTS   " ;
41945     +*** *************************;
MPRINT(EM_DIAGRAM):   U_class = "recurrence-events   " ;
41946     +*** Writing the I_class  AND U_class ;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_classno_recurrence_events ) THEN DO;
41947     +*** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_classno_recurrence_events ;
41948     +_MAXP_ = P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   I_class = "NO-RECURRENCE-EVENTS" ;
41949     +I_class  = "RECURRENCE-EVENTS   " ;
MPRINT(EM_DIAGRAM):   U_class = "no-recurrence-events" ;
41950     +U_class  = "recurrence-events   " ;
MPRINT(EM_DIAGRAM):   END;
41951     +IF( _MAXP_ LT P_classno_recurrence_events  ) THEN DO;
MPRINT(EM_DIAGRAM):   ********************************;
41952     +   _MAXP_ = P_classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
41953     +   I_class  = "NO-RECURRENCE-EVENTS" ;
MPRINT(EM_DIAGRAM):   ********************************;
41954     +   U_class  = "no-recurrence-events" ;
41955     +END;
41956     +********************************;
41957     +*** End Scoring Code for Neural;
41958     +********************************;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
41959     +drop
MPRINT(EM_DIAGRAM):   drop S_:;
41960     +H11
41961     +H12
41962     +H13
41963     +;
41964     +drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
41965      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
41966      quit;
41967      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
41968      filename emflow "D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41969      *------------------------------------------------------------*;
41970      * Neural: Scoring VALIDATE data;
41971      *------------------------------------------------------------*;
41972      data EMWS1.Neural_VALIDATE
41973      / view=EMWS1.Neural_VALIDATE
41974      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_VALIDATE / view=EMWS1.Neural_VALIDATE ;
41975      set EMWS1.Impt_VALIDATE
41976      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_VALIDATE ;
41977      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
41978     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
41979     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
41980     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
41981     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
41982     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
41983     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
41984     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
41985     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
41986     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
41987     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
41988     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
41989     +LENGTH _WARN_ $4
41990     +      F_class  $ 20
41991     +      I_class  $ 20
41992     +      U_class  $ 20
41993     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_class $ 20 I_class $ 20 U_class $ 20 ;
41994     +      label S_AvgAge = 'Standard: AvgAge' ;
MPRINT(EM_DIAGRAM):   label S_AvgAge = 'Standard: AvgAge' ;
41995     +
41996     +      label S_AvgTumorSize = 'Standard: AvgTumorSize' ;
MPRINT(EM_DIAGRAM):   label S_AvgTumorSize = 'Standard: AvgTumorSize' ;
41997     +
41998     +      label S_Avginv_node_group = 'Standard: Avginv_node_group' ;
MPRINT(EM_DIAGRAM):   label S_Avginv_node_group = 'Standard: Avginv_node_group' ;
41999     +
42000     +      label S_deg_malig = 'Standard: deg_malig' ;
MPRINT(EM_DIAGRAM):   label S_deg_malig = 'Standard: deg_malig' ;
42001     +
42002     +      label IMP_node_capsno = 'Dummy: IMP_node_caps=no' ;
MPRINT(EM_DIAGRAM):   label IMP_node_capsno = 'Dummy: IMP_node_caps=no' ;
42003     +
42004     +      label breastleft = 'Dummy: breast=left' ;
MPRINT(EM_DIAGRAM):   label breastleft = 'Dummy: breast=left' ;
42005     +
42006     +      label irradiatno = 'Dummy: irradiat=no' ;
MPRINT(EM_DIAGRAM):   label irradiatno = 'Dummy: irradiat=no' ;
42007     +
42008     +      label age20_29 = 'Dummy: age=20-29' ;
MPRINT(EM_DIAGRAM):   label age20_29 = 'Dummy: age=20-29' ;
42009     +
42010     +      label age30_39 = 'Dummy: age=30-39' ;
MPRINT(EM_DIAGRAM):   label age30_39 = 'Dummy: age=30-39' ;
42011     +
42012     +      label age40_49 = 'Dummy: age=40-49' ;
MPRINT(EM_DIAGRAM):   label age40_49 = 'Dummy: age=40-49' ;
42013     +
42014     +      label age50_59 = 'Dummy: age=50-59' ;
MPRINT(EM_DIAGRAM):   label age50_59 = 'Dummy: age=50-59' ;
42015     +
42016     +      label age60_69 = 'Dummy: age=60-69' ;
MPRINT(EM_DIAGRAM):   label age60_69 = 'Dummy: age=60-69' ;
42017     +
42018     +      label breast_quadcentral = 'Dummy: breast_quad=central' ;
MPRINT(EM_DIAGRAM):   label breast_quadcentral = 'Dummy: breast_quad=central' ;
42019     +
42020     +      label breast_quadleft_low = 'Dummy: breast_quad=left_low' ;
MPRINT(EM_DIAGRAM):   label breast_quadleft_low = 'Dummy: breast_quad=left_low' ;
42021     +
42022     +      label breast_quadleft_up = 'Dummy: breast_quad=left_up' ;
MPRINT(EM_DIAGRAM):   label breast_quadleft_up = 'Dummy: breast_quad=left_up' ;
42023     +
42024     +      label breast_quadright_low = 'Dummy: breast_quad=right_low' ;
MPRINT(EM_DIAGRAM):   label breast_quadright_low = 'Dummy: breast_quad=right_low' ;
42025     +
42026     +      label inv_nodes0_2 = 'Dummy: inv_nodes=0-2' ;
MPRINT(EM_DIAGRAM):   label inv_nodes0_2 = 'Dummy: inv_nodes=0-2' ;
42027     +
42028     +      label inv_nodes12_14 = 'Dummy: inv_nodes=12-14' ;
MPRINT(EM_DIAGRAM):   label inv_nodes12_14 = 'Dummy: inv_nodes=12-14' ;
42029     +
42030     +      label inv_nodes15_17 = 'Dummy: inv_nodes=15-17' ;
MPRINT(EM_DIAGRAM):   label inv_nodes15_17 = 'Dummy: inv_nodes=15-17' ;
42031     +
42032     +      label inv_nodes24_26 = 'Dummy: inv_nodes=24-26' ;
MPRINT(EM_DIAGRAM):   label inv_nodes24_26 = 'Dummy: inv_nodes=24-26' ;
42033     +
42034     +      label inv_nodes3_5 = 'Dummy: inv_nodes=3-5' ;
MPRINT(EM_DIAGRAM):   label inv_nodes3_5 = 'Dummy: inv_nodes=3-5' ;
42035     +
42036     +      label inv_nodes6_8 = 'Dummy: inv_nodes=6-8' ;
MPRINT(EM_DIAGRAM):   label inv_nodes6_8 = 'Dummy: inv_nodes=6-8' ;
42037     +
42038     +      label menopausege40 = 'Dummy: menopause=ge40' ;
MPRINT(EM_DIAGRAM):   label menopausege40 = 'Dummy: menopause=ge40' ;
42039     +
42040     +      label menopauselt40 = 'Dummy: menopause=lt40' ;
MPRINT(EM_DIAGRAM):   label menopauselt40 = 'Dummy: menopause=lt40' ;
42041     +
42042     +      label tumor_size0_4 = 'Dummy: tumor_size=0-4' ;
MPRINT(EM_DIAGRAM):   label tumor_size0_4 = 'Dummy: tumor_size=0-4' ;
42043     +
42044     +      label tumor_size10_14 = 'Dummy: tumor_size=10-14' ;
MPRINT(EM_DIAGRAM):   label tumor_size10_14 = 'Dummy: tumor_size=10-14' ;
42045     +
42046     +      label tumor_size15_19 = 'Dummy: tumor_size=15-19' ;
MPRINT(EM_DIAGRAM):   label tumor_size15_19 = 'Dummy: tumor_size=15-19' ;
42047     +
42048     +      label tumor_size20_24 = 'Dummy: tumor_size=20-24' ;
MPRINT(EM_DIAGRAM):   label tumor_size20_24 = 'Dummy: tumor_size=20-24' ;
42049     +
42050     +      label tumor_size25_29 = 'Dummy: tumor_size=25-29' ;
MPRINT(EM_DIAGRAM):   label tumor_size25_29 = 'Dummy: tumor_size=25-29' ;
42051     +
42052     +      label tumor_size30_34 = 'Dummy: tumor_size=30-34' ;
MPRINT(EM_DIAGRAM):   label tumor_size30_34 = 'Dummy: tumor_size=30-34' ;
42053     +
42054     +      label tumor_size35_39 = 'Dummy: tumor_size=35-39' ;
MPRINT(EM_DIAGRAM):   label tumor_size35_39 = 'Dummy: tumor_size=35-39' ;
42055     +
42056     +      label tumor_size40_44 = 'Dummy: tumor_size=40-44' ;
MPRINT(EM_DIAGRAM):   label tumor_size40_44 = 'Dummy: tumor_size=40-44' ;
42057     +
42058     +      label tumor_size45_49 = 'Dummy: tumor_size=45-49' ;
MPRINT(EM_DIAGRAM):   label tumor_size45_49 = 'Dummy: tumor_size=45-49' ;
42059     +
42060     +      label tumor_size5_9 = 'Dummy: tumor_size=5-9' ;
MPRINT(EM_DIAGRAM):   label tumor_size5_9 = 'Dummy: tumor_size=5-9' ;
42061     +
42062     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
42063     +
42064     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
42065     +
42066     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
42067     +
42068     +      label I_class = 'Into: class' ;
MPRINT(EM_DIAGRAM):   label I_class = 'Into: class' ;
42069     +
42070     +      label F_class = 'From: class' ;
MPRINT(EM_DIAGRAM):   label F_class = 'From: class' ;
42071     +
42072     +      label U_class = 'Unnormalized Into: class' ;
MPRINT(EM_DIAGRAM):   label U_class = 'Unnormalized Into: class' ;
42073     +
42074     +      label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
42075     +
42076     +      label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
42077     +
42078     +      label P_classno_recurrence_events =
42079     +'Predicted: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classno_recurrence_events = 'Predicted:
class=no-recurrence-events' ;
42080     +
42081     +      label R_classno_recurrence_events =
42082     +'Residual: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classno_recurrence_events = 'Residual:
class=no-recurrence-events' ;
42083     +
42084     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
42085     +
42086     +*** Generate dummy variables for IMP_node_caps ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_node_caps ;
42087     +drop IMP_node_capsno ;
MPRINT(EM_DIAGRAM):   drop IMP_node_capsno ;
42088     +if missing( IMP_node_caps ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_node_caps ) then do;
42089     +   IMP_node_capsno = .;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = .;
42090     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42091     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42092     +end;
MPRINT(EM_DIAGRAM):   end;
42093     +else do;
MPRINT(EM_DIAGRAM):   else do;
42094     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
42095     +   _dm3 = put( IMP_node_caps , $3. );
MPRINT(EM_DIAGRAM):   _dm3 = put( IMP_node_caps , $3. );
42096     +   %DMNORMIP( _dm3 )
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42097     +   if _dm3 = 'NO'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
42098     +      IMP_node_capsno = 1;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = 1;
42099     +   end;
MPRINT(EM_DIAGRAM):   end;
42100     +   else if _dm3 = 'YES'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
42101     +      IMP_node_capsno = -1;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = -1;
42102     +   end;
MPRINT(EM_DIAGRAM):   end;
42103     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42104     +      IMP_node_capsno = .;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = .;
42105     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42106     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42107     +   end;
MPRINT(EM_DIAGRAM):   end;
42108     +end;
MPRINT(EM_DIAGRAM):   end;
42109     +
42110     +*** Generate dummy variables for breast ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for breast ;
42111     +drop breastleft ;
MPRINT(EM_DIAGRAM):   drop breastleft ;
42112     +if missing( breast ) then do;
MPRINT(EM_DIAGRAM):   if missing( breast ) then do;
42113     +   breastleft = .;
MPRINT(EM_DIAGRAM):   breastleft = .;
42114     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42115     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42116     +end;
MPRINT(EM_DIAGRAM):   end;
42117     +else do;
MPRINT(EM_DIAGRAM):   else do;
42118     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
42119     +   _dm5 = put( breast , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( breast , $5. );
42120     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42121     +   if _dm5 = 'LEFT'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = 'LEFT' then do;
42122     +      breastleft = 1;
MPRINT(EM_DIAGRAM):   breastleft = 1;
42123     +   end;
MPRINT(EM_DIAGRAM):   end;
42124     +   else if _dm5 = 'RIGHT'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'RIGHT' then do;
42125     +      breastleft = -1;
MPRINT(EM_DIAGRAM):   breastleft = -1;
42126     +   end;
MPRINT(EM_DIAGRAM):   end;
42127     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42128     +      breastleft = .;
MPRINT(EM_DIAGRAM):   breastleft = .;
42129     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42130     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42131     +   end;
MPRINT(EM_DIAGRAM):   end;
42132     +end;
MPRINT(EM_DIAGRAM):   end;
42133     +
42134     +*** Generate dummy variables for irradiat ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for irradiat ;
42135     +drop irradiatno ;
MPRINT(EM_DIAGRAM):   drop irradiatno ;
42136     +if missing( irradiat ) then do;
MPRINT(EM_DIAGRAM):   if missing( irradiat ) then do;
42137     +   irradiatno = .;
MPRINT(EM_DIAGRAM):   irradiatno = .;
42138     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42139     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42140     +end;
MPRINT(EM_DIAGRAM):   end;
42141     +else do;
MPRINT(EM_DIAGRAM):   else do;
42142     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
42143     +   _dm3 = put( irradiat , $3. );
MPRINT(EM_DIAGRAM):   _dm3 = put( irradiat , $3. );
42144     +   %DMNORMIP( _dm3 )
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42145     +   if _dm3 = 'NO'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
42146     +      irradiatno = 1;
MPRINT(EM_DIAGRAM):   irradiatno = 1;
42147     +   end;
MPRINT(EM_DIAGRAM):   end;
42148     +   else if _dm3 = 'YES'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
42149     +      irradiatno = -1;
MPRINT(EM_DIAGRAM):   irradiatno = -1;
42150     +   end;
MPRINT(EM_DIAGRAM):   end;
42151     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42152     +      irradiatno = .;
MPRINT(EM_DIAGRAM):   irradiatno = .;
42153     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42154     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42155     +   end;
MPRINT(EM_DIAGRAM):   end;
42156     +end;
MPRINT(EM_DIAGRAM):   end;
42157     +
42158     +*** Generate dummy variables for age ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for age ;
42159     +drop age20_29 age30_39 age40_49 age50_59 age60_69 ;
MPRINT(EM_DIAGRAM):   drop age20_29 age30_39 age40_49 age50_59 age60_69 ;
42160     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
42161     +age20_29 = 0;
MPRINT(EM_DIAGRAM):   age20_29 = 0;
42162     +age30_39 = 0;
MPRINT(EM_DIAGRAM):   age30_39 = 0;
42163     +age40_49 = 0;
MPRINT(EM_DIAGRAM):   age40_49 = 0;
42164     +age50_59 = 0;
MPRINT(EM_DIAGRAM):   age50_59 = 0;
42165     +age60_69 = 0;
MPRINT(EM_DIAGRAM):   age60_69 = 0;
42166     +if missing( age ) then do;
MPRINT(EM_DIAGRAM):   if missing( age ) then do;
42167     +   age20_29 = .;
MPRINT(EM_DIAGRAM):   age20_29 = .;
42168     +   age30_39 = .;
MPRINT(EM_DIAGRAM):   age30_39 = .;
42169     +   age40_49 = .;
MPRINT(EM_DIAGRAM):   age40_49 = .;
42170     +   age50_59 = .;
MPRINT(EM_DIAGRAM):   age50_59 = .;
42171     +   age60_69 = .;
MPRINT(EM_DIAGRAM):   age60_69 = .;
42172     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42173     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42174     +end;
MPRINT(EM_DIAGRAM):   end;
42175     +else do;
MPRINT(EM_DIAGRAM):   else do;
42176     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
42177     +   _dm5 = put( age , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( age , $5. );
42178     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42179     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
42180     +   if _dm5 <= '40-49'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '40-49' then do;
42181     +      if _dm5 <= '30-39'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '30-39' then do;
42182     +         if _dm5 = '20-29'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '20-29' then do;
42183     +            age20_29 = 1;
MPRINT(EM_DIAGRAM):   age20_29 = 1;
42184     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42185     +         end;
MPRINT(EM_DIAGRAM):   end;
42186     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42187     +            if _dm5 = '30-39'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '30-39' then do;
42188     +               age30_39 = 1;
MPRINT(EM_DIAGRAM):   age30_39 = 1;
42189     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42190     +            end;
MPRINT(EM_DIAGRAM):   end;
42191     +         end;
MPRINT(EM_DIAGRAM):   end;
42192     +      end;
MPRINT(EM_DIAGRAM):   end;
42193     +      else do;
MPRINT(EM_DIAGRAM):   else do;
42194     +         if _dm5 = '40-49'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '40-49' then do;
42195     +            age40_49 = 1;
MPRINT(EM_DIAGRAM):   age40_49 = 1;
42196     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42197     +         end;
MPRINT(EM_DIAGRAM):   end;
42198     +      end;
MPRINT(EM_DIAGRAM):   end;
42199     +   end;
MPRINT(EM_DIAGRAM):   end;
42200     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42201     +      if _dm5 <= '60-69'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '60-69' then do;
42202     +         if _dm5 = '50-59'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '50-59' then do;
42203     +            age50_59 = 1;
MPRINT(EM_DIAGRAM):   age50_59 = 1;
42204     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42205     +         end;
MPRINT(EM_DIAGRAM):   end;
42206     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42207     +            if _dm5 = '60-69'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '60-69' then do;
42208     +               age60_69 = 1;
MPRINT(EM_DIAGRAM):   age60_69 = 1;
42209     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42210     +            end;
MPRINT(EM_DIAGRAM):   end;
42211     +         end;
MPRINT(EM_DIAGRAM):   end;
42212     +      end;
MPRINT(EM_DIAGRAM):   end;
42213     +      else do;
MPRINT(EM_DIAGRAM):   else do;
42214     +         if _dm5 = '70-79'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '70-79' then do;
42215     +            age20_29 = -1;
MPRINT(EM_DIAGRAM):   age20_29 = -1;
42216     +            age30_39 = -1;
MPRINT(EM_DIAGRAM):   age30_39 = -1;
42217     +            age40_49 = -1;
MPRINT(EM_DIAGRAM):   age40_49 = -1;
42218     +            age50_59 = -1;
MPRINT(EM_DIAGRAM):   age50_59 = -1;
42219     +            age60_69 = -1;
MPRINT(EM_DIAGRAM):   age60_69 = -1;
42220     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42221     +         end;
MPRINT(EM_DIAGRAM):   end;
42222     +      end;
MPRINT(EM_DIAGRAM):   end;
42223     +   end;
MPRINT(EM_DIAGRAM):   end;
42224     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
42225     +      age20_29 = .;
MPRINT(EM_DIAGRAM):   age20_29 = .;
42226     +      age30_39 = .;
MPRINT(EM_DIAGRAM):   age30_39 = .;
42227     +      age40_49 = .;
MPRINT(EM_DIAGRAM):   age40_49 = .;
42228     +      age50_59 = .;
MPRINT(EM_DIAGRAM):   age50_59 = .;
42229     +      age60_69 = .;
MPRINT(EM_DIAGRAM):   age60_69 = .;
42230     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42231     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42232     +   end;
MPRINT(EM_DIAGRAM):   end;
42233     +end;
MPRINT(EM_DIAGRAM):   end;
42234     +
42235     +*** Generate dummy variables for breast_quad ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for breast_quad ;
42236     +drop breast_quadcentral breast_quadleft_low breast_quadleft_up
42237     +        breast_quadright_low ;
MPRINT(EM_DIAGRAM):   drop breast_quadcentral breast_quadleft_low breast_quadleft_up
breast_quadright_low ;
42238     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
42239     +breast_quadcentral = 0;
MPRINT(EM_DIAGRAM):   breast_quadcentral = 0;
42240     +breast_quadleft_low = 0;
MPRINT(EM_DIAGRAM):   breast_quadleft_low = 0;
42241     +breast_quadleft_up = 0;
MPRINT(EM_DIAGRAM):   breast_quadleft_up = 0;
42242     +breast_quadright_low = 0;
MPRINT(EM_DIAGRAM):   breast_quadright_low = 0;
42243     +if missing( breast_quad ) then do;
MPRINT(EM_DIAGRAM):   if missing( breast_quad ) then do;
42244     +   breast_quadcentral = .;
MPRINT(EM_DIAGRAM):   breast_quadcentral = .;
42245     +   breast_quadleft_low = .;
MPRINT(EM_DIAGRAM):   breast_quadleft_low = .;
42246     +   breast_quadleft_up = .;
MPRINT(EM_DIAGRAM):   breast_quadleft_up = .;
42247     +   breast_quadright_low = .;
MPRINT(EM_DIAGRAM):   breast_quadright_low = .;
42248     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42249     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42250     +end;
MPRINT(EM_DIAGRAM):   end;
42251     +else do;
MPRINT(EM_DIAGRAM):   else do;
42252     +   length _dm9 $ 9; drop _dm9 ;
MPRINT(EM_DIAGRAM):   length _dm9 $ 9;
MPRINT(EM_DIAGRAM):   drop _dm9 ;
42253     +   _dm9 = put( breast_quad , $9. );
MPRINT(EM_DIAGRAM):   _dm9 = put( breast_quad , $9. );
42254     +   %DMNORMIP( _dm9 )
MPRINT(DMNORMIP):   call dmnorm(_dm9,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42255     +   if _dm9 = 'LEFT_UP'  then do;
MPRINT(EM_DIAGRAM):   if _dm9 = 'LEFT_UP' then do;
42256     +      breast_quadleft_up = 1;
MPRINT(EM_DIAGRAM):   breast_quadleft_up = 1;
42257     +   end;
MPRINT(EM_DIAGRAM):   end;
42258     +   else if _dm9 = 'LEFT_LOW'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'LEFT_LOW' then do;
42259     +      breast_quadleft_low = 1;
MPRINT(EM_DIAGRAM):   breast_quadleft_low = 1;
42260     +   end;
MPRINT(EM_DIAGRAM):   end;
42261     +   else if _dm9 = 'RIGHT_UP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'RIGHT_UP' then do;
42262     +      breast_quadcentral = -1;
MPRINT(EM_DIAGRAM):   breast_quadcentral = -1;
42263     +      breast_quadleft_low = -1;
MPRINT(EM_DIAGRAM):   breast_quadleft_low = -1;
42264     +      breast_quadleft_up = -1;
MPRINT(EM_DIAGRAM):   breast_quadleft_up = -1;
42265     +      breast_quadright_low = -1;
MPRINT(EM_DIAGRAM):   breast_quadright_low = -1;
42266     +   end;
MPRINT(EM_DIAGRAM):   end;
42267     +   else if _dm9 = 'CENTRAL'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'CENTRAL' then do;
42268     +      breast_quadcentral = 1;
MPRINT(EM_DIAGRAM):   breast_quadcentral = 1;
42269     +   end;
MPRINT(EM_DIAGRAM):   end;
42270     +   else if _dm9 = 'RIGHT_LOW'  then do;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'RIGHT_LOW' then do;
42271     +      breast_quadright_low = 1;
MPRINT(EM_DIAGRAM):   breast_quadright_low = 1;
42272     +   end;
MPRINT(EM_DIAGRAM):   end;
42273     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42274     +      breast_quadcentral = .;
MPRINT(EM_DIAGRAM):   breast_quadcentral = .;
42275     +      breast_quadleft_low = .;
MPRINT(EM_DIAGRAM):   breast_quadleft_low = .;
42276     +      breast_quadleft_up = .;
MPRINT(EM_DIAGRAM):   breast_quadleft_up = .;
42277     +      breast_quadright_low = .;
MPRINT(EM_DIAGRAM):   breast_quadright_low = .;
42278     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42279     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42280     +   end;
MPRINT(EM_DIAGRAM):   end;
42281     +end;
MPRINT(EM_DIAGRAM):   end;
42282     +
42283     +*** Generate dummy variables for inv_nodes ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for inv_nodes ;
42284     +drop inv_nodes0_2 inv_nodes12_14 inv_nodes15_17 inv_nodes24_26 inv_nodes3_5
42285     +        inv_nodes6_8 ;
MPRINT(EM_DIAGRAM):   drop inv_nodes0_2 inv_nodes12_14 inv_nodes15_17 inv_nodes24_26
inv_nodes3_5 inv_nodes6_8 ;
42286     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
42287     +inv_nodes0_2 = 0;
MPRINT(EM_DIAGRAM):   inv_nodes0_2 = 0;
42288     +inv_nodes12_14 = 0;
MPRINT(EM_DIAGRAM):   inv_nodes12_14 = 0;
42289     +inv_nodes15_17 = 0;
MPRINT(EM_DIAGRAM):   inv_nodes15_17 = 0;
42290     +inv_nodes24_26 = 0;
MPRINT(EM_DIAGRAM):   inv_nodes24_26 = 0;
42291     +inv_nodes3_5 = 0;
MPRINT(EM_DIAGRAM):   inv_nodes3_5 = 0;
42292     +inv_nodes6_8 = 0;
MPRINT(EM_DIAGRAM):   inv_nodes6_8 = 0;
42293     +if missing( inv_nodes ) then do;
MPRINT(EM_DIAGRAM):   if missing( inv_nodes ) then do;
42294     +   inv_nodes0_2 = .;
MPRINT(EM_DIAGRAM):   inv_nodes0_2 = .;
42295     +   inv_nodes12_14 = .;
MPRINT(EM_DIAGRAM):   inv_nodes12_14 = .;
42296     +   inv_nodes15_17 = .;
MPRINT(EM_DIAGRAM):   inv_nodes15_17 = .;
42297     +   inv_nodes24_26 = .;
MPRINT(EM_DIAGRAM):   inv_nodes24_26 = .;
42298     +   inv_nodes3_5 = .;
MPRINT(EM_DIAGRAM):   inv_nodes3_5 = .;
42299     +   inv_nodes6_8 = .;
MPRINT(EM_DIAGRAM):   inv_nodes6_8 = .;
42300     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42301     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42302     +end;
MPRINT(EM_DIAGRAM):   end;
42303     +else do;
MPRINT(EM_DIAGRAM):   else do;
42304     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
42305     +   _dm5 = put( inv_nodes , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( inv_nodes , $5. );
42306     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42307     +   if _dm5 = '0-2'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '0-2' then do;
42308     +      inv_nodes0_2 = 1;
MPRINT(EM_DIAGRAM):   inv_nodes0_2 = 1;
42309     +   end;
MPRINT(EM_DIAGRAM):   end;
42310     +   else if _dm5 = '3-5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '3-5' then do;
42311     +      inv_nodes3_5 = 1;
MPRINT(EM_DIAGRAM):   inv_nodes3_5 = 1;
42312     +   end;
MPRINT(EM_DIAGRAM):   end;
42313     +   else if _dm5 = '6-8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '6-8' then do;
42314     +      inv_nodes6_8 = 1;
MPRINT(EM_DIAGRAM):   inv_nodes6_8 = 1;
42315     +   end;
MPRINT(EM_DIAGRAM):   end;
42316     +   else if _dm5 = '9-11'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '9-11' then do;
42317     +      inv_nodes0_2 = -1;
MPRINT(EM_DIAGRAM):   inv_nodes0_2 = -1;
42318     +      inv_nodes12_14 = -1;
MPRINT(EM_DIAGRAM):   inv_nodes12_14 = -1;
42319     +      inv_nodes15_17 = -1;
MPRINT(EM_DIAGRAM):   inv_nodes15_17 = -1;
42320     +      inv_nodes24_26 = -1;
MPRINT(EM_DIAGRAM):   inv_nodes24_26 = -1;
42321     +      inv_nodes3_5 = -1;
MPRINT(EM_DIAGRAM):   inv_nodes3_5 = -1;
42322     +      inv_nodes6_8 = -1;
MPRINT(EM_DIAGRAM):   inv_nodes6_8 = -1;
42323     +   end;
MPRINT(EM_DIAGRAM):   end;
42324     +   else if _dm5 = '15-17'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '15-17' then do;
42325     +      inv_nodes15_17 = 1;
MPRINT(EM_DIAGRAM):   inv_nodes15_17 = 1;
42326     +   end;
MPRINT(EM_DIAGRAM):   end;
42327     +   else if _dm5 = '12-14'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '12-14' then do;
42328     +      inv_nodes12_14 = 1;
MPRINT(EM_DIAGRAM):   inv_nodes12_14 = 1;
42329     +   end;
MPRINT(EM_DIAGRAM):   end;
42330     +   else if _dm5 = '24-26'  then do;
MPRINT(EM_DIAGRAM):   else if _dm5 = '24-26' then do;
42331     +      inv_nodes24_26 = 1;
MPRINT(EM_DIAGRAM):   inv_nodes24_26 = 1;
42332     +   end;
MPRINT(EM_DIAGRAM):   end;
42333     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42334     +      inv_nodes0_2 = .;
MPRINT(EM_DIAGRAM):   inv_nodes0_2 = .;
42335     +      inv_nodes12_14 = .;
MPRINT(EM_DIAGRAM):   inv_nodes12_14 = .;
42336     +      inv_nodes15_17 = .;
MPRINT(EM_DIAGRAM):   inv_nodes15_17 = .;
42337     +      inv_nodes24_26 = .;
MPRINT(EM_DIAGRAM):   inv_nodes24_26 = .;
42338     +      inv_nodes3_5 = .;
MPRINT(EM_DIAGRAM):   inv_nodes3_5 = .;
42339     +      inv_nodes6_8 = .;
MPRINT(EM_DIAGRAM):   inv_nodes6_8 = .;
42340     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42341     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42342     +   end;
MPRINT(EM_DIAGRAM):   end;
42343     +end;
MPRINT(EM_DIAGRAM):   end;
42344     +
42345     +*** Generate dummy variables for menopause ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for menopause ;
42346     +drop menopausege40 menopauselt40 ;
MPRINT(EM_DIAGRAM):   drop menopausege40 menopauselt40 ;
42347     +if missing( menopause ) then do;
MPRINT(EM_DIAGRAM):   if missing( menopause ) then do;
42348     +   menopausege40 = .;
MPRINT(EM_DIAGRAM):   menopausege40 = .;
42349     +   menopauselt40 = .;
MPRINT(EM_DIAGRAM):   menopauselt40 = .;
42350     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42351     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42352     +end;
MPRINT(EM_DIAGRAM):   end;
42353     +else do;
MPRINT(EM_DIAGRAM):   else do;
42354     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
42355     +   _dm7 = put( menopause , $7. );
MPRINT(EM_DIAGRAM):   _dm7 = put( menopause , $7. );
42356     +   %DMNORMIP( _dm7 )
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42357     +   if _dm7 = 'PREMENO'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'PREMENO' then do;
42358     +      menopausege40 = -1;
MPRINT(EM_DIAGRAM):   menopausege40 = -1;
42359     +      menopauselt40 = -1;
MPRINT(EM_DIAGRAM):   menopauselt40 = -1;
42360     +   end;
MPRINT(EM_DIAGRAM):   end;
42361     +   else if _dm7 = 'GE40'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'GE40' then do;
42362     +      menopausege40 = 1;
MPRINT(EM_DIAGRAM):   menopausege40 = 1;
42363     +      menopauselt40 = 0;
MPRINT(EM_DIAGRAM):   menopauselt40 = 0;
42364     +   end;
MPRINT(EM_DIAGRAM):   end;
42365     +   else if _dm7 = 'LT40'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'LT40' then do;
42366     +      menopausege40 = 0;
MPRINT(EM_DIAGRAM):   menopausege40 = 0;
42367     +      menopauselt40 = 1;
MPRINT(EM_DIAGRAM):   menopauselt40 = 1;
42368     +   end;
MPRINT(EM_DIAGRAM):   end;
42369     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42370     +      menopausege40 = .;
MPRINT(EM_DIAGRAM):   menopausege40 = .;
42371     +      menopauselt40 = .;
MPRINT(EM_DIAGRAM):   menopauselt40 = .;
42372     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42373     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42374     +   end;
MPRINT(EM_DIAGRAM):   end;
42375     +end;
MPRINT(EM_DIAGRAM):   end;
42376     +
42377     +*** Generate dummy variables for tumor_size ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for tumor_size ;
42378     +drop tumor_size0_4 tumor_size10_14 tumor_size15_19 tumor_size20_24
42379     +        tumor_size25_29 tumor_size30_34 tumor_size35_39 tumor_size40_44
42380     +        tumor_size45_49 tumor_size5_9 ;
MPRINT(EM_DIAGRAM):   drop tumor_size0_4 tumor_size10_14 tumor_size15_19 tumor_size20_24
tumor_size25_29 tumor_size30_34 tumor_size35_39 tumor_size40_44 tumor_size45_49 tumor_size5_9 ;
42381     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
42382     +tumor_size0_4 = 0;
MPRINT(EM_DIAGRAM):   tumor_size0_4 = 0;
42383     +tumor_size10_14 = 0;
MPRINT(EM_DIAGRAM):   tumor_size10_14 = 0;
42384     +tumor_size15_19 = 0;
MPRINT(EM_DIAGRAM):   tumor_size15_19 = 0;
42385     +tumor_size20_24 = 0;
MPRINT(EM_DIAGRAM):   tumor_size20_24 = 0;
42386     +tumor_size25_29 = 0;
MPRINT(EM_DIAGRAM):   tumor_size25_29 = 0;
42387     +tumor_size30_34 = 0;
MPRINT(EM_DIAGRAM):   tumor_size30_34 = 0;
42388     +tumor_size35_39 = 0;
MPRINT(EM_DIAGRAM):   tumor_size35_39 = 0;
42389     +tumor_size40_44 = 0;
MPRINT(EM_DIAGRAM):   tumor_size40_44 = 0;
42390     +tumor_size45_49 = 0;
MPRINT(EM_DIAGRAM):   tumor_size45_49 = 0;
42391     +tumor_size5_9 = 0;
MPRINT(EM_DIAGRAM):   tumor_size5_9 = 0;
42392     +if missing( tumor_size ) then do;
MPRINT(EM_DIAGRAM):   if missing( tumor_size ) then do;
42393     +   tumor_size0_4 = .;
MPRINT(EM_DIAGRAM):   tumor_size0_4 = .;
42394     +   tumor_size10_14 = .;
MPRINT(EM_DIAGRAM):   tumor_size10_14 = .;
42395     +   tumor_size15_19 = .;
MPRINT(EM_DIAGRAM):   tumor_size15_19 = .;
42396     +   tumor_size20_24 = .;
MPRINT(EM_DIAGRAM):   tumor_size20_24 = .;
42397     +   tumor_size25_29 = .;
MPRINT(EM_DIAGRAM):   tumor_size25_29 = .;
42398     +   tumor_size30_34 = .;
MPRINT(EM_DIAGRAM):   tumor_size30_34 = .;
42399     +   tumor_size35_39 = .;
MPRINT(EM_DIAGRAM):   tumor_size35_39 = .;
42400     +   tumor_size40_44 = .;
MPRINT(EM_DIAGRAM):   tumor_size40_44 = .;
42401     +   tumor_size45_49 = .;
MPRINT(EM_DIAGRAM):   tumor_size45_49 = .;
42402     +   tumor_size5_9 = .;
MPRINT(EM_DIAGRAM):   tumor_size5_9 = .;
42403     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42404     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42405     +end;
MPRINT(EM_DIAGRAM):   end;
42406     +else do;
MPRINT(EM_DIAGRAM):   else do;
42407     +   length _dm5 $ 5; drop _dm5 ;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
42408     +   _dm5 = put( tumor_size , $5. );
MPRINT(EM_DIAGRAM):   _dm5 = put( tumor_size , $5. );
42409     +   %DMNORMIP( _dm5 )
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42410     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
42411     +   if _dm5 <= '30-34'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '30-34' then do;
42412     +      if _dm5 <= '15-19'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '15-19' then do;
42413     +         if _dm5 <= '10-14'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '10-14' then do;
42414     +            if _dm5 = '0-4'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '0-4' then do;
42415     +               tumor_size0_4 = 1;
MPRINT(EM_DIAGRAM):   tumor_size0_4 = 1;
42416     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42417     +            end;
MPRINT(EM_DIAGRAM):   end;
42418     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42419     +               if _dm5 = '10-14'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '10-14' then do;
42420     +                  tumor_size10_14 = 1;
MPRINT(EM_DIAGRAM):   tumor_size10_14 = 1;
42421     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42422     +               end;
MPRINT(EM_DIAGRAM):   end;
42423     +            end;
MPRINT(EM_DIAGRAM):   end;
42424     +         end;
MPRINT(EM_DIAGRAM):   end;
42425     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42426     +            if _dm5 = '15-19'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '15-19' then do;
42427     +               tumor_size15_19 = 1;
MPRINT(EM_DIAGRAM):   tumor_size15_19 = 1;
42428     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42429     +            end;
MPRINT(EM_DIAGRAM):   end;
42430     +         end;
MPRINT(EM_DIAGRAM):   end;
42431     +      end;
MPRINT(EM_DIAGRAM):   end;
42432     +      else do;
MPRINT(EM_DIAGRAM):   else do;
42433     +         if _dm5 <= '25-29'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '25-29' then do;
42434     +            if _dm5 = '20-24'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '20-24' then do;
42435     +               tumor_size20_24 = 1;
MPRINT(EM_DIAGRAM):   tumor_size20_24 = 1;
42436     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42437     +            end;
MPRINT(EM_DIAGRAM):   end;
42438     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42439     +               if _dm5 = '25-29'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '25-29' then do;
42440     +                  tumor_size25_29 = 1;
MPRINT(EM_DIAGRAM):   tumor_size25_29 = 1;
42441     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42442     +               end;
MPRINT(EM_DIAGRAM):   end;
42443     +            end;
MPRINT(EM_DIAGRAM):   end;
42444     +         end;
MPRINT(EM_DIAGRAM):   end;
42445     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42446     +            if _dm5 = '30-34'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '30-34' then do;
42447     +               tumor_size30_34 = 1;
MPRINT(EM_DIAGRAM):   tumor_size30_34 = 1;
42448     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42449     +            end;
MPRINT(EM_DIAGRAM):   end;
42450     +         end;
MPRINT(EM_DIAGRAM):   end;
42451     +      end;
MPRINT(EM_DIAGRAM):   end;
42452     +   end;
MPRINT(EM_DIAGRAM):   end;
42453     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42454     +      if _dm5 <= '45-49'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '45-49' then do;
42455     +         if _dm5 <= '40-44'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 <= '40-44' then do;
42456     +            if _dm5 = '35-39'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '35-39' then do;
42457     +               tumor_size35_39 = 1;
MPRINT(EM_DIAGRAM):   tumor_size35_39 = 1;
42458     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42459     +            end;
MPRINT(EM_DIAGRAM):   end;
42460     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42461     +               if _dm5 = '40-44'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '40-44' then do;
42462     +                  tumor_size40_44 = 1;
MPRINT(EM_DIAGRAM):   tumor_size40_44 = 1;
42463     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42464     +               end;
MPRINT(EM_DIAGRAM):   end;
42465     +            end;
MPRINT(EM_DIAGRAM):   end;
42466     +         end;
MPRINT(EM_DIAGRAM):   end;
42467     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42468     +            if _dm5 = '45-49'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '45-49' then do;
42469     +               tumor_size45_49 = 1;
MPRINT(EM_DIAGRAM):   tumor_size45_49 = 1;
42470     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42471     +            end;
MPRINT(EM_DIAGRAM):   end;
42472     +         end;
MPRINT(EM_DIAGRAM):   end;
42473     +      end;
MPRINT(EM_DIAGRAM):   end;
42474     +      else do;
MPRINT(EM_DIAGRAM):   else do;
42475     +         if _dm5 = '5-9'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '5-9' then do;
42476     +            tumor_size5_9 = 1;
MPRINT(EM_DIAGRAM):   tumor_size5_9 = 1;
42477     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42478     +         end;
MPRINT(EM_DIAGRAM):   end;
42479     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42480     +            if _dm5 = '50-54'  then do;
MPRINT(EM_DIAGRAM):   if _dm5 = '50-54' then do;
42481     +               tumor_size0_4 = -1;
MPRINT(EM_DIAGRAM):   tumor_size0_4 = -1;
42482     +               tumor_size10_14 = -1;
MPRINT(EM_DIAGRAM):   tumor_size10_14 = -1;
42483     +               tumor_size15_19 = -1;
MPRINT(EM_DIAGRAM):   tumor_size15_19 = -1;
42484     +               tumor_size20_24 = -1;
MPRINT(EM_DIAGRAM):   tumor_size20_24 = -1;
42485     +               tumor_size25_29 = -1;
MPRINT(EM_DIAGRAM):   tumor_size25_29 = -1;
42486     +               tumor_size30_34 = -1;
MPRINT(EM_DIAGRAM):   tumor_size30_34 = -1;
42487     +               tumor_size35_39 = -1;
MPRINT(EM_DIAGRAM):   tumor_size35_39 = -1;
42488     +               tumor_size40_44 = -1;
MPRINT(EM_DIAGRAM):   tumor_size40_44 = -1;
42489     +               tumor_size45_49 = -1;
MPRINT(EM_DIAGRAM):   tumor_size45_49 = -1;
42490     +               tumor_size5_9 = -1;
MPRINT(EM_DIAGRAM):   tumor_size5_9 = -1;
42491     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42492     +            end;
MPRINT(EM_DIAGRAM):   end;
42493     +         end;
MPRINT(EM_DIAGRAM):   end;
42494     +      end;
MPRINT(EM_DIAGRAM):   end;
42495     +   end;
MPRINT(EM_DIAGRAM):   end;
42496     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
42497     +      tumor_size0_4 = .;
MPRINT(EM_DIAGRAM):   tumor_size0_4 = .;
42498     +      tumor_size10_14 = .;
MPRINT(EM_DIAGRAM):   tumor_size10_14 = .;
42499     +      tumor_size15_19 = .;
MPRINT(EM_DIAGRAM):   tumor_size15_19 = .;
42500     +      tumor_size20_24 = .;
MPRINT(EM_DIAGRAM):   tumor_size20_24 = .;
42501     +      tumor_size25_29 = .;
MPRINT(EM_DIAGRAM):   tumor_size25_29 = .;
42502     +      tumor_size30_34 = .;
MPRINT(EM_DIAGRAM):   tumor_size30_34 = .;
42503     +      tumor_size35_39 = .;
MPRINT(EM_DIAGRAM):   tumor_size35_39 = .;
42504     +      tumor_size40_44 = .;
MPRINT(EM_DIAGRAM):   tumor_size40_44 = .;
42505     +      tumor_size45_49 = .;
MPRINT(EM_DIAGRAM):   tumor_size45_49 = .;
42506     +      tumor_size5_9 = .;
MPRINT(EM_DIAGRAM):   tumor_size5_9 = .;
42507     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42508     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42509     +   end;
MPRINT(EM_DIAGRAM):   end;
42510     +end;
MPRINT(EM_DIAGRAM):   end;
42511     +
42512     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
42513     +*** Checking missing input Interval
42514     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
42515     +
42516     +IF NMISS(
42517     +   AvgAge ,
42518     +   AvgTumorSize ,
42519     +   Avginv_node_group ,
42520     +   deg_malig   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( AvgAge , AvgTumorSize , Avginv_node_group , deg_malig ) THEN
DO;
42521     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
42522     +
42523     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42524     +END;
MPRINT(EM_DIAGRAM):   END;
42525     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
42526     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
42527     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
42528     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
42529     +   S_AvgAge  =    -5.17542134396122 +     0.10002730056017 * AvgAge ;
MPRINT(EM_DIAGRAM):   S_AvgAge = -5.17542134396122 + 0.10002730056017 * AvgAge ;
42530     +   S_AvgTumorSize  =    -2.52494540353916 +     0.09506760766352 *
42531     +        AvgTumorSize ;
MPRINT(EM_DIAGRAM):   S_AvgTumorSize = -2.52494540353916 + 0.09506760766352 * AvgTumorSize ;
42532     +   S_Avginv_node_group  =    -0.69351787747727 +     0.31173971918285 *
42533     +        Avginv_node_group ;
MPRINT(EM_DIAGRAM):   S_Avginv_node_group = -0.69351787747727 + 0.31173971918285 *
Avginv_node_group ;
42534     +   S_deg_malig  =    -2.75629070254781 +     1.34265662978187 * deg_malig ;
MPRINT(EM_DIAGRAM):   S_deg_malig = -2.75629070254781 + 1.34265662978187 * deg_malig ;
42535     +END;
MPRINT(EM_DIAGRAM):   END;
42536     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
42537     +   IF MISSING( AvgAge ) THEN S_AvgAge  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AvgAge ) THEN S_AvgAge = . ;
42538     +   ELSE S_AvgAge  =    -5.17542134396122 +     0.10002730056017 * AvgAge ;
MPRINT(EM_DIAGRAM):   ELSE S_AvgAge = -5.17542134396122 + 0.10002730056017 * AvgAge ;
42539     +   IF MISSING( AvgTumorSize ) THEN S_AvgTumorSize  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( AvgTumorSize ) THEN S_AvgTumorSize = . ;
42540     +   ELSE S_AvgTumorSize  =    -2.52494540353916 +     0.09506760766352 *
42541     +        AvgTumorSize ;
MPRINT(EM_DIAGRAM):   ELSE S_AvgTumorSize = -2.52494540353916 + 0.09506760766352 *
AvgTumorSize ;
42542     +   IF MISSING( Avginv_node_group ) THEN S_Avginv_node_group  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Avginv_node_group ) THEN S_Avginv_node_group = . ;
42543     +   ELSE S_Avginv_node_group  =    -0.69351787747727 +     0.31173971918285 *
42544     +        Avginv_node_group ;
MPRINT(EM_DIAGRAM):   ELSE S_Avginv_node_group = -0.69351787747727 + 0.31173971918285 *
Avginv_node_group ;
42545     +   IF MISSING( deg_malig ) THEN S_deg_malig  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( deg_malig ) THEN S_deg_malig = . ;
42546     +   ELSE S_deg_malig  =    -2.75629070254781 +     1.34265662978187 * deg_malig
42547     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_deg_malig = -2.75629070254781 + 1.34265662978187 * deg_malig ;
42548     +END;
MPRINT(EM_DIAGRAM):   END;
42549     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
42550     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
42551     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
42552     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
42553     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
42554     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
42555     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
42556     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
42557     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
42558     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
42559     +   H11  =    -0.61497493528093 * S_AvgAge  +     0.95387181547091 *
42560     +        S_AvgTumorSize  +    -0.07696387186429 * S_Avginv_node_group
42561     +          +    -0.37968136001267 * S_deg_malig ;
MPRINT(EM_DIAGRAM):   H11 = -0.61497493528093 * S_AvgAge + 0.95387181547091 * S_AvgTumorSize +
-0.07696387186429 * S_Avginv_node_group + -0.37968136001267 * S_deg_malig ;
42562     +   H12  =    -0.10284288284194 * S_AvgAge  +     0.37352136247344 *
42563     +        S_AvgTumorSize  +     0.68676513170483 * S_Avginv_node_group
42564     +          +     0.47005499648247 * S_deg_malig ;
MPRINT(EM_DIAGRAM):   H12 = -0.10284288284194 * S_AvgAge + 0.37352136247344 * S_AvgTumorSize +
0.68676513170483 * S_Avginv_node_group + 0.47005499648247 * S_deg_malig ;
42565     +   H13  =      0.9145919034759 * S_AvgAge  +     0.05826862125007 *
42566     +        S_AvgTumorSize  +    -0.00110862274069 * S_Avginv_node_group
42567     +          +     1.75176090163572 * S_deg_malig ;
MPRINT(EM_DIAGRAM):   H13 = 0.9145919034759 * S_AvgAge + 0.05826862125007 * S_AvgTumorSize +
-0.00110862274069 * S_Avginv_node_group + 1.75176090163572 * S_deg_malig ;
42568     +   H11  = H11  +     0.36327134003845 * IMP_node_capsno
42569     +          +    -0.61958170054396 * breastleft  +    -0.76320688913225 *
42570     +        irradiatno ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.36327134003845 * IMP_node_capsno + -0.61958170054396 *
breastleft + -0.76320688913225 * irradiatno ;
42571     +   H12  = H12  +     0.79264758501102 * IMP_node_capsno
42572     +          +     0.38736672542142 * breastleft  +    -0.41943897063306 *
42573     +        irradiatno ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.79264758501102 * IMP_node_capsno + 0.38736672542142 *
breastleft + -0.41943897063306 * irradiatno ;
42574     +   H13  = H13  +    -0.57775127561597 * IMP_node_capsno
42575     +          +     0.72019942479724 * breastleft  +    -0.27388143245069 *
42576     +        irradiatno ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.57775127561597 * IMP_node_capsno + 0.72019942479724 *
breastleft + -0.27388143245069 * irradiatno ;
42577     +   H11  = H11  +     0.03389920437167 * age20_29  +     0.72089986894102 *
42578     +        age30_39  +     0.28798904753624 * age40_49  +     0.44335242159532 *
42579     +        age50_59  +     0.52451229055658 * age60_69  +     0.26756102661582 *
42580     +        breast_quadcentral  +    -0.27707826700111 * breast_quadleft_low
42581     +          +    -0.50619587378469 * breast_quadleft_up
42582     +          +     0.32385655977639 * breast_quadright_low
42583     +          +    -0.34095159639954 * inv_nodes0_2  +      0.4491951931604 *
42584     +        inv_nodes12_14  +    -0.18585971024084 * inv_nodes15_17
42585     +          +     0.46197576963823 * inv_nodes24_26  +     1.13872977786161 *
42586     +        inv_nodes3_5  +    -0.24695704463614 * inv_nodes6_8
42587     +          +     -1.6254898573616 * menopausege40  +    -0.92858614182967 *
42588     +        menopauselt40  +    -0.38889900414931 * tumor_size0_4
42589     +          +    -1.07107947032064 * tumor_size10_14  +     0.03210466953987 *
42590     +        tumor_size15_19  +     2.09618876020959 * tumor_size20_24
42591     +          +     -0.2438896271209 * tumor_size25_29  +    -0.22402647329776 *
42592     +        tumor_size30_34  +     0.34369986972179 * tumor_size35_39
42593     +          +     0.10609442400314 * tumor_size40_44  +    -0.33854013913445 *
42594     +        tumor_size45_49  +    -0.02593198988185 * tumor_size5_9 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.03389920437167 * age20_29 + 0.72089986894102 * age30_39 +
0.28798904753624 * age40_49 + 0.44335242159532 * age50_59 + 0.52451229055658 * age60_69 +
0.26756102661582 * breast_quadcentral + -0.27707826700111 * breast_quadleft_low +
-0.50619587378469 * breast_quadleft_up + 0.32385655977639 * breast_quadright_low +
-0.34095159639954 * inv_nodes0_2 + 0.4491951931604 * inv_nodes12_14 + -0.18585971024084 *
inv_nodes15_17 + 0.46197576963823 * inv_nodes24_26 + 1.13872977786161 * inv_nodes3_5 +
-0.24695704463614 * inv_nodes6_8 + -1.6254898573616 * menopausege40 + -0.92858614182967 *
menopauselt40 + -0.38889900414931 * tumor_size0_4 + -1.07107947032064 * tumor_size10_14 +
0.03210466953987 * tumor_size15_19 + 2.09618876020959 * tumor_size20_24 + -0.2438896271209 *
tumor_size25_29 + -0.22402647329776 * tumor_size30_34 + 0.34369986972179 * tumor_size35_39 +
0.10609442400314 * tumor_size40_44 + -0.33854013913445 * tumor_size45_49 + -0.02593198988185 *
tumor_size5_9 ;
42595     +   H12  = H12  +     0.01685296927978 * age20_29  +     0.35307919317833 *
42596     +        age30_39  +    -0.69893461072245 * age40_49  +    -0.24523441741186 *
42597     +        age50_59  +     0.07558333902437 * age60_69  +     0.37289958336996 *
42598     +        breast_quadcentral  +     0.36773572083573 * breast_quadleft_low
42599     +          +     1.18722346758725 * breast_quadleft_up
42600     +          +     0.06349587968543 * breast_quadright_low
42601     +          +      -0.059174362514 * inv_nodes0_2  +     0.15010019016924 *
42602     +        inv_nodes12_14  +     0.21292950214496 * inv_nodes15_17
42603     +          +    -0.38120373140886 * inv_nodes24_26  +    -0.78617065785688 *
42604     +        inv_nodes3_5  +    -0.53988580512066 * inv_nodes6_8
42605     +          +     0.37876358329232 * menopausege40  +     0.98534893153269 *
42606     +        menopauselt40  +     0.26937806074223 * tumor_size0_4
42607     +          +    -0.42069656657828 * tumor_size10_14  +    -0.06792429022016 *
42608     +        tumor_size15_19  +     0.58136904760064 * tumor_size20_24
42609     +          +    -0.08769804820483 * tumor_size25_29  +     0.03374092030048 *
42610     +        tumor_size30_34  +      0.1829108052925 * tumor_size35_39
42611     +          +     0.01690568296329 * tumor_size40_44  +     0.13224531669088 *
42612     +        tumor_size45_49  +    -0.22204959796125 * tumor_size5_9 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 0.01685296927978 * age20_29 + 0.35307919317833 * age30_39 +
-0.69893461072245 * age40_49 + -0.24523441741186 * age50_59 + 0.07558333902437 * age60_69 +
0.37289958336996 * breast_quadcentral + 0.36773572083573 * breast_quadleft_low +
1.18722346758725 * breast_quadleft_up + 0.06349587968543 * breast_quadright_low +
-0.059174362514 * inv_nodes0_2 + 0.15010019016924 * inv_nodes12_14 + 0.21292950214496 *
inv_nodes15_17 + -0.38120373140886 * inv_nodes24_26 + -0.78617065785688 * inv_nodes3_5 +
-0.53988580512066 * inv_nodes6_8 + 0.37876358329232 * menopausege40 + 0.98534893153269 *
menopauselt40 + 0.26937806074223 * tumor_size0_4 + -0.42069656657828 * tumor_size10_14 +
-0.06792429022016 * tumor_size15_19 + 0.58136904760064 * tumor_size20_24 + -0.08769804820483 *
tumor_size25_29 + 0.03374092030048 * tumor_size30_34 + 0.1829108052925 * tumor_size35_39 +
0.01690568296329 * tumor_size40_44 + 0.13224531669088 * tumor_size45_49 + -0.22204959796125 *
tumor_size5_9 ;
42613     +   H13  = H13  +     0.18753630570782 * age20_29  +    -0.03350421785345 *
42614     +        age30_39  +     0.14623047416945 * age40_49  +    -0.41701616903549 *
42615     +        age50_59  +     0.89967320394619 * age60_69  +    -0.20761226509696 *
42616     +        breast_quadcentral  +    -1.04013447085256 * breast_quadleft_low
42617     +          +     -1.7692938970504 * breast_quadleft_up
42618     +          +     0.20743849640219 * breast_quadright_low
42619     +          +    -0.29974021420975 * inv_nodes0_2  +     0.85993563103741 *
42620     +        inv_nodes12_14  +     0.50250813126704 * inv_nodes15_17
42621     +          +     0.35668817181134 * inv_nodes24_26  +     1.00306353211516 *
42622     +        inv_nodes3_5  +      0.3582805661238 * inv_nodes6_8
42623     +          +     0.31231492228923 * menopausege40  +     0.61342571580869 *
42624     +        menopauselt40  +     0.20376513631778 * tumor_size0_4
42625     +          +      -0.185934474148 * tumor_size10_14  +    -0.10040191113771 *
42626     +        tumor_size15_19  +      0.1860239709766 * tumor_size20_24
42627     +          +     0.72634109614906 * tumor_size25_29  +     0.08646236423332 *
42628     +        tumor_size30_34  +     0.36660157691503 * tumor_size35_39
42629     +          +    -0.82183765104013 * tumor_size40_44  +     0.38021345065478 *
42630     +        tumor_size45_49  +    -0.06805996233089 * tumor_size5_9 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.18753630570782 * age20_29 + -0.03350421785345 * age30_39 +
0.14623047416945 * age40_49 + -0.41701616903549 * age50_59 + 0.89967320394619 * age60_69 +
-0.20761226509696 * breast_quadcentral + -1.04013447085256 * breast_quadleft_low +
-1.7692938970504 * breast_quadleft_up + 0.20743849640219 * breast_quadright_low +
-0.29974021420975 * inv_nodes0_2 + 0.85993563103741 * inv_nodes12_14 + 0.50250813126704 *
inv_nodes15_17 + 0.35668817181134 * inv_nodes24_26 + 1.00306353211516 * inv_nodes3_5 +
0.3582805661238 * inv_nodes6_8 + 0.31231492228923 * menopausege40 + 0.61342571580869 *
menopauselt40 + 0.20376513631778 * tumor_size0_4 + -0.185934474148 * tumor_size10_14 +
-0.10040191113771 * tumor_size15_19 + 0.1860239709766 * tumor_size20_24 + 0.72634109614906 *
tumor_size25_29 + 0.08646236423332 * tumor_size30_34 + 0.36660157691503 * tumor_size35_39 +
-0.82183765104013 * tumor_size40_44 + 0.38021345065478 * tumor_size45_49 + -0.06805996233089 *
tumor_size5_9 ;
42631     +   H11  =     1.87635201395074 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.87635201395074 + H11 ;
42632     +   H12  =     0.04770355881681 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.04770355881681 + H12 ;
42633     +   H13  =      -1.760700478131 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.760700478131 + H13 ;
42634     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
42635     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
42636     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
42637     +END;
MPRINT(EM_DIAGRAM):   END;
42638     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
42639     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
42640     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
42641     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
42642     +END;
MPRINT(EM_DIAGRAM):   END;
42643     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
42644     +*** Writing the Node class ;
MPRINT(EM_DIAGRAM):   *** Writing the Node class ;
42645     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
42646     +
42647     +*** Generate dummy variables for class ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for class ;
42648     +drop classrecurrence_events classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   drop classrecurrence_events classno_recurrence_events ;
42649     +label F_class = 'From: class' ;
MPRINT(EM_DIAGRAM):   label F_class = 'From: class' ;
42650     +length F_class $ 20;
MPRINT(EM_DIAGRAM):   length F_class $ 20;
42651     +F_class = put( class , $20. );
MPRINT(EM_DIAGRAM):   F_class = put( class , $20. );
42652     +%DMNORMIP( F_class )
MPRINT(DMNORMIP):   call dmnorm(F_class,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42653     +if missing( class ) then do;
MPRINT(EM_DIAGRAM):   if missing( class ) then do;
42654     +   classrecurrence_events = .;
MPRINT(EM_DIAGRAM):   classrecurrence_events = .;
42655     +   classno_recurrence_events = .;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = .;
42656     +end;
MPRINT(EM_DIAGRAM):   end;
42657     +else do;
MPRINT(EM_DIAGRAM):   else do;
42658     +   if F_class = 'NO-RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   if F_class = 'NO-RECURRENCE-EVENTS' then do;
42659     +      classrecurrence_events = 0;
MPRINT(EM_DIAGRAM):   classrecurrence_events = 0;
42660     +      classno_recurrence_events = 1;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = 1;
42661     +   end;
MPRINT(EM_DIAGRAM):   end;
42662     +   else if F_class = 'RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   else if F_class = 'RECURRENCE-EVENTS' then do;
42663     +      classrecurrence_events = 1;
MPRINT(EM_DIAGRAM):   classrecurrence_events = 1;
42664     +      classno_recurrence_events = 0;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = 0;
42665     +   end;
MPRINT(EM_DIAGRAM):   end;
42666     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42667     +      classrecurrence_events = .;
MPRINT(EM_DIAGRAM):   classrecurrence_events = .;
42668     +      classno_recurrence_events = .;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = .;
42669     +   end;
MPRINT(EM_DIAGRAM):   end;
42670     +end;
MPRINT(EM_DIAGRAM):   end;
42671     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
42672     +   P_classrecurrence_events  =     2.49224982498149 * H11
42673     +          +     1.14059984464365 * H12  +     2.20917444320522 * H13 ;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 2.49224982498149 * H11 + 1.14059984464365 *
H12 + 2.20917444320522 * H13 ;
42674     +   P_classrecurrence_events  =    -1.04524170486537 + P_classrecurrence_events
42675     +         ;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = -1.04524170486537 + P_classrecurrence_events ;
42676     +   P_classno_recurrence_events  = 0;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0;
42677     +   _MAX_ = MAX (P_classrecurrence_events , P_classno_recurrence_events );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_classrecurrence_events , P_classno_recurrence_events );
42678     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
42679     +   P_classrecurrence_events  = EXP(P_classrecurrence_events  - _MAX_);
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = EXP(P_classrecurrence_events - _MAX_);
42680     +   _SUM_ = _SUM_ + P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_classrecurrence_events ;
42681     +   P_classno_recurrence_events  = EXP(P_classno_recurrence_events  - _MAX_);
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = EXP(P_classno_recurrence_events - _MAX_);
42682     +   _SUM_ = _SUM_ + P_classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_classno_recurrence_events ;
42683     +   P_classrecurrence_events  = P_classrecurrence_events  / _SUM_;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = P_classrecurrence_events / _SUM_;
42684     +   P_classno_recurrence_events  = P_classno_recurrence_events  / _SUM_;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = P_classno_recurrence_events / _SUM_;
42685     +END;
MPRINT(EM_DIAGRAM):   END;
42686     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
42687     +   P_classrecurrence_events  = .;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = .;
42688     +   P_classno_recurrence_events  = .;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = .;
42689     +END;
MPRINT(EM_DIAGRAM):   END;
42690     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
42691     +   P_classrecurrence_events  =     0.29203539823008;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 0.29203539823008;
42692     +   P_classno_recurrence_events  =     0.70796460176991;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0.70796460176991;
42693     +END;
MPRINT(EM_DIAGRAM):   END;
42694     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
42695     +*** Writing the Residuals  of the Node class ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node class ;
42696     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
42697     +IF MISSING( classrecurrence_events ) THEN R_classrecurrence_events  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( classrecurrence_events ) THEN R_classrecurrence_events = . ;
42698     +ELSE R_classrecurrence_events  = classrecurrence_events  -
42699     +        P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   ELSE R_classrecurrence_events = classrecurrence_events -
P_classrecurrence_events ;
42700     +IF MISSING( classno_recurrence_events ) THEN R_classno_recurrence_events
42701     +          = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( classno_recurrence_events ) THEN R_classno_recurrence_events
= . ;
42702     +ELSE R_classno_recurrence_events  = classno_recurrence_events  -
42703     +        P_classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   ELSE R_classno_recurrence_events = classno_recurrence_events -
P_classno_recurrence_events ;
42704     +
42705     +
42706     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
42707     +label D_CLASS = 'Decision: class' ;
MPRINT(EM_DIAGRAM):   label D_CLASS = 'Decision: class' ;
42708     +label EP_CLASS = 'Expected Profit: class' ;
MPRINT(EM_DIAGRAM):   label EP_CLASS = 'Expected Profit: class' ;
42709     +label BP_CLASS = 'Best Profit: class' ;
MPRINT(EM_DIAGRAM):   label BP_CLASS = 'Best Profit: class' ;
42710     +label CP_CLASS = 'Computed Profit: class' ;
MPRINT(EM_DIAGRAM):   label CP_CLASS = 'Computed Profit: class' ;
42711     +
42712     +length D_CLASS $ 20;
MPRINT(EM_DIAGRAM):   length D_CLASS $ 20;
42713     +
42714     +D_CLASS = ' ';
MPRINT(EM_DIAGRAM):   D_CLASS = ' ';
42715     +EP_CLASS = .;
MPRINT(EM_DIAGRAM):   EP_CLASS = .;
42716     +BP_CLASS = .;
MPRINT(EM_DIAGRAM):   BP_CLASS = .;
42717     +CP_CLASS = .;
MPRINT(EM_DIAGRAM):   CP_CLASS = .;
42718     +
42719     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
42720     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
42721     +
42722     +D_CLASS = 'RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   D_CLASS = 'RECURRENCE-EVENTS' ;
42723     +EP_CLASS = P_classrecurrence_events * 1 + P_classno_recurrence_events * 0;
MPRINT(EM_DIAGRAM):   EP_CLASS = P_classrecurrence_events * 1 + P_classno_recurrence_events *
0;
42724     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
42725     +_sum = P_classrecurrence_events * 0 + P_classno_recurrence_events * 1;
MPRINT(EM_DIAGRAM):   _sum = P_classrecurrence_events * 0 + P_classno_recurrence_events * 1;
42726     +if _sum > EP_CLASS + 4.547474E-13 then do;
MPRINT(EM_DIAGRAM):   if _sum > EP_CLASS + 4.547474E-13 then do;
42727     +   EP_CLASS = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EP_CLASS = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
42728     +   D_CLASS = 'NO-RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   D_CLASS = 'NO-RECURRENCE-EVENTS' ;
42729     +end;
MPRINT(EM_DIAGRAM):   end;
42730     +
42731     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
42732     +array NEURALdema [2,2] _temporary_ (
42733     +/* row 1 */  1 0
42734     +/* row 2 */  0 1
42735     +);
MPRINT(EM_DIAGRAM):   array NEURALdema [2,2] _temporary_ ( 1 0 0 1 );
42736     +
42737     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
42738     +drop _tarnum; select( F_class );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_class );
42739     +   when('RECURRENCE-EVENTS' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('RECURRENCE-EVENTS' ) _tarnum = 1;
42740     +   when('NO-RECURRENCE-EVENTS' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('NO-RECURRENCE-EVENTS' ) _tarnum = 2;
42741     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
42742     +end;
MPRINT(EM_DIAGRAM):   end;
42743     +if _tarnum <= 0 then goto NEURALdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto NEURALdeex;
42744     +
42745     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
42746     +CP_CLASS = NEURALdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CP_CLASS = NEURALdema [_tarnum,_decnum];
42747     +
42748     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
42749     +array NEURALdebe [2] _temporary_ ( 1 1);
MPRINT(EM_DIAGRAM):   array NEURALdebe [2] _temporary_ ( 1 1);
42750     +BP_CLASS = NEURALdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BP_CLASS = NEURALdebe [_tarnum];
42751     +
42752     +
42753     +NEURALdeex:;
MPRINT(EM_DIAGRAM):   NEURALdeex:;
42754     +
42755     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
42756     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
42757     +*** Writing the I_class  AND U_class ;
MPRINT(EM_DIAGRAM):   *** Writing the I_class AND U_class ;
42758     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
42759     +_MAXP_ = P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_classrecurrence_events ;
42760     +I_class  = "RECURRENCE-EVENTS   " ;
MPRINT(EM_DIAGRAM):   I_class = "RECURRENCE-EVENTS   " ;
42761     +U_class  = "recurrence-events   " ;
MPRINT(EM_DIAGRAM):   U_class = "recurrence-events   " ;
42762     +IF( _MAXP_ LT P_classno_recurrence_events  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_classno_recurrence_events ) THEN DO;
42763     +   _MAXP_ = P_classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_classno_recurrence_events ;
42764     +   I_class  = "NO-RECURRENCE-EVENTS" ;
MPRINT(EM_DIAGRAM):   I_class = "NO-RECURRENCE-EVENTS" ;
42765     +   U_class  = "no-recurrence-events" ;
MPRINT(EM_DIAGRAM):   U_class = "no-recurrence-events" ;
42766     +END;
MPRINT(EM_DIAGRAM):   END;
42767     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
42768     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
42769     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
42770     +drop
42771     +H11
42772     +H12
42773     +H13
42774     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
42775     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
42776      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
42777      quit;
42778      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
42779      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
42780      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
42781      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta
"D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural_TRAIN out=WORK.M2KES98Q noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2KES98Q;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2KES98Q(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2KES98Q;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2KES98Q;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3JOTD93 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3JOTD93;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3JOTD93;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0R3KIUR(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3JOTD93;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3JOTD93;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3JOTD93;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE =
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID',
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3JOTD93;
MPRINT(EMADVISECOLUMNS):   set WORK.M3JOTD93;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Impt_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_CLASSRECURRENCE_EVENTS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("R_CLASSRECURRENCE_EVENTS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("P_CLASSNO_RECURRENCE_EVENTS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("R_CLASSNO_RECURRENCE_EVENTS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("F_CLASS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("I_CLASS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("U_CLASS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("D_CLASS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("EP_CLASS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("CP_CLASS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("BP_CLASS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("CLASS") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
43138      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
43139      set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
43140      where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
43141      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE (DATA='Neural') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
43142      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMINFO;
43143      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
43144      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
43145      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
43149      run;
43150      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
43151      set EMWS1.Neural_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO WORK.MODELTEMP_INFO;
43152      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
43153      proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
43154      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
43155      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
43156      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
43157      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
43158      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
43159      proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
43160      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
43161      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
43162      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
43163      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
43164      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
43165      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
43166      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
43167      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
43168      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
43169      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "02:26:49 o'clock"
);
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                April 16, 2022
Time:                02:26:49 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0FZZ8DO
"D:\\127097210_Pahuja\Workspaces\EMWS1\Neural\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0FZZ8DO new;
MPRINT(EM_DIAGRAM):   run;
43193      data EMWS1.Neural_EMOUTFIT(rename=(_NAME_=TARGET));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMOUTFIT(rename=(_NAME_=TARGET));
43194      set EMWS1.Neural_OUTFIT(where=(_NAME_ eq 'OVERALL'));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTFIT(where=(_NAME_ eq 'OVERALL'));
43195      label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _NAME_ = "Target";
43196      if _NAME_='OVERALL' then _NAME_='class';
MPRINT(EM_DIAGRAM):   if _NAME_='OVERALL' then _NAME_='class';
43197      drop _ITER_;
MPRINT(EM_DIAGRAM):   drop _ITER_;
43198      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_OUTFIT.
      WHERE _NAME_='OVERALL';
NOTE: The data set EMWS1.NEURAL_EMOUTFIT has 1 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
43199      proc sort data=EMWS1.Neural_EMOUTFIT nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_EMOUTFIT nodupkey;
43200      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
43201      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL_EMOUTFIT has 1 observations and 39 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
43202      data EMWS1.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMOUTFIT;
43203      set EMWS1.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMOUTFIT;
43204      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
43205      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
43205    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
43206      if upcase(TARGET) eq "CLASS" then TargetLabel = 'class';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "CLASS" then TargetLabel = 'class';
43207      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: The data set EMWS1.NEURAL_EMOUTFIT has 1 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
43208      proc sort data=EMWS1.Neural_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_EMREPORTFIT nothreads;
43209      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
43210      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS1.NEURAL_EMREPORTFIT.
NOTE: The data set EMWS1.NEURAL_EMREPORTFIT has 23 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
43211      %let _EMwarndup = 0;
43212      %let _EMtargetdup =;
43213      %let _EMASEtargetdup =;
43214      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
43215      set EMWS1.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMOUTFIT;
43216      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
43217      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
43218      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
43219      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
43220      end;
MPRINT(EM_DIAGRAM):   end;
43221      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
43222      proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
43223      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
43224      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
43225      proc sort data=EMWS1.Neural_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_VariableSet out=WORK.SUBSETVARSET(keep=NAME
REPORT);
43226      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
43227      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.NEURAL_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
43228      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
43229      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
43230      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
43231      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 13 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
43232      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
43233      set EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_CMeta_TRAIN;
43234      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
43234    ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
43235      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
43236      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
43237      set EMWS1.Neural_TRAIN(keep=
43238      BP_CLASS
43239      CP_CLASS
43240      D_CLASS
43241      EP_CLASS
43242      F_class
43243      I_class
43244      P_classno_recurrence_events
43245      P_classrecurrence_events
43246      R_classno_recurrence_events
43247      R_classrecurrence_events
43248      U_class
43249      _WARN_
43250      class
43251      );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_TRAIN(keep= BP_CLASS CP_CLASS D_CLASS EP_CLASS F_class
I_class P_classno_recurrence_events P_classrecurrence_events R_classno_recurrence_events
R_classrecurrence_events U_class _WARN_ class );
43252      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 227 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
NOTE: There were 227 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 227 observations read from the data set EMWS1.NEURAL_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 227 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_class*F_class / out = WORK.Neural_1N4KSUD nocol norow outpct;
MPRINT(EM_DIAGRAM):   table D_class*F_class / out = WORK.Neural_32QBMXI nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_1N4KSUD;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural_1N4KSUD(rename=(F_class=FROM I_class=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "class";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "CLASS" then TARGETLABEL = 'class';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Neural_1N4KSUD;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural_1N4KSUD;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_32QBMXI;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 dataRole target $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $9;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural_32QBMXI(rename=(F_class=FROM D_class=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'DECISION' DATAROLE "TRAIN" TARGET "class";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "CLASS" then TARGETLABEL = 'class';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMCLASSIFICATION WORK.Neural_32QBMXI;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='RECURRENCE-EVENTS' and INTO='RECURRENCE-EVENTS' then
MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='RECURRENCE-EVENTS' and INTO ne 'RECURRENCE-EVENTS' then
MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne 'RECURRENCE-EVENTS' and INTO='RECURRENCE-EVENTS' then
MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'RECURRENCE-EVENTS' and INTO ne 'RECURRENCE-EVENTS' then
MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "CLASS" then TARGETLABEL = 'class';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_class_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_class") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_class") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_class D_class ;
 
MPRINT(EM_ASSESS):   VAR P_classrecurrence_events _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_class") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("RECURRENCE-EVENTS") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "RECURRENCE-EVENTS" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "D_class" > " " AND UPCASE(NAME) = UPCASE("D_class") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_classrecurrence_events") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_class P_classrecurrence_events EP_CLASS
CP_CLASS BP_CLASS _tmpfreqvar_ D_class );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_class ) = "RECURRENCE-EVENTS" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_classrecurrence_events D_class
NTARGET _tmpfreqvar_ EP_CLASS CP_CLASS BP_CLASS WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_classrecurrence_events D_class ;
MPRINT(EM_ASSESS):   VAR NTARGET EP_CLASS CP_CLASS BP_CLASS ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANEPTARGET
_MEANCPTARGET _MEANBPTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP MNEP_TARGET
MINEP_TARGET MAXEP_TARGET TOTALEP_TARGET CUMULATIVEEP CUMULATIVETOTALEP MNCP_TARGET
MINCP_TARGET MAXCP_TARGET CP_TARGET TOTALCP_TARGET CUMULATIVECP CUMULATIVETOTALCP BASECP
BASECUMTOTALCP BASECUMULATIVECP BASETOTALCP BESTTOTALBP BESTCUMULATIVEBP BESTCUMTOTALBP BESTBP
) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE
SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS NUMDECISION1 NUMDECISION2 SCR_MNPROB
SCR_MINPROB SCR_MAXPROB SCR_EPMEAN SCR_EPMIN SCR_EPMAX SCR_CPMEAN SCR_CPMIN SCR_CPMAX ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 CUMPROFIT1 - CUMPROFIT20 0 CUMBPROFIT1 -
CUMBPROFIT20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 - FALSEPOS100 0
FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 -
FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.295154185 _NEVENTS 67 _NNONEVENTS 160 TARGET
"NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   RETAIN EPTARGET1 - EPTARGET20 0 MINEPTARGET1 - MINEPTARGET20 0
MAXEPTARGET1 - MAXEPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY EPTARGET (20) EPTARGET1 - EPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINEPTARGET (20) MINEPTARGET1 - MINEPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXEPTARGET (20) MAXEPTARGET1 - MAXEPTARGET20;
MPRINT(EM_ASSESS):   DROP EPTARGET1 - EPTARGET20 _MEANEPTARGET MINEPTARGET1 - MINEPTARGET20
MAXEPTARGET1 - MAXEPTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN CPTARGET1 - CPTARGET20 0 MINCPTARGET1 - MINCPTARGET20 0
MAXCPTARGET1 - MAXCPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY CPTARGET (20) CPTARGET1 - CPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINCPTARGET (20) MINCPTARGET1 - MINCPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXCPTARGET (20) MAXCPTARGET1 - MAXCPTARGET20;
MPRINT(EM_ASSESS):   DROP CPTARGET1 - CPTARGET20 _MEANCPTARGET MINCPTARGET1 - MINCPTARGET20
MAXCPTARGET1 - MAXCPTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN BPTARGET1 - BPTARGET20 0 MINBPTARGET1 - MINBPTARGET20 0
MAXBPTARGET1 - MAXBPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY BPTARGET (20) BPTARGET1 - BPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINBPTARGET (20) MINBPTARGET1 - MINBPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXBPTARGET (20) MAXBPTARGET1 - MAXBPTARGET20;
MPRINT(EM_ASSESS):   DROP BPTARGET1 - BPTARGET20 _MEANBPTARGET MINBPTARGET1 - MINBPTARGET20
MAXBPTARGET1 - MAXBPTARGET20 ;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   RETAIN D_TARGET1_1 - D_TARGET1_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET1 (100) D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   DROP D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   RETAIN D_TARGET2_1 - D_TARGET2_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET2 (100) D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   DROP D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN SCR_EPMEAN1- SCR_EPMEAN100 0 SCR_EPMIN1 - SCR_EPMIN100 1
SCR_EPMAX1 - SCR_EPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMEANS (100) SCR_EPMEAN1 - SCR_EPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMINS (100) SCR_EPMIN1 - SCR_EPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMAXS (100) SCR_EPMAX1 - SCR_EPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_EPMEAN1 - SCR_EPMEAN100 SCR_EPMIN1 - SCR_EPMIN100 SCR_EPMAX1 -
SCR_EPMAX100;
MPRINT(EM_ASSESS):   RETAIN SCR_CPMEAN1- SCR_CPMEAN100 0 SCR_CPMIN1 - SCR_CPMIN100 1
SCR_CPMAX1 - SCR_CPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMEANS (100) SCR_CPMEAN1 - SCR_CPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMINS (100) SCR_CPMIN1 - SCR_CPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMAXS (100) SCR_CPMAX1 - SCR_CPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_CPMEAN1 - SCR_CPMEAN100 SCR_CPMIN1 - SCR_CPMIN100 SCR_CPMAX1 -
SCR_CPMAX100;
MPRINT(EM_ASSESS):   RETAIN SCR_BPMEAN1- SCR_BPMEAN100 0 SCR_BPMIN1 - SCR_BPMIN100 1
SCR_BPMAX1 - SCR_BPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMEANS (100) SCR_BPMEAN1 - SCR_BPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMINS (100) SCR_BPMIN1 - SCR_BPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMAXS (100) SCR_BPMAX1 - SCR_BPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_BPMEAN1 - SCR_BPMEAN100 SCR_BPMIN1 - SCR_BPMIN100 SCR_BPMAX1 -
SCR_BPMAX100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 227));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_classrecurrence_events );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_classrecurrence_events );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_classrecurrence_events *
_WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   EPTARGET (DECILE) = SUM ( EPTARGET (DECILE) , _MEANEPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINEPTARGET (DECILE) = MIN (MINEPTARGET (DECILE), _MEANEPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   MAXEPTARGET (DECILE) = MAX (MAXEPTARGET (DECILE), _MEANEPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   CPTARGET (DECILE) = SUM ( CPTARGET (DECILE) , _MEANCPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINCPTARGET (DECILE) = MIN (MINCPTARGET (DECILE), _MEANCPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   MAXCPTARGET (DECILE) = MAX (MAXCPTARGET (DECILE), _MEANCPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   BPTARGET (DECILE) = SUM ( BPTARGET (DECILE) , _MEANBPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINBPTARGET (DECILE) = MIN (MINBPTARGET (DECILE), _MEANBPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   MAXBPTARGET (DECILE) = MAX (MAXBPTARGET (DECILE), _MEANBPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_classrecurrence_events * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_classrecurrence_events * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_classrecurrence_events);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_classrecurrence_events);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   D_class = TRANSLATE (D_class, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   IF D_class = "NO-RECURRENCE-EVENTS" THEN D_TARGET1 ( SLOT ) = SUM
(D_TARGET1 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   IF D_class = "RECURRENCE-EVENTS" THEN D_TARGET2 ( SLOT ) = SUM (D_TARGET2
(SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_classrecurrence_events
* _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT),
P_classrecurrence_events );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT),
P_classrecurrence_events );
MPRINT(EM_ASSESS):   SCR_EPMEANS ( SLOT ) = MEAN (SCR_EPMEANS (SLOT), _MEANEPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_EPMINS ( SLOT ) = MIN (SCR_EPMINS (SLOT), _MEANEPTARGET );
MPRINT(EM_ASSESS):   SCR_EPMAXS ( SLOT ) = MAX (SCR_EPMAXS (SLOT), _MEANEPTARGET );
MPRINT(EM_ASSESS):   SCR_CPMEANS ( SLOT ) = MEAN (SCR_CPMEANS (SLOT), _MEANCPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_CPMINS ( SLOT ) = MIN (SCR_CPMINS (SLOT), _MEANCPTARGET );
MPRINT(EM_ASSESS):   SCR_CPMAXS ( SLOT ) = MAX (SCR_CPMAXS (SLOT), _MEANCPTARGET );
MPRINT(EM_ASSESS):   SCR_BPMEANS ( SLOT ) = MEAN (SCR_BPMEANS (SLOT), _MEANBPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_BPMINS ( SLOT ) = MIN (SCR_BPMINS (SLOT), _MEANBPTARGET );
MPRINT(EM_ASSESS):   SCR_BPMAXS ( SLOT ) = MAX (SCR_BPMAXS (SLOT), _MEANBPTARGET );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "RECURRENCE-EVENTS" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0012981016 OVLMAX 0.986309765 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   SUMEP = SUM (OF EPTARGET1 - EPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMEP ;
MPRINT(EM_ASSESS):   SUMCP = SUM (OF CPTARGET1 - CPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMCP ;
MPRINT(EM_ASSESS):   SUMBP = SUM (OF BPTARGET1 - BPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMBP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 227 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(227/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 227)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 227/20) ) / (
AVGNUMRESP / (227/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 227 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 227 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 227/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 227/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   TOTALEP_TARGET = EPTARGET (GROUP);
MPRINT(EM_ASSESS):   EP_TARGET = TOTALEP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALEP + EPTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVEEP = CUMULATIVETOTALEP / C_NUMOBS;
MPRINT(EM_ASSESS):   MINEP_TARGET = MINEPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXEP_TARGET = MAXEPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNEP_TARGET = EP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXEP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXEP_TARGET + MAXEP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMEP >= C_MAXEP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTEP = MAXEP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALEP = BESTEP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTEP = MIN (MAXEP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTEP < 0 THEN BESTEP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALEP = BESTEP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALEP + BESTTOTALEP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMEP - C_MAXEP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEEP = BESTCUMTOTALEP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEEP = SUMEP / 227;
MPRINT(EM_ASSESS):   BASECUMULATIVEEP + BASEEP;
MPRINT(EM_ASSESS):   BASETOTALEP = SUMEP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALEP + BASETOTALEP;
MPRINT(EM_ASSESS):   TOTALCP_TARGET = CPTARGET (GROUP);
MPRINT(EM_ASSESS):   CP_TARGET = TOTALCP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALCP + CPTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVECP = CUMULATIVETOTALCP / C_NUMOBS;
MPRINT(EM_ASSESS):   MINCP_TARGET = MINCPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXCP_TARGET = MAXCPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNCP_TARGET = CP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXCP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXCP_TARGET + MAXCP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMCP >= C_MAXCP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTCP = MAXCP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALCP = BESTCP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTCP = MIN (MAXCP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTCP < 0 THEN BESTCP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALCP = BESTCP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALCP + BESTTOTALCP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMCP - C_MAXCP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVECP = BESTCUMTOTALCP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASECP = SUMCP / 227;
MPRINT(EM_ASSESS):   BASECUMULATIVECP + BASECP;
MPRINT(EM_ASSESS):   BASETOTALCP = SUMCP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALCP + BASETOTALCP;
MPRINT(EM_ASSESS):   TOTALBP_TARGET = BPTARGET (GROUP);
MPRINT(EM_ASSESS):   BP_TARGET = TOTALBP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   MINBP_TARGET = MINBPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXBP_TARGET = MAXBPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNBP_TARGET = BP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXBP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXBP_TARGET + MAXBP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMBP >= C_MAXBP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTBP = MAXBP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALBP = BESTBP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTBP = MIN (MAXBP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTBP < 0 THEN BESTBP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALBP = BESTBP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALBP + BESTTOTALBP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMBP - C_MAXBP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEBP = BESTCUMTOTALBP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEBP = SUMBP / 227;
MPRINT(EM_ASSESS):   BASECUMULATIVEBP + BASEBP;
MPRINT(EM_ASSESS):   BASETOTALBP = SUMBP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALBP + BASETOTALBP;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_96 - D_TARGET1_100);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_96 - D_TARGET2_100);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN96 - SCR_EPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN96 - SCR_EPMIN100);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX96 - SCR_EPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN96 - SCR_CPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN96 - SCR_CPMIN100);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX96 - SCR_CPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN96 - SCR_BPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN96 - SCR_BPMIN100);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX96 - SCR_BPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_91 - D_TARGET1_95);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_91 - D_TARGET2_95);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN91 - SCR_EPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN91 - SCR_EPMIN95);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX91 - SCR_EPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN91 - SCR_CPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN91 - SCR_CPMIN95);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX91 - SCR_CPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN91 - SCR_BPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN91 - SCR_BPMIN95);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX91 - SCR_BPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_86 - D_TARGET1_90);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_86 - D_TARGET2_90);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN86 - SCR_EPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN86 - SCR_EPMIN90);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX86 - SCR_EPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN86 - SCR_CPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN86 - SCR_CPMIN90);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX86 - SCR_CPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN86 - SCR_BPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN86 - SCR_BPMIN90);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX86 - SCR_BPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_81 - D_TARGET1_85);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_81 - D_TARGET2_85);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN81 - SCR_EPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN81 - SCR_EPMIN85);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX81 - SCR_EPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN81 - SCR_CPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN81 - SCR_CPMIN85);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX81 - SCR_CPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN81 - SCR_BPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN81 - SCR_BPMIN85);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX81 - SCR_BPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_76 - D_TARGET1_80);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_76 - D_TARGET2_80);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN76 - SCR_EPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN76 - SCR_EPMIN80);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX76 - SCR_EPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN76 - SCR_CPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN76 - SCR_CPMIN80);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX76 - SCR_CPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN76 - SCR_BPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN76 - SCR_BPMIN80);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX76 - SCR_BPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_71 - D_TARGET1_75);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_71 - D_TARGET2_75);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN71 - SCR_EPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN71 - SCR_EPMIN75);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX71 - SCR_EPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN71 - SCR_CPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN71 - SCR_CPMIN75);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX71 - SCR_CPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN71 - SCR_BPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN71 - SCR_BPMIN75);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX71 - SCR_BPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_66 - D_TARGET1_70);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_66 - D_TARGET2_70);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN66 - SCR_EPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN66 - SCR_EPMIN70);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX66 - SCR_EPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN66 - SCR_CPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN66 - SCR_CPMIN70);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX66 - SCR_CPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN66 - SCR_BPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN66 - SCR_BPMIN70);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX66 - SCR_BPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_61 - D_TARGET1_65);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_61 - D_TARGET2_65);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN61 - SCR_EPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN61 - SCR_EPMIN65);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX61 - SCR_EPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN61 - SCR_CPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN61 - SCR_CPMIN65);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX61 - SCR_CPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN61 - SCR_BPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN61 - SCR_BPMIN65);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX61 - SCR_BPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_56 - D_TARGET1_60);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_56 - D_TARGET2_60);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN56 - SCR_EPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN56 - SCR_EPMIN60);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX56 - SCR_EPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN56 - SCR_CPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN56 - SCR_CPMIN60);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX56 - SCR_CPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN56 - SCR_BPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN56 - SCR_BPMIN60);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX56 - SCR_BPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_51 - D_TARGET1_55);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_51 - D_TARGET2_55);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN51 - SCR_EPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN51 - SCR_EPMIN55);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX51 - SCR_EPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN51 - SCR_CPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN51 - SCR_CPMIN55);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX51 - SCR_CPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN51 - SCR_BPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN51 - SCR_BPMIN55);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX51 - SCR_BPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_46 - D_TARGET1_50);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_46 - D_TARGET2_50);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN46 - SCR_EPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN46 - SCR_EPMIN50);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX46 - SCR_EPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN46 - SCR_CPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN46 - SCR_CPMIN50);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX46 - SCR_CPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN46 - SCR_BPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN46 - SCR_BPMIN50);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX46 - SCR_BPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_41 - D_TARGET1_45);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_41 - D_TARGET2_45);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN41 - SCR_EPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN41 - SCR_EPMIN45);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX41 - SCR_EPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN41 - SCR_CPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN41 - SCR_CPMIN45);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX41 - SCR_CPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN41 - SCR_BPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN41 - SCR_BPMIN45);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX41 - SCR_BPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_36 - D_TARGET1_40);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_36 - D_TARGET2_40);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN36 - SCR_EPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN36 - SCR_EPMIN40);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX36 - SCR_EPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN36 - SCR_CPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN36 - SCR_CPMIN40);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX36 - SCR_CPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN36 - SCR_BPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN36 - SCR_BPMIN40);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX36 - SCR_BPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_31 - D_TARGET1_35);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_31 - D_TARGET2_35);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN31 - SCR_EPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN31 - SCR_EPMIN35);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX31 - SCR_EPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN31 - SCR_CPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN31 - SCR_CPMIN35);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX31 - SCR_CPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN31 - SCR_BPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN31 - SCR_BPMIN35);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX31 - SCR_BPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_26 - D_TARGET1_30);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_26 - D_TARGET2_30);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN26 - SCR_EPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN26 - SCR_EPMIN30);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX26 - SCR_EPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN26 - SCR_CPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN26 - SCR_CPMIN30);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX26 - SCR_CPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN26 - SCR_BPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN26 - SCR_BPMIN30);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX26 - SCR_BPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_21 - D_TARGET1_25);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_21 - D_TARGET2_25);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN21 - SCR_EPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN21 - SCR_EPMIN25);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX21 - SCR_EPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN21 - SCR_CPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN21 - SCR_CPMIN25);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX21 - SCR_CPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN21 - SCR_BPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN21 - SCR_BPMIN25);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX21 - SCR_BPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_16 - D_TARGET1_20);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_16 - D_TARGET2_20);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN16 - SCR_EPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN16 - SCR_EPMIN20);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX16 - SCR_EPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN16 - SCR_CPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN16 - SCR_CPMIN20);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX16 - SCR_CPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN16 - SCR_BPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN16 - SCR_BPMIN20);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX16 - SCR_BPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_11 - D_TARGET1_15);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_11 - D_TARGET2_15);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN11 - SCR_EPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN11 - SCR_EPMIN15);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX11 - SCR_EPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN11 - SCR_CPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN11 - SCR_CPMIN15);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX11 - SCR_CPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN11 - SCR_BPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN11 - SCR_BPMIN15);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX11 - SCR_BPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_6 - D_TARGET1_10);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_6 - D_TARGET2_10);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN6 - SCR_EPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN6 - SCR_EPMIN10);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX6 - SCR_EPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN6 - SCR_CPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN6 - SCR_CPMIN10);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX6 - SCR_CPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN6 - SCR_BPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN6 - SCR_BPMIN10);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX6 - SCR_BPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_1 - D_TARGET1_5);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_1 - D_TARGET2_5);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN1 - SCR_EPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN1 - SCR_EPMIN5);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX1 - SCR_EPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN1 - SCR_CPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN1 - SCR_CPMIN5);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX1 - SCR_CPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN1 - SCR_BPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN1 - SCR_BPMIN5);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX1 - SCR_BPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 227;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS SCR_EPMEAN =
_MEANEP_ SCR_EPMAX = _MAXEP_ SCR_EPMIN = _MINEP_ SCR_CPMEAN = _MEANCP_ SCR_CPMAX = _MAXCP_
SCR_CPMIN = _MINCP_ NUMDECISION1 = DECISION1 NUMDECISION2 = DECISION2 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" _MEANCP_ =
"Mean Computed Profit" _MAXCP_ = "Max Computed Profit" _MINCP_ = "Min Computed Profit" _MAXEP_
= "Expected profit: upper bound" _MINEP_ = "Expected profit: lower bound" _MEANEP_ = "Mean
Expected Profit" DECISION1= "Report: Number of Decisions = 1" DECISION2= "Report: Number of
Decisions = 2" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC
BASECP = BASEPROFIT BASECUMTOTALCP = BASECUMULATIVETOTALPROFIT BASECUMULATIVECP =
BASECUMULATIVEPROFIT MAXCP_TARGET = _MAXCP_ MNCP_TARGET = _MEANCP_ MINCP_TARGET = _MINCP_
BASETOTALCP = BASETOTALPROFIT CUMULATIVECP = AVGCUMULATIVEPROFIT CUMULATIVETOTALCP=
CUMULATIVETOTALPROFIT CP_TARGET = PROFIT TOTALCP_TARGET = TOTALPROFIT MAXEP_TARGET = _MAXEP_
MINEP_TARGET = _MINEP_ MNEP_TARGET = _MEANEP_ CUMULATIVEEP = CUMULATIVEEXPECTEDPROFIT
CUMULATIVETOTALEP= CUMULATIVETOTALEXPPROFIT TOTALEP_TARGET = TOTALEXPPROFIT BESTBP =
BESTPROFIT BESTCUMTOTALBP = BESTCUMULATIVETOTALPROFIT BESTCUMULATIVEBP = BESTCUMULATIVEPROFIT
BESTTOTALBP = BESTTOTALPROFIT ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MEANCP_ = "Mean Computed Profit" _MAXCP_ = "Max Computed Profit"
_MINCP_ = "Min Computed Profit" AVGCUMULATIVEPROFIT = "Average Cumulative Computed Profit"
CUMULATIVETOTALPROFIT = "Cumulative Total Computed Profit" BESTTOTALPROFIT = "Best Total
Profit" BESTPROFIT = "Best Profit" BASEPROFIT = "Baseline Profit" BASECUMULATIVEPROFIT =
"Baseline Cumulative Profit" BASECUMULATIVETOTALPROFIT = "Baseline Cumulative Total Profit"
BASEPROFIT = "Baseline Profit" BASETOTALPROFIT = "Baseline Total Profit" BESTCUMULATIVEPROFIT
= "Best Cumulative Profit" BESTCUMULATIVETOTALPROFIT = "Best Cumulative Total Profit" PROFIT =
"Average Computed Profit" TOTALPROFIT = "Total Computed Profit" _MEANEP_ = "Mean Expected
Profit" _MINEP_ = "Min Expected Profit" _MAXEP_ = "Max Expected Profit"
CUMULATIVETOTALEXPPROFIT = "Cumulative Total Expected Profit" CUMULATIVEEXPECTEDPROFIT =
"Cumulative Expected Profit" TOTALEXPPROFIT = "Total Expected Profit" _MAXP_ = "Max Posterior
Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability"
BASECAP = "Baseline % Captured Response" BASECAPC = "Baseline Cumulative % Captured Response"
BASENUMBEROFEVENTS = "Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT =
"Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response"
BASERESPC = "Baseline Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP =
"Best % Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best
Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT = "Best
Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "%
Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT
= "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of Nonevents" N = "Number of
Observations" EVENT = "Event" RESPC = "Cumulative % Response" NUMBEROFEVENTS = "Number of
Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "class";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'class';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "class";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'class';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
47569      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
47570      set EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_CMeta_TRAIN;
47571      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
47571    ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
47572      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
47573      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
47574      set EMWS1.Neural_VALIDATE(keep=
47575      BP_CLASS
47576      CP_CLASS
47577      D_CLASS
47578      EP_CLASS
47579      F_class
47580      I_class
47581      P_classno_recurrence_events
47582      P_classrecurrence_events
47583      R_classno_recurrence_events
47584      R_classrecurrence_events
47585      U_class
47586      _WARN_
47587      class
47588      );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VALIDATE(keep= BP_CLASS CP_CLASS D_CLASS EP_CLASS
F_class I_class P_classno_recurrence_events P_classrecurrence_events
R_classno_recurrence_events R_classrecurrence_events U_class _WARN_ class );
47589      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 59 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 59 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 59 observations read from the data set EMWS1.NEURAL_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 59 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_class*F_class / out = WORK.Neural_1OAWDCG nocol norow outpct;
MPRINT(EM_DIAGRAM):   table D_class*F_class / out = WORK.Neural_17J8CKC nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_1OAWDCG;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural_1OAWDCG(rename=(F_class=FROM I_class=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "class";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "CLASS" then TARGETLABEL = 'class';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMCLASSIFICATION WORK.Neural_1OAWDCG;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural_1OAWDCG;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_17J8CKC;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 dataRole target $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $9;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural_17J8CKC(rename=(F_class=FROM D_class=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'DECISION' DATAROLE "VALIDATE" TARGET "class";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "CLASS" then TARGETLABEL = 'class';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMCLASSIFICATION WORK.Neural_17J8CKC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='RECURRENCE-EVENTS' and INTO='RECURRENCE-EVENTS' then
MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='RECURRENCE-EVENTS' and INTO ne 'RECURRENCE-EVENTS' then
MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne 'RECURRENCE-EVENTS' and INTO='RECURRENCE-EVENTS' then
MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'RECURRENCE-EVENTS' and INTO ne 'RECURRENCE-EVENTS' then
MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "CLASS" then TARGETLABEL = 'class';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_class_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_class") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_class") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_class D_class ;
 
MPRINT(EM_ASSESS):   VAR P_classrecurrence_events _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_class") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("RECURRENCE-EVENTS") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "RECURRENCE-EVENTS" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "D_class" > " " AND UPCASE(NAME) = UPCASE("D_class") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_classrecurrence_events") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_class P_classrecurrence_events EP_CLASS
CP_CLASS BP_CLASS _tmpfreqvar_ D_class );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_class ) = "RECURRENCE-EVENTS" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_classrecurrence_events D_class
NTARGET _tmpfreqvar_ EP_CLASS CP_CLASS BP_CLASS WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_classrecurrence_events D_class ;
MPRINT(EM_ASSESS):   VAR NTARGET EP_CLASS CP_CLASS BP_CLASS ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANEPTARGET
_MEANCPTARGET _MEANBPTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP MNEP_TARGET
MINEP_TARGET MAXEP_TARGET TOTALEP_TARGET CUMULATIVEEP CUMULATIVETOTALEP MNCP_TARGET
MINCP_TARGET MAXCP_TARGET CP_TARGET TOTALCP_TARGET CUMULATIVECP CUMULATIVETOTALCP BASECP
BASECUMTOTALCP BASECUMULATIVECP BASETOTALCP BESTTOTALBP BESTCUMULATIVEBP BESTCUMTOTALBP BESTBP
) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE
SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS NUMDECISION1 NUMDECISION2 SCR_MNPROB
SCR_MINPROB SCR_MAXPROB SCR_EPMEAN SCR_EPMIN SCR_EPMAX SCR_CPMEAN SCR_CPMIN SCR_CPMAX ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 CUMPROFIT1 - CUMPROFIT20 0 CUMBPROFIT1 -
CUMBPROFIT20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 - FALSEPOS100 0
FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 -
FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.3050847458 _NEVENTS 18 _NNONEVENTS 41 TARGET
"NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   RETAIN EPTARGET1 - EPTARGET20 0 MINEPTARGET1 - MINEPTARGET20 0
MAXEPTARGET1 - MAXEPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY EPTARGET (20) EPTARGET1 - EPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINEPTARGET (20) MINEPTARGET1 - MINEPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXEPTARGET (20) MAXEPTARGET1 - MAXEPTARGET20;
MPRINT(EM_ASSESS):   DROP EPTARGET1 - EPTARGET20 _MEANEPTARGET MINEPTARGET1 - MINEPTARGET20
MAXEPTARGET1 - MAXEPTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN CPTARGET1 - CPTARGET20 0 MINCPTARGET1 - MINCPTARGET20 0
MAXCPTARGET1 - MAXCPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY CPTARGET (20) CPTARGET1 - CPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINCPTARGET (20) MINCPTARGET1 - MINCPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXCPTARGET (20) MAXCPTARGET1 - MAXCPTARGET20;
MPRINT(EM_ASSESS):   DROP CPTARGET1 - CPTARGET20 _MEANCPTARGET MINCPTARGET1 - MINCPTARGET20
MAXCPTARGET1 - MAXCPTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN BPTARGET1 - BPTARGET20 0 MINBPTARGET1 - MINBPTARGET20 0
MAXBPTARGET1 - MAXBPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY BPTARGET (20) BPTARGET1 - BPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINBPTARGET (20) MINBPTARGET1 - MINBPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXBPTARGET (20) MAXBPTARGET1 - MAXBPTARGET20;
MPRINT(EM_ASSESS):   DROP BPTARGET1 - BPTARGET20 _MEANBPTARGET MINBPTARGET1 - MINBPTARGET20
MAXBPTARGET1 - MAXBPTARGET20 ;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   RETAIN D_TARGET1_1 - D_TARGET1_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET1 (100) D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   DROP D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   RETAIN D_TARGET2_1 - D_TARGET2_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET2 (100) D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   DROP D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN SCR_EPMEAN1- SCR_EPMEAN100 0 SCR_EPMIN1 - SCR_EPMIN100 1
SCR_EPMAX1 - SCR_EPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMEANS (100) SCR_EPMEAN1 - SCR_EPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMINS (100) SCR_EPMIN1 - SCR_EPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMAXS (100) SCR_EPMAX1 - SCR_EPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_EPMEAN1 - SCR_EPMEAN100 SCR_EPMIN1 - SCR_EPMIN100 SCR_EPMAX1 -
SCR_EPMAX100;
MPRINT(EM_ASSESS):   RETAIN SCR_CPMEAN1- SCR_CPMEAN100 0 SCR_CPMIN1 - SCR_CPMIN100 1
SCR_CPMAX1 - SCR_CPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMEANS (100) SCR_CPMEAN1 - SCR_CPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMINS (100) SCR_CPMIN1 - SCR_CPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMAXS (100) SCR_CPMAX1 - SCR_CPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_CPMEAN1 - SCR_CPMEAN100 SCR_CPMIN1 - SCR_CPMIN100 SCR_CPMAX1 -
SCR_CPMAX100;
MPRINT(EM_ASSESS):   RETAIN SCR_BPMEAN1- SCR_BPMEAN100 0 SCR_BPMIN1 - SCR_BPMIN100 1
SCR_BPMAX1 - SCR_BPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMEANS (100) SCR_BPMEAN1 - SCR_BPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMINS (100) SCR_BPMIN1 - SCR_BPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMAXS (100) SCR_BPMAX1 - SCR_BPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_BPMEAN1 - SCR_BPMEAN100 SCR_BPMIN1 - SCR_BPMIN100 SCR_BPMAX1 -
SCR_BPMAX100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 59));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_classrecurrence_events );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_classrecurrence_events );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_classrecurrence_events *
_WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   EPTARGET (DECILE) = SUM ( EPTARGET (DECILE) , _MEANEPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINEPTARGET (DECILE) = MIN (MINEPTARGET (DECILE), _MEANEPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   MAXEPTARGET (DECILE) = MAX (MAXEPTARGET (DECILE), _MEANEPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   CPTARGET (DECILE) = SUM ( CPTARGET (DECILE) , _MEANCPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINCPTARGET (DECILE) = MIN (MINCPTARGET (DECILE), _MEANCPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   MAXCPTARGET (DECILE) = MAX (MAXCPTARGET (DECILE), _MEANCPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   BPTARGET (DECILE) = SUM ( BPTARGET (DECILE) , _MEANBPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINBPTARGET (DECILE) = MIN (MINBPTARGET (DECILE), _MEANBPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   MAXBPTARGET (DECILE) = MAX (MAXBPTARGET (DECILE), _MEANBPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_classrecurrence_events * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_classrecurrence_events * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_classrecurrence_events);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_classrecurrence_events);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   D_class = TRANSLATE (D_class, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   IF D_class = "NO-RECURRENCE-EVENTS" THEN D_TARGET1 ( SLOT ) = SUM
(D_TARGET1 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   IF D_class = "RECURRENCE-EVENTS" THEN D_TARGET2 ( SLOT ) = SUM (D_TARGET2
(SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_classrecurrence_events
* _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT),
P_classrecurrence_events );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT),
P_classrecurrence_events );
MPRINT(EM_ASSESS):   SCR_EPMEANS ( SLOT ) = MEAN (SCR_EPMEANS (SLOT), _MEANEPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_EPMINS ( SLOT ) = MIN (SCR_EPMINS (SLOT), _MEANEPTARGET );
MPRINT(EM_ASSESS):   SCR_EPMAXS ( SLOT ) = MAX (SCR_EPMAXS (SLOT), _MEANEPTARGET );
MPRINT(EM_ASSESS):   SCR_CPMEANS ( SLOT ) = MEAN (SCR_CPMEANS (SLOT), _MEANCPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_CPMINS ( SLOT ) = MIN (SCR_CPMINS (SLOT), _MEANCPTARGET );
MPRINT(EM_ASSESS):   SCR_CPMAXS ( SLOT ) = MAX (SCR_CPMAXS (SLOT), _MEANCPTARGET );
MPRINT(EM_ASSESS):   SCR_BPMEANS ( SLOT ) = MEAN (SCR_BPMEANS (SLOT), _MEANBPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_BPMINS ( SLOT ) = MIN (SCR_BPMINS (SLOT), _MEANBPTARGET );
MPRINT(EM_ASSESS):   SCR_BPMAXS ( SLOT ) = MAX (SCR_BPMAXS (SLOT), _MEANBPTARGET );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "RECURRENCE-EVENTS" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0018993666 OVLMAX 0.9520366317 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   SUMEP = SUM (OF EPTARGET1 - EPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMEP ;
MPRINT(EM_ASSESS):   SUMCP = SUM (OF CPTARGET1 - CPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMCP ;
MPRINT(EM_ASSESS):   SUMBP = SUM (OF BPTARGET1 - BPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMBP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 59 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(59/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 59)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 59/20) ) / (
AVGNUMRESP / (59/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 59 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 59 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 59/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 59/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   TOTALEP_TARGET = EPTARGET (GROUP);
MPRINT(EM_ASSESS):   EP_TARGET = TOTALEP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALEP + EPTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVEEP = CUMULATIVETOTALEP / C_NUMOBS;
MPRINT(EM_ASSESS):   MINEP_TARGET = MINEPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXEP_TARGET = MAXEPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNEP_TARGET = EP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXEP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXEP_TARGET + MAXEP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMEP >= C_MAXEP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTEP = MAXEP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALEP = BESTEP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTEP = MIN (MAXEP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTEP < 0 THEN BESTEP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALEP = BESTEP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALEP + BESTTOTALEP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMEP - C_MAXEP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEEP = BESTCUMTOTALEP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEEP = SUMEP / 59;
MPRINT(EM_ASSESS):   BASECUMULATIVEEP + BASEEP;
MPRINT(EM_ASSESS):   BASETOTALEP = SUMEP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALEP + BASETOTALEP;
MPRINT(EM_ASSESS):   TOTALCP_TARGET = CPTARGET (GROUP);
MPRINT(EM_ASSESS):   CP_TARGET = TOTALCP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALCP + CPTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVECP = CUMULATIVETOTALCP / C_NUMOBS;
MPRINT(EM_ASSESS):   MINCP_TARGET = MINCPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXCP_TARGET = MAXCPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNCP_TARGET = CP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXCP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXCP_TARGET + MAXCP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMCP >= C_MAXCP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTCP = MAXCP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALCP = BESTCP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTCP = MIN (MAXCP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTCP < 0 THEN BESTCP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALCP = BESTCP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALCP + BESTTOTALCP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMCP - C_MAXCP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVECP = BESTCUMTOTALCP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASECP = SUMCP / 59;
MPRINT(EM_ASSESS):   BASECUMULATIVECP + BASECP;
MPRINT(EM_ASSESS):   BASETOTALCP = SUMCP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALCP + BASETOTALCP;
MPRINT(EM_ASSESS):   TOTALBP_TARGET = BPTARGET (GROUP);
MPRINT(EM_ASSESS):   BP_TARGET = TOTALBP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   MINBP_TARGET = MINBPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXBP_TARGET = MAXBPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNBP_TARGET = BP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXBP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXBP_TARGET + MAXBP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMBP >= C_MAXBP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTBP = MAXBP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALBP = BESTBP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTBP = MIN (MAXBP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTBP < 0 THEN BESTBP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALBP = BESTBP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALBP + BESTTOTALBP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMBP - C_MAXBP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEBP = BESTCUMTOTALBP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEBP = SUMBP / 59;
MPRINT(EM_ASSESS):   BASECUMULATIVEBP + BASEBP;
MPRINT(EM_ASSESS):   BASETOTALBP = SUMBP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALBP + BASETOTALBP;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_96 - D_TARGET1_100);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_96 - D_TARGET2_100);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN96 - SCR_EPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN96 - SCR_EPMIN100);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX96 - SCR_EPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN96 - SCR_CPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN96 - SCR_CPMIN100);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX96 - SCR_CPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN96 - SCR_BPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN96 - SCR_BPMIN100);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX96 - SCR_BPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_91 - D_TARGET1_95);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_91 - D_TARGET2_95);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN91 - SCR_EPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN91 - SCR_EPMIN95);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX91 - SCR_EPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN91 - SCR_CPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN91 - SCR_CPMIN95);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX91 - SCR_CPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN91 - SCR_BPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN91 - SCR_BPMIN95);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX91 - SCR_BPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_86 - D_TARGET1_90);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_86 - D_TARGET2_90);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN86 - SCR_EPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN86 - SCR_EPMIN90);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX86 - SCR_EPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN86 - SCR_CPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN86 - SCR_CPMIN90);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX86 - SCR_CPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN86 - SCR_BPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN86 - SCR_BPMIN90);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX86 - SCR_BPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_81 - D_TARGET1_85);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_81 - D_TARGET2_85);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN81 - SCR_EPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN81 - SCR_EPMIN85);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX81 - SCR_EPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN81 - SCR_CPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN81 - SCR_CPMIN85);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX81 - SCR_CPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN81 - SCR_BPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN81 - SCR_BPMIN85);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX81 - SCR_BPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_76 - D_TARGET1_80);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_76 - D_TARGET2_80);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN76 - SCR_EPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN76 - SCR_EPMIN80);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX76 - SCR_EPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN76 - SCR_CPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN76 - SCR_CPMIN80);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX76 - SCR_CPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN76 - SCR_BPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN76 - SCR_BPMIN80);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX76 - SCR_BPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_71 - D_TARGET1_75);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_71 - D_TARGET2_75);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN71 - SCR_EPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN71 - SCR_EPMIN75);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX71 - SCR_EPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN71 - SCR_CPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN71 - SCR_CPMIN75);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX71 - SCR_CPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN71 - SCR_BPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN71 - SCR_BPMIN75);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX71 - SCR_BPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_66 - D_TARGET1_70);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_66 - D_TARGET2_70);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN66 - SCR_EPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN66 - SCR_EPMIN70);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX66 - SCR_EPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN66 - SCR_CPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN66 - SCR_CPMIN70);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX66 - SCR_CPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN66 - SCR_BPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN66 - SCR_BPMIN70);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX66 - SCR_BPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_61 - D_TARGET1_65);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_61 - D_TARGET2_65);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN61 - SCR_EPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN61 - SCR_EPMIN65);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX61 - SCR_EPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN61 - SCR_CPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN61 - SCR_CPMIN65);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX61 - SCR_CPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN61 - SCR_BPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN61 - SCR_BPMIN65);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX61 - SCR_BPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_56 - D_TARGET1_60);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_56 - D_TARGET2_60);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN56 - SCR_EPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN56 - SCR_EPMIN60);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX56 - SCR_EPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN56 - SCR_CPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN56 - SCR_CPMIN60);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX56 - SCR_CPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN56 - SCR_BPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN56 - SCR_BPMIN60);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX56 - SCR_BPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_51 - D_TARGET1_55);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_51 - D_TARGET2_55);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN51 - SCR_EPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN51 - SCR_EPMIN55);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX51 - SCR_EPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN51 - SCR_CPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN51 - SCR_CPMIN55);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX51 - SCR_CPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN51 - SCR_BPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN51 - SCR_BPMIN55);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX51 - SCR_BPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_46 - D_TARGET1_50);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_46 - D_TARGET2_50);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN46 - SCR_EPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN46 - SCR_EPMIN50);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX46 - SCR_EPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN46 - SCR_CPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN46 - SCR_CPMIN50);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX46 - SCR_CPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN46 - SCR_BPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN46 - SCR_BPMIN50);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX46 - SCR_BPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_41 - D_TARGET1_45);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_41 - D_TARGET2_45);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN41 - SCR_EPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN41 - SCR_EPMIN45);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX41 - SCR_EPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN41 - SCR_CPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN41 - SCR_CPMIN45);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX41 - SCR_CPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN41 - SCR_BPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN41 - SCR_BPMIN45);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX41 - SCR_BPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_36 - D_TARGET1_40);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_36 - D_TARGET2_40);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN36 - SCR_EPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN36 - SCR_EPMIN40);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX36 - SCR_EPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN36 - SCR_CPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN36 - SCR_CPMIN40);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX36 - SCR_CPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN36 - SCR_BPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN36 - SCR_BPMIN40);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX36 - SCR_BPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_31 - D_TARGET1_35);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_31 - D_TARGET2_35);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN31 - SCR_EPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN31 - SCR_EPMIN35);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX31 - SCR_EPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN31 - SCR_CPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN31 - SCR_CPMIN35);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX31 - SCR_CPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN31 - SCR_BPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN31 - SCR_BPMIN35);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX31 - SCR_BPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_26 - D_TARGET1_30);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_26 - D_TARGET2_30);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN26 - SCR_EPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN26 - SCR_EPMIN30);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX26 - SCR_EPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN26 - SCR_CPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN26 - SCR_CPMIN30);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX26 - SCR_CPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN26 - SCR_BPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN26 - SCR_BPMIN30);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX26 - SCR_BPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_21 - D_TARGET1_25);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_21 - D_TARGET2_25);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN21 - SCR_EPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN21 - SCR_EPMIN25);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX21 - SCR_EPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN21 - SCR_CPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN21 - SCR_CPMIN25);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX21 - SCR_CPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN21 - SCR_BPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN21 - SCR_BPMIN25);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX21 - SCR_BPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_16 - D_TARGET1_20);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_16 - D_TARGET2_20);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN16 - SCR_EPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN16 - SCR_EPMIN20);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX16 - SCR_EPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN16 - SCR_CPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN16 - SCR_CPMIN20);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX16 - SCR_CPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN16 - SCR_BPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN16 - SCR_BPMIN20);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX16 - SCR_BPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_11 - D_TARGET1_15);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_11 - D_TARGET2_15);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN11 - SCR_EPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN11 - SCR_EPMIN15);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX11 - SCR_EPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN11 - SCR_CPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN11 - SCR_CPMIN15);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX11 - SCR_CPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN11 - SCR_BPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN11 - SCR_BPMIN15);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX11 - SCR_BPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_6 - D_TARGET1_10);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_6 - D_TARGET2_10);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN6 - SCR_EPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN6 - SCR_EPMIN10);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX6 - SCR_EPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN6 - SCR_CPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN6 - SCR_CPMIN10);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX6 - SCR_CPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN6 - SCR_BPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN6 - SCR_BPMIN10);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX6 - SCR_BPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_1 - D_TARGET1_5);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_1 - D_TARGET2_5);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN1 - SCR_EPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN1 - SCR_EPMIN5);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX1 - SCR_EPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN1 - SCR_CPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN1 - SCR_CPMIN5);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX1 - SCR_CPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN1 - SCR_BPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN1 - SCR_BPMIN5);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX1 - SCR_BPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 59;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS SCR_EPMEAN =
_MEANEP_ SCR_EPMAX = _MAXEP_ SCR_EPMIN = _MINEP_ SCR_CPMEAN = _MEANCP_ SCR_CPMAX = _MAXCP_
SCR_CPMIN = _MINCP_ NUMDECISION1 = DECISION1 NUMDECISION2 = DECISION2 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" _MEANCP_ =
"Mean Computed Profit" _MAXCP_ = "Max Computed Profit" _MINCP_ = "Min Computed Profit" _MAXEP_
= "Expected profit: upper bound" _MINEP_ = "Expected profit: lower bound" _MEANEP_ = "Mean
Expected Profit" DECISION1= "Report: Number of Decisions = 1" DECISION2= "Report: Number of
Decisions = 2" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC
BASECP = BASEPROFIT BASECUMTOTALCP = BASECUMULATIVETOTALPROFIT BASECUMULATIVECP =
BASECUMULATIVEPROFIT MAXCP_TARGET = _MAXCP_ MNCP_TARGET = _MEANCP_ MINCP_TARGET = _MINCP_
BASETOTALCP = BASETOTALPROFIT CUMULATIVECP = AVGCUMULATIVEPROFIT CUMULATIVETOTALCP=
CUMULATIVETOTALPROFIT CP_TARGET = PROFIT TOTALCP_TARGET = TOTALPROFIT MAXEP_TARGET = _MAXEP_
MINEP_TARGET = _MINEP_ MNEP_TARGET = _MEANEP_ CUMULATIVEEP = CUMULATIVEEXPECTEDPROFIT
CUMULATIVETOTALEP= CUMULATIVETOTALEXPPROFIT TOTALEP_TARGET = TOTALEXPPROFIT BESTBP =
BESTPROFIT BESTCUMTOTALBP = BESTCUMULATIVETOTALPROFIT BESTCUMULATIVEBP = BESTCUMULATIVEPROFIT
BESTTOTALBP = BESTTOTALPROFIT ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MEANCP_ = "Mean Computed Profit" _MAXCP_ = "Max Computed Profit"
_MINCP_ = "Min Computed Profit" AVGCUMULATIVEPROFIT = "Average Cumulative Computed Profit"
CUMULATIVETOTALPROFIT = "Cumulative Total Computed Profit" BESTTOTALPROFIT = "Best Total
Profit" BESTPROFIT = "Best Profit" BASEPROFIT = "Baseline Profit" BASECUMULATIVEPROFIT =
"Baseline Cumulative Profit" BASECUMULATIVETOTALPROFIT = "Baseline Cumulative Total Profit"
BASEPROFIT = "Baseline Profit" BASETOTALPROFIT = "Baseline Total Profit" BESTCUMULATIVEPROFIT
= "Best Cumulative Profit" BESTCUMULATIVETOTALPROFIT = "Best Cumulative Total Profit" PROFIT =
"Average Computed Profit" TOTALPROFIT = "Total Computed Profit" _MEANEP_ = "Mean Expected
Profit" _MINEP_ = "Min Expected Profit" _MAXEP_ = "Max Expected Profit"
CUMULATIVETOTALEXPPROFIT = "Cumulative Total Expected Profit" CUMULATIVEEXPECTEDPROFIT =
"Cumulative Expected Profit" TOTALEXPPROFIT = "Total Expected Profit" _MAXP_ = "Max Posterior
Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability"
BASECAP = "Baseline % Captured Response" BASECAPC = "Baseline Cumulative % Captured Response"
BASENUMBEROFEVENTS = "Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT =
"Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response"
BASERESPC = "Baseline Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP =
"Best % Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best
Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT = "Best
Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "%
Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT
= "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of Nonevents" N = "Number of
Observations" EVENT = "Event" RESPC = "Cumulative % Response" NUMBEROFEVENTS = "Number of
Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "class";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'class';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "class";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'class';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
51915      %let _cn = %sysfunc(getoption(CENTER));
51916      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
51917      proc print data=EMWS1.Neural_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMREPORTFIT noobs label;
51918      var STAT LABEL TRAIN
51919      VALIDATE
51920      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
51921      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
51922      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
51923      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
51924      run;
 
NOTE: There were 23 observations read from the data set EMWS1.NEURAL_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 21.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
51925      title10;
MPRINT(EM_DIAGRAM):   title10;
51926      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
51927      proc sort data=EMWS1.Neural_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_EMCLASSIFICATION nothreads;
51928      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
51929      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS1.NEURAL_EMCLASSIFICATION.
NOTE: The data set EMWS1.NEURAL_EMCLASSIFICATION has 16 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
51930      %let _cn = %sysfunc(getoption(CENTER));
51931      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
51932      proc print data=EMWS1.Neural_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMCLASSIFICATION noobs label;
51933      var from into pct_row pct_col count percent
51934      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
51935      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
51936      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
51937      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
51938      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
51939      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
51940      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
51941      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
51942      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
51943      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
51944      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
51945      run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 22.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
 
 
51946      proc print data=EMWS1.Neural_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMCLASSIFICATION noobs label;
51947      var from into pct_row pct_col count percent
51948      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
51949      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
51950      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
51951      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
51952      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
51953      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
51954      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
51955      where _TYPE_='DECISION';
MPRINT(EM_DIAGRAM):   where _TYPE_='DECISION';
51956      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
51957      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
51958      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_decisiontable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Decision Table";
MPRINT(EM_DIAGRAM):   run;
51959      run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL_EMCLASSIFICATION.
      WHERE _TYPE_='DECISION';
NOTE: The PROCEDURE PRINT printed page 23.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
 
 
51960      title9;
MPRINT(EM_DIAGRAM):   title9;
51961      title10;
MPRINT(EM_DIAGRAM):   title10;
51962      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
51963      %let _cn = %sysfunc(getoption(CENTER));
51964      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
51965      data EMWS1.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMEVENTREPORT;
51966      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
51966    ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
51967      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
51967    !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
51967    ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
51967    ! FALSEEVENT
51968      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
51968    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
51968    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
51969         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
51970      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
51971      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
51972      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
51973      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
51974      set EMWS1.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMEVENTREPORT;
51975      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL_EMEVENTREPORT.
NOTE: The data set EMWS1.NEURAL_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
51976      proc print data=EMWS1.Neural_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMEVENTREPORT noobs label;
51977      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
51978      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
51979      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
51980      run;
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 24.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
51981      title10;
MPRINT(EM_DIAGRAM):   title10;
51982      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
51983      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
51984      modify Neural_EMRANK;
MPRINT(EM_DIAGRAM):   modify Neural_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
51985      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
51986      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
51986    ! ;
MPRINT(EM_DIAGRAM):   run;
51987      run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL_EMRANK.DATA.
51988      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
51989      %let _cn = %sysfunc(getoption(CENTER));
51990      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
51991      proc print data=EMWS1.Neural_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMRANK label noobs;
51992      var
51993      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
51994      by
51995      notsorted DATAROLE
51996      notsorted TARGET
51997      notsorted TARGETLABEL
51998      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
51999      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
52000      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
52001      run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL_EMRANK.
NOTE: The PROCEDURE PRINT printed page 25.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
52002      title10;
MPRINT(EM_DIAGRAM):   title10;
52003      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
52004      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
52005      modify Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
52006      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
52006    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
52007      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
52007    ! ;
MPRINT(EM_DIAGRAM):   run;
52008      run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL_EMSCOREDIST.DATA.
52009      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "class" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
