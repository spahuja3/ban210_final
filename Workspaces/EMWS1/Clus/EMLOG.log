*------------------------------------------------------------*
User:                manas
Date:                April 16, 2022
Time:                02:24:18 o'clock
Site:                70192439
Platform:            X64_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "02:24:07 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 16, 2022
Time:                02:24:07 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3WBFMI3 "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3WBFMI3 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "02:24:07 o'clock" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                manas";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70192439";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "02:24:08 o'clock" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                manas";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
21075      proc freq data=EMWS1.Clus_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Clus_VariableSet noprint;
21076      table ROLE*LEVEL/out=WORK.ClusMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.ClusMETA;
21077      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_VARIABLESET.
NOTE: The data set WORK.CLUSMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
21078      proc print data=WORK.ClusMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.ClusMETA label noobs;
21079      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
21080      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
21081      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21082      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
21083      run;
 
NOTE: There were 4 observations read from the data set WORK.CLUSMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
21084      title10;
MPRINT(EM_DIAGRAM):   title10;
21085      data WORK.M1NB3BTG;
MPRINT(EM_DIAGRAM):    data WORK.M1NB3BTG;
21086      set WORK.M1NB3BTG;
MPRINT(EM_DIAGRAM):   set WORK.M1NB3BTG;
21087      if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
21088      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.M1NB3BTG.
NOTE: The data set WORK.M1NB3BTG has 5 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M1NB3BTG;
MPRINT(EM_DIAGRAM):   set WORK.M1NB3BTG;
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
21097      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21098      * Clus: Preliminary Clustering;
MPRINT(EM_DIAGRAM):   * Clus: Preliminary Clustering;
21099      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21100      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21101      * Clus: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * Clus: DMDBClass Macro ;
21102      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21103      %macro DMDBClass;
21104          IMP_node_caps(ASC) irradiat(ASC)
21105      %mend DMDBClass;
21106      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21107      * Clus: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Clus: DMDBVar Macro ;
21108      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21109      %macro DMDBVar;
21110          AvgTumorSize Avginv_node_group deg_malig
21111      %mend DMDBVar;
21112      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21113      * Clus: Create DMDB;
MPRINT(EM_DIAGRAM):   * Clus: Create DMDB;
21114      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21115      proc dmdb batch data=EMWS1.Impt_TRAIN
21116      dmdbcat=WORK.Clus_DMDB
21117      maxlevel = 513
21118      out=WORK.Clus_DMDB
21119      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Impt_TRAIN dmdbcat=WORK.Clus_DMDB maxlevel = 513 out=WORK.Clus_DMDB ;
MPRINT(EM_DIAGRAM):   class
21120      class %DMDBClass;
MPRINT(DMDBCLASS):   IMP_node_caps(ASC) irradiat(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
21121      var %DMDBVar;
MPRINT(DMDBVAR):   AvgTumorSize Avginv_node_group deg_malig
MPRINT(EM_DIAGRAM):  ;
21122      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 227   Memory used = 511K.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.06 seconds
 
NOTE: There were 227 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 227 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: The data set WORK.CLUS_DMDB has 227 observations and 5 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.15 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
21123      quit;
21124      *--- end code ---*;
 
21125      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
21126      * Clus: Interval Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Interval Inputs Macro ;
21127      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21128      %macro DMVQINTERVAL;
21129          AvgTumorSize Avginv_node_group deg_malig
21130      %mend DMVQINTERVAL;
21131      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21132      * Clus: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Nominal Inputs Macro ;
21133      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21134      %macro DMVQNOMINAL;
21135          IMP_node_caps irradiat
21136      %mend DMVQNOMINAL;
21137      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21138      * Clus: Run DMVQ procedure;
MPRINT(EM_DIAGRAM):   * Clus: Run DMVQ procedure;
21139      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21140      title;
MPRINT(EM_DIAGRAM):   title;
21141      options nodate;
MPRINT(EM_DIAGRAM):   options nodate;
21142      proc dmvq data=WORK.Clus_DMDB dmdbcat=WORK.Clus_DMDB std=STD nominal=GLM ordinal=RANK
21143      ;
MPRINT(EM_DIAGRAM):   proc dmvq data=WORK.Clus_DMDB dmdbcat=WORK.Clus_DMDB std=STD nominal=GLM ordinal=RANK ;
NOTE: The training set WORK.CLUS_DMDB.DATA has 5 variable(s).
NOTE: The DMVQ statement has finished with return code=0 and status=begin.
MPRINT(EM_DIAGRAM):   input
21144      input %DMVQINTERVAL / level=interval;
MPRINT(DMVQINTERVAL):   AvgTumorSize Avginv_node_group deg_malig
MPRINT(EM_DIAGRAM):   / level=interval;
NOTE: 3 input variable(s) defined for ID=I1.
NOTE: The INPUT statement has finished with return code=0 and status=variables.
MPRINT(EM_DIAGRAM):   input
21145      input %DMVQNOMINAL / level=nominal;
MPRINT(DMVQNOMINAL):   IMP_node_caps irradiat
MPRINT(EM_DIAGRAM):   / level=nominal;
NOTE: 2 input variable(s) defined for ID=I2.
NOTE: The INPUT statement has finished with return code=0 and status=variables.
21146      VQ maxc = 50 clusname=_SEGMENT_ CLUSLABEL="Segment Id" DISTLABEL="Distance";
MPRINT(EM_DIAGRAM):   VQ maxc = 50 clusname=_SEGMENT_ CLUSLABEL="Segment Id" DISTLABEL="Distance";
NOTE: A maximum of 50 clusters have been requested.
NOTE: The VQ statement has finished with return code=0 and status=architecture.
21147      MAKE outvar=EMWS1.Clus_OUTVAR;
MPRINT(EM_DIAGRAM):   MAKE outvar=EMWS1.Clus_OUTVAR;
 
NOTE: 5 input variable(s).
NOTE: Number of cases=227
NOTE: Sum of frequencies=227
NOTE: Sum of weights=227
NOTE: VARDEF=DF
NOTE: Maximum number of categories=2
NOTE: The total number of variables is 5 with dimensionality 7.
NOTE: 5 variables will be used for clustering.
NOTE: Open output data set EMWS1.CLUS_OUTVAR.DATA with 8 variables.
NOTE: The data set EMWS1.CLUS_OUTVAR has 4 observations and 8 variables.
NOTE: The MAKE statement has finished with return code=0 and status=made.
21148      INITIAL radius=0
21149      ;
MPRINT(EM_DIAGRAM):   INITIAL radius=0 ;
NOTE: 50 seeds were selected from data set WORK.CLUS_DMDB.DATA using the SEPARATE algorithm.
NOTE: The INITIAL statement has finished with return code=0 and status=initialized.
21150      TRAIN tech=FORGY
21151      ;
MPRINT(EM_DIAGRAM):   TRAIN tech=FORGY ;
NOTE: X-Convergence criterion is satisfied.
NOTE: The TRAIN statement has finished with return code=0 and status=trained.
21152      SAVE outstat=WORK.Clus_OUTSTAT outmean=EMWS1.Clus_OUTMEAN;
MPRINT(EM_DIAGRAM):   SAVE outstat=WORK.Clus_OUTSTAT outmean=EMWS1.Clus_OUTMEAN;
NOTE: The data set WORK.CLUS_OUTSTAT has 316 observations and 10 variables.
NOTE: The data set EMWS1.CLUS_OUTMEAN has 50 observations and 16 variables.
NOTE: The SAVE statement has finished with return code=0 and status=statistics.
21153      code file="D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\DMVQSCORECODE.sas"
21154      group=Clus
21155      ;
MPRINT(EM_DIAGRAM):   code file="D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\DMVQSCORECODE.sas" group=Clus ;
NOTE: External file D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\DMVQSCORECODE.sas opened.
NOTE: The CODE statement has finished with return code=0 and status=statistics.
21156      run;
MPRINT(EM_DIAGRAM):   run;
 
21157      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: There were 227 observations read from the data set WORK.CLUS_DMDB.
NOTE: PROCEDURE DMVQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
21158      proc transpose data=EMWS1.Clus_OUTVAR out=WORK.Clus_OUTVAR(where=(COL1 ^in('IMPUTED','OMITTED')));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Clus_OUTVAR out=WORK.Clus_OUTVAR(where=(COL1 ^in('IMPUTED','OMITTED')));
21159      var AvgTumorSize--irradiatyes;
MPRINT(EM_DIAGRAM):   var AvgTumorSize--irradiatyes;
21160      where _TYPE_ in('TYPE' 'VARIABLE');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('TYPE' 'VARIABLE');
21161      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.CLUS_OUTVAR.
      WHERE _TYPE_ in ('TYPE', 'VARIABLE');
NOTE: The data set WORK.CLUS_OUTVAR has 7 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
21162      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
21163      * Clus: DMVQ Variables;
MPRINT(EM_DIAGRAM):   * Clus: DMVQ Variables;
21164      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21165      %macro dmvqvars;
21166          AvgTumorSize Avginv_node_group deg_malig IMP_node_capsno IMP_node_capsyes
21167         irradiatno irradiatyes
21168      %mend ;
21169
21170
 
21171      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21172      * Clus: Determining the number of clusters;
MPRINT(EM_DIAGRAM):   * Clus: Determining the number of clusters;
21173      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21174      proc cluster data=EMWS1.Clus_OUTMEAN method=WARD pseudo outtree=EMWS1.Clus_CLUSSEED
21175      ;
MPRINT(EM_DIAGRAM):   proc cluster data=EMWS1.Clus_OUTMEAN method=WARD pseudo outtree=EMWS1.Clus_CLUSSEED ;
MPRINT(EM_DIAGRAM):   var
21176      var %dmvqvars;
MPRINT(DMVQVARS):   AvgTumorSize Avginv_node_group deg_malig IMP_node_capsno IMP_node_capsyes irradiatno irradiatyes
MPRINT(EM_DIAGRAM):  ;
21177      copy _SEGMENT_;
MPRINT(EM_DIAGRAM):   copy _SEGMENT_;
21178      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Ties for minimum distance between clusters have been detected at 1 level(s) in the cluster history.
NOTE: The data set EMWS1.CLUS_CLUSSEED has 99 observations and 24 variables.
NOTE: The PROCEDURE CLUSTER printed page 2.
NOTE: PROCEDURE CLUSTER used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
21179      quit;
21180      proc sort data =EMWS1.Clus_CLUSSEED out=WORK._SEED_;
MPRINT(EM_DIAGRAM):   proc sort data =EMWS1.Clus_CLUSSEED out=WORK._SEED_;
21181      by _ncl_;
MPRINT(EM_DIAGRAM):   by _ncl_;
21182      where (_ccc_ > -99999.0);
MPRINT(EM_DIAGRAM):   where (_ccc_ > -99999.0);
21183      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 45 observations read from the data set EMWS1.CLUS_CLUSSEED.
      WHERE _ccc_>-99999;
NOTE: The data set WORK._SEED_ has 45 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21184      data WORK._SEED2_;
MPRINT(EM_DIAGRAM):   data WORK._SEED2_;
21185      retain oJump occc oncl;
MPRINT(EM_DIAGRAM):   retain oJump occc oncl;
21186      set WORK._SEED_;
MPRINT(EM_DIAGRAM):   set WORK._SEED_;
21187      _lccc_=lag(_ccc_);
MPRINT(EM_DIAGRAM):   _lccc_=lag(_ccc_);
21188      if _lccc_ > . then jump = _ccc_ - _lccc_;
MPRINT(EM_DIAGRAM):   if _lccc_ > . then jump = _ccc_ - _lccc_;
21189      if jump<0 and ojump>0 then do;
MPRINT(EM_DIAGRAM):   if jump<0 and ojump>0 then do;
21190      * Have a local Max;
MPRINT(EM_DIAGRAM):   * Have a local Max;
21191      numclus = oncl;
MPRINT(EM_DIAGRAM):   numclus = oncl;
21192      cccvalue = occc;
MPRINT(EM_DIAGRAM):   cccvalue = occc;
21193      output;
MPRINT(EM_DIAGRAM):   output;
21194      end;
MPRINT(EM_DIAGRAM):   end;
21195      ojump = jump;
MPRINT(EM_DIAGRAM):   ojump = jump;
21196      occc = _ccc_;
MPRINT(EM_DIAGRAM):   occc = _ccc_;
21197      oncl = _ncl_;
MPRINT(EM_DIAGRAM):   oncl = _ncl_;
21198      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 45 observations read from the data set WORK._SEED_.
NOTE: The data set WORK._SEED2_ has 1 observations and 31 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
21199      proc print data=WORK._SEED2_ label;
MPRINT(EM_DIAGRAM):   proc print data=WORK._SEED2_ label;
21200      var numclus cccvalue;
MPRINT(EM_DIAGRAM):   var numclus cccvalue;
21201      label numclus="%sysfunc(sasmsg(sashelp.dmine, rpt_numclus_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label numclus= "Number of Clusters";
21202      label cccvalue="%sysfunc(sasmsg(sashelp.dmine, rpt_ccc_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label cccvalue= "Clustering Cubic Criterion";
21203      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_OptClus_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Candidates for Optimum Number of Clusters";
MPRINT(EM_DIAGRAM):   run;
21204      run;
 
NOTE: There were 1 observations read from the data set WORK._SEED2_.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
21205      title10;
MPRINT(EM_DIAGRAM):   title10;
21206      data WORK._SEED2_;
MPRINT(EM_DIAGRAM):    data WORK._SEED2_;
21207      length msg $200;
MPRINT(EM_DIAGRAM):   length msg $200;
21208      set WORK._SEED2_ end=eof;
MPRINT(EM_DIAGRAM):   set WORK._SEED2_ end=eof;
21209      retain select cccSelect 0 numSel;
MPRINT(EM_DIAGRAM):   retain select cccSelect 0 numSel;
21210      if _N_=1 then numSel = numClus;
MPRINT(EM_DIAGRAM):   if _N_=1 then numSel = numClus;
21211      if cccvalue>=3 then do;
MPRINT(EM_DIAGRAM):   if cccvalue>=3 then do;
21212      if 20>= numclus >= 2 and cccSelect<1 then do;
MPRINT(EM_DIAGRAM):   if 20>= numclus >= 2 and cccSelect<1 then do;
21213      cccSelect = 1;
MPRINT(EM_DIAGRAM):   cccSelect = 1;
21214      select =1;
MPRINT(EM_DIAGRAM):   select =1;
21215      numSel = numClus;
MPRINT(EM_DIAGRAM):   numSel = numClus;
21216      end;
MPRINT(EM_DIAGRAM):   end;
21217      end;
MPRINT(EM_DIAGRAM):   end;
21218      else if 20>= numclus >= 2 and select<1 then do;
MPRINT(EM_DIAGRAM):   else if 20>= numclus >= 2 and select<1 then do;
21219      select = 1;
MPRINT(EM_DIAGRAM):   select = 1;
21220      numSel = numClus;
MPRINT(EM_DIAGRAM):   numSel = numClus;
21221      end;
MPRINT(EM_DIAGRAM):   end;
21222      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
21223      if ^(select=1 and cccselect=1) then do;
MPRINT(EM_DIAGRAM):   if ^(select=1 and cccselect=1) then do;
21224      put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
21225      put '*;';
MPRINT(EM_DIAGRAM):   put '*;';
21226      put "WARNING: The number of clusters selected based on the CCC values may not be valid.  Please refer to the documentation on the Cubic Clustering Criterion.";
MPRINT(EM_DIAGRAM):   put "WARNING: The number of clusters selected based on the CCC values may not be valid.  Please refer to the documentation on the Cubic Clustering Criterion.";
21227      put '*;';
MPRINT(EM_DIAGRAM):   put '*;';
21228      put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
21229      end;
MPRINT(EM_DIAGRAM):   end;
21230      if select<1 then do;
MPRINT(EM_DIAGRAM):   if select<1 then do;
21231      msg = sasmsg('sashelp.dmine', 'rpt_noCCCclusternum_note', 'NOQUOTE');
MPRINT(EM_DIAGRAM):   msg = sasmsg('sashelp.dmine', 'rpt_noCCCclusternum_note', 'NOQUOTE');
21232      put msg;
MPRINT(EM_DIAGRAM):   put msg;
21233      end;
MPRINT(EM_DIAGRAM):   end;
21234      if cccselect<1 then do;
MPRINT(EM_DIAGRAM):   if cccselect<1 then do;
21235      msg = sasmsg('sashelp.dmine', 'rpt_noValidclusterNum_note', 'NOQUOTE');
MPRINT(EM_DIAGRAM):   msg = sasmsg('sashelp.dmine', 'rpt_noValidclusterNum_note', 'NOQUOTE');
21236      put msg;
MPRINT(EM_DIAGRAM):   put msg;
21237      end;
MPRINT(EM_DIAGRAM):   end;
21238      call symput('em_maxC', strip(put(numSel,best.)));
MPRINT(EM_DIAGRAM):   call symput('em_maxC', strip(put(numSel,best.)));
21239      end;
MPRINT(EM_DIAGRAM):   end;
21240      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._SEED2_.
NOTE: The data set WORK._SEED2_ has 1 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
21241      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21242      * Clus: Training;
MPRINT(EM_DIAGRAM):   * Clus: Training;
21243      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21244      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21245      * Clus: Run DMVQ procedure;
MPRINT(EM_DIAGRAM):   * Clus: Run DMVQ procedure;
21246      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21247      title;
MPRINT(EM_DIAGRAM):   title;
21248      options nodate;
MPRINT(EM_DIAGRAM):   options nodate;
21249      proc dmvq data=WORK.Clus_DMDB dmdbcat=WORK.Clus_DMDB std=STD nominal=GLM ordinal=RANK
21250      ;
MPRINT(EM_DIAGRAM):   proc dmvq data=WORK.Clus_DMDB dmdbcat=WORK.Clus_DMDB std=STD nominal=GLM ordinal=RANK ;
NOTE: The training set WORK.CLUS_DMDB.DATA has 5 variable(s).
NOTE: The DMVQ statement has finished with return code=0 and status=begin.
MPRINT(EM_DIAGRAM):   input
21251      input %DMVQINTERVAL / level=interval;
MPRINT(DMVQINTERVAL):   AvgTumorSize Avginv_node_group deg_malig
MPRINT(EM_DIAGRAM):   / level=interval;
NOTE: 3 input variable(s) defined for ID=I1.
NOTE: The INPUT statement has finished with return code=0 and status=variables.
MPRINT(EM_DIAGRAM):   input
21252      input %DMVQNOMINAL / level=nominal;
MPRINT(DMVQNOMINAL):   IMP_node_caps irradiat
MPRINT(EM_DIAGRAM):   / level=nominal;
NOTE: 2 input variable(s) defined for ID=I2.
NOTE: The INPUT statement has finished with return code=0 and status=variables.
21253      VQ maxc = 7 clusname=_SEGMENT_ CLUSLABEL="Segment Id" DISTLABEL="Distance";
MPRINT(EM_DIAGRAM):   VQ maxc = 7 clusname=_SEGMENT_ CLUSLABEL="Segment Id" DISTLABEL="Distance";
NOTE: A maximum of 7 clusters have been requested.
NOTE: The VQ statement has finished with return code=0 and status=architecture.
21254      MAKE outvar=EMWS1.Clus_OUTVAR;
MPRINT(EM_DIAGRAM):   MAKE outvar=EMWS1.Clus_OUTVAR;
 
NOTE: 5 input variable(s).
NOTE: Number of cases=227
NOTE: Sum of frequencies=227
NOTE: Sum of weights=227
NOTE: VARDEF=DF
NOTE: Maximum number of categories=2
NOTE: The total number of variables is 5 with dimensionality 7.
NOTE: 5 variables will be used for clustering.
NOTE: Open output data set EMWS1.CLUS_OUTVAR.DATA with 8 variables.
NOTE: The data set EMWS1.CLUS_OUTVAR has 4 observations and 8 variables.
NOTE: The MAKE statement has finished with return code=0 and status=made.
21255      INITIAL radius=0
21256      ;
MPRINT(EM_DIAGRAM):   INITIAL radius=0 ;
NOTE: 7 seeds were selected from data set WORK.CLUS_DMDB.DATA using the SEPARATE algorithm.
NOTE: The INITIAL statement has finished with return code=0 and status=initialized.
21257      TRAIN tech=FORGY
21258      ;
MPRINT(EM_DIAGRAM):   TRAIN tech=FORGY ;
NOTE: X-Convergence criterion is satisfied.
NOTE: The TRAIN statement has finished with return code=0 and status=trained.
21259      SAVE outstat=EMWS1.Clus_OUTSTAT outmean=EMWS1.Clus_OUTMEAN;
MPRINT(EM_DIAGRAM):   SAVE outstat=EMWS1.Clus_OUTSTAT outmean=EMWS1.Clus_OUTMEAN;
NOTE: The data set EMWS1.CLUS_OUTSTAT has 58 observations and 10 variables.
NOTE: The data set EMWS1.CLUS_OUTMEAN has 7 observations and 16 variables.
NOTE: The SAVE statement has finished with return code=0 and status=statistics.
21260      code file="D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\DMVQSCORECODE.sas"
21261      group=Clus
21262      ;
MPRINT(EM_DIAGRAM):   code file="D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\DMVQSCORECODE.sas" group=Clus ;
NOTE: External file D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\DMVQSCORECODE.sas opened.
NOTE: The CODE statement has finished with return code=0 and status=statistics.
21263      run;
MPRINT(EM_DIAGRAM):   run;
 
21264      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: There were 227 observations read from the data set WORK.CLUS_DMDB.
NOTE: PROCEDURE DMVQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
21265      libname _spdslib;
MPRINT(EM_DIAGRAM):    libname _spdslib;
WARNING: Libref _SPDSLIB is not assigned.
21266      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21267      * Clus: Cluster Label;
MPRINT(EM_DIAGRAM):   * Clus: Cluster Label;
21268      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21269      data EMWS1.Clus_LABEL;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_LABEL;
21270      length _SEGMENT_ 8 Label $80;
MPRINT(EM_DIAGRAM):   length _SEGMENT_ 8 Label $80;
21271      format _SEGMENT_ 4.;
MPRINT(EM_DIAGRAM):   format _SEGMENT_ 4.;
21272      label _SEGMENT_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentName_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = "Segment Name";
21273      label Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentLabel_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Label = "Segment Label";
21274      _SEGMENT_= 1;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 1;
21275      Label='Cluster1';
MPRINT(EM_DIAGRAM):   Label='Cluster1';
21276      output;
MPRINT(EM_DIAGRAM):   output;
21277      _SEGMENT_= 2;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 2;
21278      Label='Cluster2';
MPRINT(EM_DIAGRAM):   Label='Cluster2';
21279      output;
MPRINT(EM_DIAGRAM):   output;
21280      _SEGMENT_= 3;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 3;
21281      Label='Cluster3';
MPRINT(EM_DIAGRAM):   Label='Cluster3';
21282      output;
MPRINT(EM_DIAGRAM):   output;
21283      _SEGMENT_= 4;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 4;
21284      Label='Cluster4';
MPRINT(EM_DIAGRAM):   Label='Cluster4';
21285      output;
MPRINT(EM_DIAGRAM):   output;
21286      _SEGMENT_= 5;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 5;
21287      Label='Cluster5';
MPRINT(EM_DIAGRAM):   Label='Cluster5';
21288      output;
MPRINT(EM_DIAGRAM):   output;
21289      _SEGMENT_= 6;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 6;
21290      Label='Cluster6';
MPRINT(EM_DIAGRAM):   Label='Cluster6';
21291      output;
MPRINT(EM_DIAGRAM):   output;
21292      _SEGMENT_= 7;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 7;
21293      Label='Cluster7';
MPRINT(EM_DIAGRAM):   Label='Cluster7';
21294      output;
MPRINT(EM_DIAGRAM):   output;
21295      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set EMWS1.CLUS_LABEL has 7 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "02:24:10 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 16, 2022
Time:                02:24:10 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O22MC62X "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O22MC62X new;
MPRINT(EM_DIAGRAM):   run;
21397      proc transpose data=EMWS1.Clus_OUTVAR out=WORK.Clus_OUTVAR(rename=(COl2=NAME) where=(COL1='IMPUTED'));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Clus_OUTVAR out=WORK.Clus_OUTVAR(rename=(COl2=NAME) where=(COL1='IMPUTED'));
21398      var AvgTumorSize--irradiatyes;
MPRINT(EM_DIAGRAM):   var AvgTumorSize--irradiatyes;
21399      where _TYPE_ in('TYPE' 'VARIABLE');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('TYPE' 'VARIABLE');
21400      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.CLUS_OUTVAR.
      WHERE _TYPE_ in ('TYPE', 'VARIABLE');
NOTE: The data set WORK.CLUS_OUTVAR has 0 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21401      proc sort data=WORK.Clus_OUTVAR;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus_OUTVAR;
21402      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
21403      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK.CLUS_OUTVAR has 0 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21404      proc sort data=EMWS1.Clus_VariableSet(KEEP=NAME ROLE LEVEL) out=WORK.Clus_SORTEDVARS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_VariableSet(KEEP=NAME ROLE LEVEL) out=WORK.Clus_SORTEDVARS;
21405      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
21406      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_VARIABLESET.
NOTE: The data set WORK.CLUS_SORTEDVARS has 13 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
21407      data WORK.Clus_OUTVAR;
MPRINT(EM_DIAGRAM):   data WORK.Clus_OUTVAR;
21408      merge WORK.Clus_OUTVAR(in=INVAR) WORK.Clus_SORTEDVARS;
MPRINT(EM_DIAGRAM):   merge WORK.Clus_OUTVAR(in=INVAR) WORK.Clus_SORTEDVARS;
21409      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
21410      if INVAR then output;
MPRINT(EM_DIAGRAM):   if INVAR then output;
21411      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 0 observations read from the data set WORK.CLUS_OUTVAR.
NOTE: There were 13 observations read from the data set WORK.CLUS_SORTEDVARS.
NOTE: The data set WORK.CLUS_OUTVAR has 0 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
21412      filename emflow "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21413      *------------------------------------------------------------*;
21414      * Clus: Scoring DATA data;
21415      *------------------------------------------------------------*;
21416      data EMWS1.Clus_TRAIN
21417      / view=EMWS1.Clus_TRAIN
21418      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_TRAIN / view=EMWS1.Clus_TRAIN ;
21419      set EMWS1.Impt_TRAIN
21420      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TRAIN ;
21421      %inc emflow;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize AvgTumorSize ;
MPRINT(EM_DIAGRAM):   drop T_AvgTumorSize ;
MPRINT(EM_DIAGRAM):   if missing( AvgTumorSize ) then T_AvgTumorSize = .;
MPRINT(EM_DIAGRAM):   else T_AvgTumorSize = (AvgTumorSize - 26.5594713656387) * 0.09506760766352;
MPRINT(EM_DIAGRAM):   *** Standardize Avginv_node_group ;
MPRINT(EM_DIAGRAM):   drop T_Avginv_node_group ;
MPRINT(EM_DIAGRAM):   if missing( Avginv_node_group ) then T_Avginv_node_group = .;
MPRINT(EM_DIAGRAM):   else T_Avginv_node_group = (Avginv_node_group - 2.22466960352422) * 0.31173971918285;
MPRINT(EM_DIAGRAM):   *** Standardize deg_malig ;
MPRINT(EM_DIAGRAM):   drop T_deg_malig ;
MPRINT(EM_DIAGRAM):   if missing( deg_malig ) then T_deg_malig = .;
MPRINT(EM_DIAGRAM):   else T_deg_malig = (deg_malig - 2.05286343612334) * 1.34265662978187;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_node_caps ;
MPRINT(EM_DIAGRAM):   drop IMP_node_capsno IMP_node_capsyes ;
MPRINT(EM_DIAGRAM):   if missing( IMP_node_caps ) then do;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = .;
MPRINT(EM_DIAGRAM):   IMP_node_capsyes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(EM_DIAGRAM):   _dm3 = put( IMP_node_caps , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = 0.34107635208911;
MPRINT(EM_DIAGRAM):   IMP_node_capsyes = -0.34107635208911;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = -1.45948950661386;
MPRINT(EM_DIAGRAM):   IMP_node_capsyes = 1.45948950661386;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = .;
MPRINT(EM_DIAGRAM):   IMP_node_capsyes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for irradiat ;
MPRINT(EM_DIAGRAM):   drop irradiatno irradiatyes ;
MPRINT(EM_DIAGRAM):   if missing( irradiat ) then do;
MPRINT(EM_DIAGRAM):   irradiatno = .;
MPRINT(EM_DIAGRAM):   irradiatyes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(EM_DIAGRAM):   _dm3 = put( irradiat , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   irradiatno = 0.38459969953978;
MPRINT(EM_DIAGRAM):   irradiatyes = -0.38459969953978;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   irradiatno = -1.29432591191273;
MPRINT(EM_DIAGRAM):   irradiatyes = 1.29432591191273;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   irradiatno = .;
MPRINT(EM_DIAGRAM):   irradiatyes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUSvlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUSvads [7] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 7;
MPRINT(EM_DIAGRAM):   CLUSvads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_AvgTumorSize ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_AvgTumorSize - 0.92465064596587 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_AvgTumorSize - 0.45780078690392 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_AvgTumorSize - 0.37461663019833 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_AvgTumorSize - 0.52940619652228 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_AvgTumorSize - -0.98485015939006 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_AvgTumorSize - -0.15384742416654 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_AvgTumorSize - 1.46789411832887 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_Avginv_node_group ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_Avginv_node_group - 1.17692043761985 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_Avginv_node_group - 4.06051284006127 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_Avginv_node_group - 0.09622274445262 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_Avginv_node_group - -0.34181152762995 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_Avginv_node_group - -0.365152039938 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_Avginv_node_group - 0.11333786629011 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_Avginv_node_group - 0.05465744856157 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_deg_malig ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_deg_malig - 0.50444682692245 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_deg_malig - 1.10384710807507 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_deg_malig - 0.37657476694322 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_deg_malig - 0.22165284812224 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_deg_malig - -0.73335471367645 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_deg_malig - 0.32392156577531 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_deg_malig - 1.00314786084143 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( IMP_node_capsno ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( IMP_node_capsno - -1.45948950661386 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( IMP_node_capsno - -1.23441877427599 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( IMP_node_capsno - 0.34107635208911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( IMP_node_capsno - 0.34107635208911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( IMP_node_capsno - 0.34107635208911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( IMP_node_capsno - -1.45948950661386 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( IMP_node_capsno - -1.45948950661386 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( IMP_node_capsyes ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( IMP_node_capsyes - 1.45948950661386 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( IMP_node_capsyes - 1.23441877427599 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( IMP_node_capsyes - -0.34107635208911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( IMP_node_capsyes - -0.34107635208911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( IMP_node_capsyes - -0.34107635208911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( IMP_node_capsyes - 1.45948950661386 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( IMP_node_capsyes - 1.45948950661386 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( irradiatno ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( irradiatno - 0.14475318361799 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( irradiatno - -0.24499740475491 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( irradiatno - -1.29432591191273 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( irradiatno - 0.38459969953978 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( irradiatno - 0.36221402472041 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( irradiatno - -0.70176393140008 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( irradiatno - -1.29432591191273 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( irradiatyes ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( irradiatyes - -0.14475318361799 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( irradiatyes - 0.24499740475491 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( irradiatyes - 1.29432591191273 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( irradiatyes - -0.38459969953978 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( irradiatyes - -0.36221402472041 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( irradiatyes - 0.70176393140008 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( irradiatyes - 1.29432591191273 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   _vqnvar = 5 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 3.9790393202565E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 7;
MPRINT(EM_DIAGRAM):   if CLUSvads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (5 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUSvlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 6 then _SEGMENT_LABEL_="Cluster6";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 7 then _SEGMENT_LABEL_="Cluster7";
MPRINT(EM_DIAGRAM):   run;
21620      run;
 
NOTE: DATA STEP view saved on file EMWS1.CLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
21621      quit;
21622      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
21623      filename emflow "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21624      *------------------------------------------------------------*;
21625      * Clus: Scoring VALIDATE data;
21626      *------------------------------------------------------------*;
21627      data EMWS1.Clus_VALIDATE
21628      / view=EMWS1.Clus_VALIDATE
21629      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_VALIDATE / view=EMWS1.Clus_VALIDATE ;
21630      set EMWS1.Impt_VALIDATE
21631      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_VALIDATE ;
21632      %inc emflow;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize AvgTumorSize ;
MPRINT(EM_DIAGRAM):   drop T_AvgTumorSize ;
MPRINT(EM_DIAGRAM):   if missing( AvgTumorSize ) then T_AvgTumorSize = .;
MPRINT(EM_DIAGRAM):   else T_AvgTumorSize = (AvgTumorSize - 26.5594713656387) * 0.09506760766352;
MPRINT(EM_DIAGRAM):   *** Standardize Avginv_node_group ;
MPRINT(EM_DIAGRAM):   drop T_Avginv_node_group ;
MPRINT(EM_DIAGRAM):   if missing( Avginv_node_group ) then T_Avginv_node_group = .;
MPRINT(EM_DIAGRAM):   else T_Avginv_node_group = (Avginv_node_group - 2.22466960352422) * 0.31173971918285;
MPRINT(EM_DIAGRAM):   *** Standardize deg_malig ;
MPRINT(EM_DIAGRAM):   drop T_deg_malig ;
MPRINT(EM_DIAGRAM):   if missing( deg_malig ) then T_deg_malig = .;
MPRINT(EM_DIAGRAM):   else T_deg_malig = (deg_malig - 2.05286343612334) * 1.34265662978187;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_node_caps ;
MPRINT(EM_DIAGRAM):   drop IMP_node_capsno IMP_node_capsyes ;
MPRINT(EM_DIAGRAM):   if missing( IMP_node_caps ) then do;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = .;
MPRINT(EM_DIAGRAM):   IMP_node_capsyes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(EM_DIAGRAM):   _dm3 = put( IMP_node_caps , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = 0.34107635208911;
MPRINT(EM_DIAGRAM):   IMP_node_capsyes = -0.34107635208911;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = -1.45948950661386;
MPRINT(EM_DIAGRAM):   IMP_node_capsyes = 1.45948950661386;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   IMP_node_capsno = .;
MPRINT(EM_DIAGRAM):   IMP_node_capsyes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for irradiat ;
MPRINT(EM_DIAGRAM):   drop irradiatno irradiatyes ;
MPRINT(EM_DIAGRAM):   if missing( irradiat ) then do;
MPRINT(EM_DIAGRAM):   irradiatno = .;
MPRINT(EM_DIAGRAM):   irradiatyes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(EM_DIAGRAM):   _dm3 = put( irradiat , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   irradiatno = 0.38459969953978;
MPRINT(EM_DIAGRAM):   irradiatyes = -0.38459969953978;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   irradiatno = -1.29432591191273;
MPRINT(EM_DIAGRAM):   irradiatyes = 1.29432591191273;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   irradiatno = .;
MPRINT(EM_DIAGRAM):   irradiatyes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUSvlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUSvads [7] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 7;
MPRINT(EM_DIAGRAM):   CLUSvads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_AvgTumorSize ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_AvgTumorSize - 0.92465064596587 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_AvgTumorSize - 0.45780078690392 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_AvgTumorSize - 0.37461663019833 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_AvgTumorSize - 0.52940619652228 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_AvgTumorSize - -0.98485015939006 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_AvgTumorSize - -0.15384742416654 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_AvgTumorSize - 1.46789411832887 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_Avginv_node_group ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_Avginv_node_group - 1.17692043761985 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_Avginv_node_group - 4.06051284006127 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_Avginv_node_group - 0.09622274445262 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_Avginv_node_group - -0.34181152762995 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_Avginv_node_group - -0.365152039938 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_Avginv_node_group - 0.11333786629011 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_Avginv_node_group - 0.05465744856157 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_deg_malig ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_deg_malig - 0.50444682692245 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_deg_malig - 1.10384710807507 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_deg_malig - 0.37657476694322 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_deg_malig - 0.22165284812224 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_deg_malig - -0.73335471367645 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_deg_malig - 0.32392156577531 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_deg_malig - 1.00314786084143 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( IMP_node_capsno ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( IMP_node_capsno - -1.45948950661386 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( IMP_node_capsno - -1.23441877427599 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( IMP_node_capsno - 0.34107635208911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( IMP_node_capsno - 0.34107635208911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( IMP_node_capsno - 0.34107635208911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( IMP_node_capsno - -1.45948950661386 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( IMP_node_capsno - -1.45948950661386 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( IMP_node_capsyes ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( IMP_node_capsyes - 1.45948950661386 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( IMP_node_capsyes - 1.23441877427599 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( IMP_node_capsyes - -0.34107635208911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( IMP_node_capsyes - -0.34107635208911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( IMP_node_capsyes - -0.34107635208911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( IMP_node_capsyes - 1.45948950661386 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( IMP_node_capsyes - 1.45948950661386 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( irradiatno ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( irradiatno - 0.14475318361799 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( irradiatno - -0.24499740475491 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( irradiatno - -1.29432591191273 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( irradiatno - 0.38459969953978 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( irradiatno - 0.36221402472041 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( irradiatno - -0.70176393140008 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( irradiatno - -1.29432591191273 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( irradiatyes ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( irradiatyes - -0.14475318361799 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( irradiatyes - 0.24499740475491 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( irradiatyes - 1.29432591191273 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( irradiatyes - -0.38459969953978 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( irradiatyes - -0.36221402472041 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( irradiatyes - 0.70176393140008 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( irradiatyes - 1.29432591191273 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   _vqnvar = 5 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 3.9790393202565E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 7;
MPRINT(EM_DIAGRAM):   if CLUSvads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (5 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUSvlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 6 then _SEGMENT_LABEL_="Cluster6";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 7 then _SEGMENT_LABEL_="Cluster7";
21831      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.CLUS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
21832      quit;
21833      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
21834      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21835      * Clus: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Clus: Computing metadata for TRAIN data;
21836      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.CLUS_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Clus_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Clus_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Clus_TRAIN out=WORK.M1C1EKZN noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1C1EKZN;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1C1EKZN(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1C1EKZN;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1C1EKZN;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0DINLJK NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0DINLJK;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0DINLJK;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1UMG91W(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0DINLJK;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0DINLJK;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0DINLJK;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0DINLJK;
MPRINT(EMADVISECOLUMNS):   set WORK.M0DINLJK;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Impt_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Clus";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   retain _segFlag_ 0;
MPRINT(EM_DIAGRAM):   drop _segFlag_;
MPRINT(EM_DIAGRAM):   if upcase(name) = '_SEGMENT_' then do;
MPRINT(EM_DIAGRAM):   _segFlag_ = 1;
MPRINT(EM_DIAGRAM):   role = 'SEGMENT';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   label = 'Segment Variable';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = '_SEGMENT_LABEL_' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   label = 'Segment Description';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = 'DISTANCE' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = '_IMPUTE_' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if ^_segFlag_ and _eof_ then do;
MPRINT(EM_DIAGRAM):   type = 'N';
MPRINT(EM_DIAGRAM):   index = 'N';
MPRINT(EM_DIAGRAM):   indexType = 'NONE';
MPRINT(EM_DIAGRAM):   format = '';
MPRINT(EM_DIAGRAM):   informat = '';
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   role = 'SEGMENT';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   label = 'Segment Variable';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_LABEL_';
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   label = 'Segment Description';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = 'Distance';
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   label = 'Distance to Cluster Seed';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = '_Impute_';
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   label = '';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.CLUS_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.CLUS_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "02:24:11 o'clock" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                April 16, 2022
Time:                02:24:11 o'clock
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0XL6FAY "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0XL6FAY new;
MPRINT(EM_DIAGRAM):   run;
22246      data WORK.M1I721D9;
MPRINT(EM_DIAGRAM):    data WORK.M1I721D9;
22247      set WORK.M1I721D9;
MPRINT(EM_DIAGRAM):   set WORK.M1I721D9;
22248      if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
22249      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.M1I721D9.
NOTE: The data set WORK.M1I721D9 has 5 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22250      data WORK.M1I721D9;
MPRINT(EM_DIAGRAM):    data WORK.M1I721D9;
22251      set WORK.M1I721D9 end=_eof_ nobs=_nobs_;
MPRINT(EM_DIAGRAM):   set WORK.M1I721D9 end=_eof_ nobs=_nobs_;
22252      output;
MPRINT(EM_DIAGRAM):   output;
22253      if _eof_ then do;
MPRINT(EM_DIAGRAM):   if _eof_ then do;
22254      name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
22255      ROLE = 'TARGET';
MPRINT(EM_DIAGRAM):   ROLE = 'TARGET';
22256      LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
22257      LABEL = 'Segment Variable';
MPRINT(EM_DIAGRAM):   LABEL = 'Segment Variable';
22258      TYPE = 'N';
MPRINT(EM_DIAGRAM):   TYPE = 'N';
22259      FORMAT = '';
MPRINT(EM_DIAGRAM):   FORMAT = '';
22260      INFORMAT = '';
MPRINT(EM_DIAGRAM):   INFORMAT = '';
22261      USE='Y';
MPRINT(EM_DIAGRAM):   USE='Y';
22262      output;
MPRINT(EM_DIAGRAM):   output;
22263      end;
MPRINT(EM_DIAGRAM):   end;
22264      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.M1I721D9.
NOTE: The data set WORK.M1I721D9 has 6 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22265      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22266      * Clus: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Clus: Create decision matrix;
22267      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22268      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22269      * Clus: Tree Variables Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Tree Variables Macro ;
22270      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22271      %macro EM_TREEVARS;
22272          AvgTumorSize Avginv_node_group IMP_node_caps deg_malig irradiat
22273      %mend EM_TREEVARS;
22274      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22275      * Clus: Tree Targets Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Tree Targets Macro ;
22276      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22277      %macro EM_TREETARGETS;
22278          _SEGMENT_
22279      %mend EM_TREETARGETS;
22280      data EMWS1.EM_Clus / view=EMWS1.EM_Clus;
MPRINT(EM_DIAGRAM):   data EMWS1.EM_Clus / view=EMWS1.EM_Clus;
22281      set
22281    ! EMWS1.Clus_TRAIN(keep=%EM_TREEVARS %EM_TREETARGETS);
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_TRAIN(keep
MPRINT(EM_DIAGRAM):  =AvgTumorSize Avginv_node_group IMP_node_caps deg_malig irradiat _SEGMENT_);
22282      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.EM_CLUS.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.CLUS_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Clus: Interval Inputs Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22283      *------------------------------------------------------------* ;
22284      * Clus: Interval Inputs Macro ;
22285      *------------------------------------------------------------* ;
22286      %macro INTINPUTS;
22287          AvgTumorSize Avginv_node_group deg_malig
22288      %mend INTINPUTS;
22289      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22290      * Clus: Binary and Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Binary and Nominal Inputs Macro ;
22291      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22292      %macro NOMINPUTS;
22293          IMP_node_caps irradiat
22294      %mend NOMINPUTS;
22295      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22296      * Clus: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Ordinal Inputs Macro ;
22297      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22298      %macro ORDINPUTS;
22299
22300      %mend ORDINPUTS;
22301      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22302      * Clus: Run ARBOR procedure;
MPRINT(EM_DIAGRAM):   * Clus: Run ARBOR procedure;
22303      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
22304      proc arbor data=EMWS1.EM_Clus
22305      MAXSURRS=4
22306      ;
MPRINT(EM_DIAGRAM):    proc arbor data=EMWS1.EM_Clus MAXSURRS=4 ;
22307      ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   input
22308      input %INTINPUTS
MPRINT(INTINPUTS):   AvgTumorSize Avginv_node_group deg_malig
22309      / level = interval;
MPRINT(EM_DIAGRAM):   / level = interval;
MPRINT(EM_DIAGRAM):   input
22310      input %NOMINPUTS
MPRINT(NOMINPUTS):   IMP_node_caps irradiat
22311      / level=nominal;
MPRINT(EM_DIAGRAM):   / level=nominal;
22312      target _SEGMENT_ / level=NOMINAL
22313      Criterion=PROBCHISQ
22314      ;
MPRINT(EM_DIAGRAM):   target _SEGMENT_ / level=NOMINAL Criterion=PROBCHISQ ;
22315      ;
MPRINT(EM_DIAGRAM):   ;
22316      Performance DISK
22317      ;
MPRINT(EM_DIAGRAM):   Performance DISK ;
22318      MAKEMACRO NLEAVES=nleaves;
MPRINT(EM_DIAGRAM):   MAKEMACRO NLEAVES=nleaves;
NOTE: 1481954 kilobytes of physical memory.
NOTE: Will use 227 out of 227 training cases.
NOTE: Using memory pool with 41134080 bytes.
NOTE: Passed training data 16 times.
NOTE: Training used 47000 bytes of work memory.
NOTE: The subtree sequence contains 7 subtrees. The largest has 13 nodes and 7 leaves.
NOTE: Using subtree with 13 nodes and 7 leaves.
NOTE: Created macro variable NLEAVES equal to 7.
22319      save
22320      MODEL=EMWS1.Clus_PLOTDS
22321      SEQUENCE=EMWS1.Clus_OUTSEQ
22322      IMPORTANCE=EMWS1.Clus_OUTIMPORT
22323      NODESTAT=EMWS1.Clus_OUTNODES
22324      SUMMARY=WORK.OUTSUMMARY_TREE_2OJNACU
22325      STATSBYNODE=WORK.OUTSTATS_TREE_2OJNACU
22326      Pathlistnonmissing = WORK.OUTPATH_TREE_2OJNACU
22327      Rules = WORK.OUTRULES_TREE_2OJNACU
22328      ;
MPRINT(EM_DIAGRAM):   save MODEL=EMWS1.Clus_PLOTDS SEQUENCE=EMWS1.Clus_OUTSEQ IMPORTANCE=EMWS1.Clus_OUTIMPORT NODESTAT=EMWS1.Clus_OUTNODES SUMMARY=WORK.OUTSUMMARY_TREE_2OJNACU STATSBYNODE=WORK.OUTSTATS_TREE_2OJNACU Pathlistnonmissing =
WORK.OUTPATH_TREE_2OJNACU Rules = WORK.OUTRULES_TREE_2OJNACU ;
NOTE: The data set EMWS1.CLUS_OUTIMPORT has 5 observations and 5 variables.
NOTE: The data set EMWS1.CLUS_PLOTDS has 593 observations and 4 variables.
NOTE: The data set EMWS1.CLUS_OUTNODES has 13 observations and 30 variables.
NOTE: The data set WORK.OUTPATH_TREE_2OJNACU has 55 observations and 7 variables.
NOTE: The data set WORK.OUTRULES_TREE_2OJNACU has 132 observations and 6 variables.
NOTE: The data set EMWS1.CLUS_OUTSEQ has 7 observations and 11 variables.
NOTE: The data set WORK.OUTSTATS_TREE_2OJNACU has 117 observations and 5 variables.
NOTE: The data set WORK.OUTSUMMARY_TREE_2OJNACU has 32 observations and 10 variables.
22329      run;
MPRINT(EM_DIAGRAM):   run;
 
22330      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: There were 227 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 227 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View EMWS1.EM_CLUS.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.18 seconds
 
NOTE: There were 227 observations read from the data set EMWS1.CLUS_TRAIN.
NOTE: There were 227 observations read from the data set EMWS1.EM_CLUS.
NOTE: The data set WORK._NAMEDAT has 7 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.28 seconds
      cpu time            0.20 seconds
 
 
22331      data EMWS1.Clus_OUTIMPORT;
MPRINT(EM_DIAGRAM):    data EMWS1.Clus_OUTIMPORT;
22332      set EMWS1.Clus_OUTIMPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTIMPORT;
22333      label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))" NRULES = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))" IMPORTANCE =
22334         "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))" NSURROGATES = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
22335      VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))" RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
22336      ;
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" VIMPORTANCE = "Validation Importance" RATIO = "Ratio of Validation to Training
Importance" ;
22337      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable VIMPORTANCE is uninitialized.
NOTE: Variable RATIO is uninitialized.
NOTE: There were 5 observations read from the data set EMWS1.CLUS_OUTIMPORT.
NOTE: The data set EMWS1.CLUS_OUTIMPORT has 5 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
22338      filename x "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_DIAGRAM):   filename x "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
22339      data temp;
MPRINT(EM_DIAGRAM):    data temp;
22340      length varname $18;
MPRINT(EM_DIAGRAM):   length varname $18;
22341      retain varname;
MPRINT(EM_DIAGRAM):   retain varname;
22342      set WORK.OUTPATH_TREE_2OJNACU;
MPRINT(EM_DIAGRAM):   set WORK.OUTPATH_TREE_2OJNACU;
22343      if ^missing(variable) then varname=variable;
MPRINT(EM_DIAGRAM):   if ^missing(variable) then varname=variable;
22344      else if ^missing(var_name) then varname=var_name;
MPRINT(EM_DIAGRAM):   else if ^missing(var_name) then varname=var_name;
22345      output;
MPRINT(EM_DIAGRAM):   output;
22346      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 55 observations read from the data set WORK.OUTPATH_TREE_2OJNACU.
NOTE: The data set WORK.TEMP has 55 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22347      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
22348      by node;
MPRINT(EM_DIAGRAM):   by node;
22349      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 55 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 55 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22350      proc sort data=EMWS1.Clus_OUTNODES out=outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_OUTNODES out=outnodes;
22351      by node;
MPRINT(EM_DIAGRAM):   by node;
22352      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_OUTNODES.
NOTE: The data set WORK.OUTNODES has 13 observations and 30 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22353      data temp;
MPRINT(EM_DIAGRAM):   data temp;
22354      merge temp(in=_a) outnodes(keep= node
22355      NPRIORS
22356      P__SEGMENT_4
22357      P__SEGMENT_5
22358      P__SEGMENT_1
22359      P__SEGMENT_6
22360      P__SEGMENT_7
22361      P__SEGMENT_3
22362      P__SEGMENT_2
22363      );
MPRINT(EM_DIAGRAM):   merge temp(in=_a) outnodes(keep= node NPRIORS P__SEGMENT_4 P__SEGMENT_5 P__SEGMENT_1 P__SEGMENT_6 P__SEGMENT_7 P__SEGMENT_3 P__SEGMENT_2 );
22364      by node;
MPRINT(EM_DIAGRAM):   by node;
22365      if _a;
MPRINT(EM_DIAGRAM):   if _a;
22366      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 55 observations read from the data set WORK.TEMP.
NOTE: There were 13 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMP has 55 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22367      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
22368      by node descending varname descending numeric_value;
MPRINT(EM_DIAGRAM):   by node descending varname descending numeric_value;
22369      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 55 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 55 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22370      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
22371      file x;
MPRINT(EM_DIAGRAM):   file x;
22372      set temp;
MPRINT(EM_DIAGRAM):   set temp;
22373      by node descending varname;
MPRINT(EM_DIAGRAM):   by node descending varname;
22374      retain origvar oldnode string;
MPRINT(EM_DIAGRAM):   retain origvar oldnode string;
22375      length origvar $32 oldnode 8 string $200;
MPRINT(EM_DIAGRAM):   length origvar $32 oldnode 8 string $200;
22376      if _n_ = 1 then do;
MPRINT(EM_DIAGRAM):   if _n_ = 1 then do;
22377      origvar = varname;
MPRINT(EM_DIAGRAM):   origvar = varname;
22378      oldnode = node;
MPRINT(EM_DIAGRAM):   oldnode = node;
22379      end;
MPRINT(EM_DIAGRAM):   end;
22380      if first.node then do;
MPRINT(EM_DIAGRAM):   if first.node then do;
22381      put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
22382      put " Node = " node;
MPRINT(EM_DIAGRAM):   put " Node = " node;
22383      put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
22384      end;
MPRINT(EM_DIAGRAM):   end;
22385      if first.varname then do;
MPRINT(EM_DIAGRAM):   if first.varname then do;
22386      if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
22387      if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
22388      if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
22389      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
22390      string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
22391      end;
MPRINT(EM_DIAGRAM):   end;
22392      else do;
MPRINT(EM_DIAGRAM):   else do;
22393      string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
22394      end;
MPRINT(EM_DIAGRAM):   end;
22395      end;
MPRINT(EM_DIAGRAM):   end;
22396      end;
MPRINT(EM_DIAGRAM):   end;
22397      else do;
MPRINT(EM_DIAGRAM):   else do;
22398      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
22399      string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
22400      end;
MPRINT(EM_DIAGRAM):   end;
22401      else do;
MPRINT(EM_DIAGRAM):   else do;
22402      string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
22403      end;
MPRINT(EM_DIAGRAM):   end;
22404      end;
MPRINT(EM_DIAGRAM):   end;
22405      end;
MPRINT(EM_DIAGRAM):   end;
22406      else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
22407      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
22408      string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
22409      end;
MPRINT(EM_DIAGRAM):   end;
22410      else do;
MPRINT(EM_DIAGRAM):   else do;
22411      string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
22412      end;
MPRINT(EM_DIAGRAM):   end;
22413      end;
MPRINT(EM_DIAGRAM):   end;
22414      else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
22415      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
22416      string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals Missing";
22417      end;
MPRINT(EM_DIAGRAM):   end;
22418      else do;
MPRINT(EM_DIAGRAM):   else do;
22419      string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals Missing";
22420      end;
MPRINT(EM_DIAGRAM):   end;
22421      end;
MPRINT(EM_DIAGRAM):   end;
22422      else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISNOTMISSING") then do;
22423      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
22424      string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals All Values";
22425      end;
MPRINT(EM_DIAGRAM):   end;
22426      else do;
MPRINT(EM_DIAGRAM):   else do;
22427      string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals All Values";
22428      end;
MPRINT(EM_DIAGRAM):   end;
22429      end;
MPRINT(EM_DIAGRAM):   end;
22430      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
22431      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
22432      end;
MPRINT(EM_DIAGRAM):   end;
22433      else do;
MPRINT(EM_DIAGRAM):   else do;
22434      if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
22435      if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
22436      if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
22437      if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
22438      else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
22439      end;
MPRINT(EM_DIAGRAM):   end;
22440      end;
MPRINT(EM_DIAGRAM):   end;
22441      else do;
MPRINT(EM_DIAGRAM):   else do;
22442      if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
22443      else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
22444      end;
MPRINT(EM_DIAGRAM):   end;
22445      end;
MPRINT(EM_DIAGRAM):   end;
22446      else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
22447      string = strip(string)||", "||strip(character_value);
MPRINT(EM_DIAGRAM):   string = strip(string)||", "||strip(character_value);
22448      end;
MPRINT(EM_DIAGRAM):   end;
22449      else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
22450      end;
MPRINT(EM_DIAGRAM):   end;
22451      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
22452      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
22453      end;
MPRINT(EM_DIAGRAM):   end;
22454      if last.varname then do;
MPRINT(EM_DIAGRAM):   if last.varname then do;
22455      if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION in ("ISMISSING") then do;
22456      if ^first.varname then do;
MPRINT(EM_DIAGRAM):   if ^first.varname then do;
22457      string = strip(string) || " or MISSING";
MPRINT(EM_DIAGRAM):   string = strip(string) || " or MISSING";
22458      end;
MPRINT(EM_DIAGRAM):   end;
22459      end;
MPRINT(EM_DIAGRAM):   end;
22460      put string;
MPRINT(EM_DIAGRAM):   put string;
22461      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
22462      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
22463      end;
MPRINT(EM_DIAGRAM):   end;
22464      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
22465      put "then ";
MPRINT(EM_DIAGRAM):   put "then ";
22466      put " Tree Node Identifier   = " node;
MPRINT(EM_DIAGRAM):   put " Tree Node Identifier   = " node;
22467      put " Number of Observations = " NPRIORS;
MPRINT(EM_DIAGRAM):   put " Number of Observations = " NPRIORS;
22468      put " Predicted: _SEGMENT_=4  = " P__SEGMENT_4;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=4  = " P__SEGMENT_4;
22469      put " Predicted: _SEGMENT_=5  = " P__SEGMENT_5;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=5  = " P__SEGMENT_5;
22470      put " Predicted: _SEGMENT_=1  = " P__SEGMENT_1;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=1  = " P__SEGMENT_1;
22471      put " Predicted: _SEGMENT_=6  = " P__SEGMENT_6;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=6  = " P__SEGMENT_6;
22472      put " Predicted: _SEGMENT_=7  = " P__SEGMENT_7;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=7  = " P__SEGMENT_7;
22473      put " Predicted: _SEGMENT_=3  = " P__SEGMENT_3;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=3  = " P__SEGMENT_3;
22474      put " Predicted: _SEGMENT_=2  = " P__SEGMENT_2;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=2  = " P__SEGMENT_2;
22475      put " ";
MPRINT(EM_DIAGRAM):   put " ";
22476      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
22477      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
22478      end;
MPRINT(EM_DIAGRAM):   end;
22479      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      22390:67    22393:66    22437:108   22438:72
NOTE: The file X is:
      Filename=D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=April 16, 2022 02:24:12 o'clock,
      Create Time=April 16, 2022 02:24:12 o'clock
 
NOTE: 122 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 55 observations read from the data set WORK.TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22480      filename x;
MPRINT(EM_DIAGRAM):    filename x;
NOTE: Fileref X has been deassigned.
22481      /* belowtext */
22482      data templabel;
MPRINT(EM_DIAGRAM):    data templabel;
22483      set WORK.OUTRULES_TREE_2OJNACU;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_2OJNACU;
22484      if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
22485      rename character_value = belowtext;
MPRINT(EM_DIAGRAM):   rename character_value = belowtext;
22486      keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
22487      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.OUTRULES_TREE_2OJNACU.
NOTE: The data set WORK.TEMPLABEL has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22488      data tempvar;
MPRINT(EM_DIAGRAM):   data tempvar;
22489      set WORK.OUTRULES_TREE_2OJNACU;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_2OJNACU;
22490      if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
22491      keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
22492      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.OUTRULES_TREE_2OJNACU.
NOTE: The data set WORK.TEMPVAR has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22493      proc sort data=templabel;
MPRINT(EM_DIAGRAM):   proc sort data=templabel;
22494      by node;
MPRINT(EM_DIAGRAM):   by node;
22495      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPLABEL.
NOTE: The data set WORK.TEMPLABEL has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22496      proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
22497      by node;
MPRINT(EM_DIAGRAM):   by node;
22498      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22499      data tempbelow;
MPRINT(EM_DIAGRAM):   data tempbelow;
22500      merge templabel tempvar;
MPRINT(EM_DIAGRAM):   merge templabel tempvar;
22501      by node;
MPRINT(EM_DIAGRAM):   by node;
22502      if missing(belowtext) then belowtext= character_value;
MPRINT(EM_DIAGRAM):   if missing(belowtext) then belowtext= character_value;
22503      keep node belowtext;
MPRINT(EM_DIAGRAM):   keep node belowtext;
22504      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPLABEL.
NOTE: There were 6 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPBELOW has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22505      proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
22506      by node;
MPRINT(EM_DIAGRAM):   by node;
22507      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.TEMPBELOW has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22508      /* abovetext */
22509      data tempoutrules;
MPRINT(EM_DIAGRAM):   data tempoutrules;
22510      set WORK.OUTRULES_TREE_2OJNACU;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_2OJNACU;
22511      if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
MPRINT(EM_DIAGRAM):   if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
22512      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.OUTRULES_TREE_2OJNACU.
NOTE: The data set WORK.TEMPOUTRULES has 8 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22513      proc sort data=tempoutrules;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutrules;
22514      by node numeric_value;
MPRINT(EM_DIAGRAM):   by node numeric_value;
22515      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPOUTRULES has 8 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22516      data tempabove;
MPRINT(EM_DIAGRAM):   data tempabove;
22517      set tempoutrules(rename=(node=parent));
MPRINT(EM_DIAGRAM):   set tempoutrules(rename=(node=parent));
22518      by parent numeric_value;
MPRINT(EM_DIAGRAM):   by parent numeric_value;
22519      retain abovetext tempstring flag branch origval origchar;
MPRINT(EM_DIAGRAM):   retain abovetext tempstring flag branch origval origchar;
22520      *length abovetext tempstring origchar $45;
MPRINT(EM_DIAGRAM):   *length abovetext tempstring origchar $45;
22521      length abovetext $256;
MPRINT(EM_DIAGRAM):   length abovetext $256;
22522      length tempstring origchar $64;
MPRINT(EM_DIAGRAM):   length tempstring origchar $64;
22523      if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_DIAGRAM):   if STAT in ("INTERVAL", "ORDINAL") then do;
22524      if first.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent then do;
22525      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
22526      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
22527      abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(NUMERIC_VALUE);
22528      branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
22529      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
22530      output;
MPRINT(EM_DIAGRAM):   output;
22531      end;
MPRINT(EM_DIAGRAM):   end;
22532      else do;
MPRINT(EM_DIAGRAM):   else do;
22533      abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(CHARACTER_VALUE);
22534      branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
22535      origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
22536      output;
MPRINT(EM_DIAGRAM):   output;
22537      end;
MPRINT(EM_DIAGRAM):   end;
22538      if first.parent AND last.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent AND last.parent then do;
22539      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
22540      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
22541      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
22542      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
22543      output;
MPRINT(EM_DIAGRAM):   output;
22544      end;
MPRINT(EM_DIAGRAM):   end;
22545      else do;
MPRINT(EM_DIAGRAM):   else do;
22546      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
22547      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
22548      output;
MPRINT(EM_DIAGRAM):   output;
22549      end;
MPRINT(EM_DIAGRAM):   end;
22550      end;
MPRINT(EM_DIAGRAM):   end;
22551      end;
MPRINT(EM_DIAGRAM):   end;
22552      else if last.parent then do;
MPRINT(EM_DIAGRAM):   else if last.parent then do;
22553      if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
22554      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
22555      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
22556      abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
22557      end;
MPRINT(EM_DIAGRAM):   end;
22558      else do;
MPRINT(EM_DIAGRAM):   else do;
22559      abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
22560      end;
MPRINT(EM_DIAGRAM):   end;
22561      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
22562      output;
MPRINT(EM_DIAGRAM):   output;
22563      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
22564      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
22565      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
22566      end;
MPRINT(EM_DIAGRAM):   end;
22567      else do;
MPRINT(EM_DIAGRAM):   else do;
22568      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
22569      end;
MPRINT(EM_DIAGRAM):   end;
22570      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
22571      output;
MPRINT(EM_DIAGRAM):   output;
22572      end;
MPRINT(EM_DIAGRAM):   end;
22573      else do;
MPRINT(EM_DIAGRAM):   else do;
22574      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
22575      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
22576      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
22577      end;
MPRINT(EM_DIAGRAM):   end;
22578      else do;
MPRINT(EM_DIAGRAM):   else do;
22579      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
22580      end;
MPRINT(EM_DIAGRAM):   end;
22581      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
22582      output;
MPRINT(EM_DIAGRAM):   output;
22583      end;
MPRINT(EM_DIAGRAM):   end;
22584      end;
MPRINT(EM_DIAGRAM):   end;
22585      else do;
MPRINT(EM_DIAGRAM):   else do;
22586      if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
22587      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
22588      numeric_value = round(numeric_value,0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value,0.0001);
22589      abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
22590      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
22591      end;
MPRINT(EM_DIAGRAM):   end;
22592      else do;
MPRINT(EM_DIAGRAM):   else do;
22593      abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
22594      origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
22595      end;
MPRINT(EM_DIAGRAM):   end;
22596      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
22597      output;
MPRINT(EM_DIAGRAM):   output;
22598      end;
MPRINT(EM_DIAGRAM):   end;
22599      else do;
MPRINT(EM_DIAGRAM):   else do;
22600      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
22601      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
22602      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
22603      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
22604      end;
MPRINT(EM_DIAGRAM):   end;
22605      else do;
MPRINT(EM_DIAGRAM):   else do;
22606      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
22607      origval = character_value;
MPRINT(EM_DIAGRAM):   origval = character_value;
22608      end;
MPRINT(EM_DIAGRAM):   end;
22609      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
22610      output;
MPRINT(EM_DIAGRAM):   output;
22611      end;
MPRINT(EM_DIAGRAM):   end;
22612      end;
MPRINT(EM_DIAGRAM):   end;
22613      end;
MPRINT(EM_DIAGRAM):   end;
22614      else do;
MPRINT(EM_DIAGRAM):   else do;
22615      if first.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value then do;
22616      flag = 0;
MPRINT(EM_DIAGRAM):   flag = 0;
22617      abovetext = CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   abovetext = CHARACTER_VALUE;
22618      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
22619      if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value AND last.numeric_value then do;
22620      output;
MPRINT(EM_DIAGRAM):   output;
22621      end;
MPRINT(EM_DIAGRAM):   end;
22622      end;
MPRINT(EM_DIAGRAM):   end;
22623      else if last.numeric_value then do;
MPRINT(EM_DIAGRAM):   else if last.numeric_value then do;
22624      if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
22625      tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
22626      length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
22627      if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
22628      abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
22629      end;
MPRINT(EM_DIAGRAM):   end;
22630      else do;
MPRINT(EM_DIAGRAM):   else do;
22631      abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
22632      flag = 1;
MPRINT(EM_DIAGRAM):   flag = 1;
22633      end;
MPRINT(EM_DIAGRAM):   end;
22634      end;
MPRINT(EM_DIAGRAM):   end;
22635      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
22636      output;
MPRINT(EM_DIAGRAM):   output;
22637      end;
MPRINT(EM_DIAGRAM):   end;
22638      else do;
MPRINT(EM_DIAGRAM):   else do;
22639      if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
22640      tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
22641      length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
22642      if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
22643      abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
22644      end;
MPRINT(EM_DIAGRAM):   end;
22645      else do;
MPRINT(EM_DIAGRAM):   else do;
22646      abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
22647      flag=1;
MPRINT(EM_DIAGRAM):   flag=1;
22648      end;
MPRINT(EM_DIAGRAM):   end;
22649      end;
MPRINT(EM_DIAGRAM):   end;
22650      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
22651      end;
MPRINT(EM_DIAGRAM):   end;
22652      end;
MPRINT(EM_DIAGRAM):   end;
22653      keep parent branch abovetext;
MPRINT(EM_DIAGRAM):   keep parent branch abovetext;
22654      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      22527:25   22542:26   22556:24   22556:47   22565:26   22576:26   22589:24   22589:47   22602:26
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      22607:11
NOTE: There were 8 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPABOVE has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22655      /* MIssing value to abovetext */
22656      data tempmissing;
MPRINT(EM_DIAGRAM):   data tempmissing;
22657      set WORK.OUTRULES_TREE_2OJNACU;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_2OJNACU;
22658      if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
22659      rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_DIAGRAM):   rename node=parent numeric_value=branch character_value=misschar;
22660      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.OUTRULES_TREE_2OJNACU.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22661      proc sort data=work.tempabove;
MPRINT(EM_DIAGRAM):   proc sort data=work.tempabove;
22662      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
22663      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set WORK.TEMPABOVE.
NOTE: The data set WORK.TEMPABOVE has 12 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22664      proc sort data=EMWS1.Clus_OUTNODES out=tempoutnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_OUTNODES out=tempoutnodes;
22665      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
22666      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 30 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22667      proc sort data=tempmissing;
MPRINT(EM_DIAGRAM):   proc sort data=tempmissing;
22668      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
22669      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22670      data WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.Clus_outnodes;
22671      merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
MPRINT(EM_DIAGRAM):   merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
22672      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
22673      length traintotal validtotal 8;
MPRINT(EM_DIAGRAM):   length traintotal validtotal 8;
22674      retain traintotal validtotal;
MPRINT(EM_DIAGRAM):   retain traintotal validtotal;
22675      if _a then do;
MPRINT(EM_DIAGRAM):   if _a then do;
22676      if ^MISSING(abovetext) then do;
MPRINT(EM_DIAGRAM):   if ^MISSING(abovetext) then do;
22677      abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   abovetext= strip(abovetext)||" Or Missing";
22678      end;
MPRINT(EM_DIAGRAM):   end;
22679      else do;
MPRINT(EM_DIAGRAM):   else do;
22680      abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   abovetext = " Missing Values Only";
22681      end;
MPRINT(EM_DIAGRAM):   end;
22682      end;
MPRINT(EM_DIAGRAM):   end;
22683      if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   if MISSING(abovetext) then abovetext="Non-Missing Values";
22684      if node=1 then do;
MPRINT(EM_DIAGRAM):   if node=1 then do;
22685      traintotal = N;
MPRINT(EM_DIAGRAM):   traintotal = N;
22686      validtotal=VN;
MPRINT(EM_DIAGRAM):   validtotal=VN;
22687      end;
MPRINT(EM_DIAGRAM):   end;
22688      label traintotal = "%sysfunc(sasmsg(sashelp.dmine,  rpt_traintotal_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label traintotal = "Train Total";
22689      drop role rank stat misschar belowtext;
MPRINT(EM_DIAGRAM):   drop role rank stat misschar belowtext;
22690      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable VN is uninitialized.
NOTE: There were 12 observations read from the data set WORK.TEMPABOVE.
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.CLUS_OUTNODES has 13 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
22691      proc sort data=WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus_outnodes;
22692      by node;
MPRINT(EM_DIAGRAM):   by node;
22693      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: The data set WORK.CLUS_OUTNODES has 13 observations and 32 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22694      proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
22695      by node;
MPRINT(EM_DIAGRAM):   by node;
22696      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22697      data WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.Clus_outnodes;
22698      merge WORK.Clus_outnodes tempbelow;
MPRINT(EM_DIAGRAM):   merge WORK.Clus_outnodes tempbelow;
22699      by node;
MPRINT(EM_DIAGRAM):   by node;
22700      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: There were 6 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.CLUS_OUTNODES has 13 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 227 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 227 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View EMWS1.EM_CLUS.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
NOTE: There were 227 observations read from the data set EMWS1.CLUS_TRAIN.
22701      data tempoutstats;
MPRINT(EM_DIAGRAM):    data tempoutstats;
22702      set WORK.OUTSTATS_TREE_2OJNACU;
MPRINT(EM_DIAGRAM):   set WORK.OUTSTATS_TREE_2OJNACU;
22703      length tarlevel $8;
MPRINT(EM_DIAGRAM):   length tarlevel $8;
22704      tarlevel ="NOMINAL";
MPRINT(EM_DIAGRAM):   tarlevel ="NOMINAL";
22705      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 117 observations read from the data set WORK.OUTSTATS_TREE_2OJNACU.
NOTE: The data set WORK.TEMPOUTSTATS has 117 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22706      data EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):    data EMWS1.Clus_TREE_PLOT;
22707      length NODETEXT TEXTALL $800 N VN NODECOLOR 8;
MPRINT(EM_DIAGRAM):   length NODETEXT TEXTALL $800 N VN NODECOLOR 8;
22708      set WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.Clus_outnodes;
22709      label parent = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentID_vlabel, noquote))" depth = "%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, noquote))" belowtext= "%sysfunc(sasmsg(sashelp.dmine, rpt_belowtext_vlabel, noquote))" abovetext =
22710         "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))" linkwidth = "%sysfunc(sasmsg(sashelp.dmine, rpt_linkwidth_vlabel, noquote))" nodetext = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodetext_vlabel, noquote))" textall =
22711         "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))" N = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainn_vlabel, noquote))" VN = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))" nodecolor =
22712         "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label parent = "Parent Id" depth = "Depth" belowtext= "Below Text" abovetext = "Above Text" linkwidth = "Link Width" nodetext = "Node Text" textall = "All Text" N = "Train: Number of Observations" VN = "Valid: Number of Observations"
nodecolor = "Node Color";
22713      keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N VN NODECOLOR;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N VN NODECOLOR;
22714      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TEXTALL is uninitialized.
NOTE: Variable NODECOLOR is uninitialized.
NOTE: There were 13 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
22715      proc sort data=EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_TREE_PLOT;
22716      by node;
MPRINT(EM_DIAGRAM):   by node;
22717      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22718      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
22719      set WORK.OUTSTATS_TREE_2OJNACU;
MPRINT(EM_DIAGRAM):   set WORK.OUTSTATS_TREE_2OJNACU;
22720      retain eventlevel;
MPRINT(EM_DIAGRAM):   retain eventlevel;
22721      if STATNAME='PREDICTION' then eventlevel=CATEGORY;
MPRINT(EM_DIAGRAM):   if STATNAME='PREDICTION' then eventlevel=CATEGORY;
22722      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 117 observations read from the data set WORK.OUTSTATS_TREE_2OJNACU.
NOTE: The data set WORK.TEMPCOLOR has 117 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22723      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
22724      set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
22725      if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
22726      if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
22727      end;
MPRINT(EM_DIAGRAM):   end;
22728      else do;
MPRINT(EM_DIAGRAM):   else do;
22729      if STATNAME="PREDICTION";
MPRINT(EM_DIAGRAM):   if STATNAME="PREDICTION";
22730      end;
MPRINT(EM_DIAGRAM):   end;
22731      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 117 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22732      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
22733      set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
22734      length nodecolor 8;
MPRINT(EM_DIAGRAM):   length nodecolor 8;
22735      if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
22736      nodecolor = round(100*(STATVALUE), .01);
MPRINT(EM_DIAGRAM):   nodecolor = round(100*(STATVALUE), .01);
22737      end;
MPRINT(EM_DIAGRAM):   end;
22738      else do;
MPRINT(EM_DIAGRAM):   else do;
22739      nodecolor=round(statvalue, .01);
MPRINT(EM_DIAGRAM):   nodecolor=round(statvalue, .01);
22740      end;
MPRINT(EM_DIAGRAM):   end;
22741      keep node nodecolor;
MPRINT(EM_DIAGRAM):   keep node nodecolor;
22742      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22743      proc sort data=tempoutstats;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutstats;
22744      by node statname;
MPRINT(EM_DIAGRAM):   by node statname;
22745      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 117 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 117 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22746      proc sort data=tempcolor;
MPRINT(EM_DIAGRAM):   proc sort data=tempcolor;
22747      by node;
MPRINT(EM_DIAGRAM):   by node;
22748      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22749      data EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_TREE_PLOT;
22750      merge EMWS1.Clus_TREE_PLOT tempoutstats tempcolor;
MPRINT(EM_DIAGRAM):   merge EMWS1.Clus_TREE_PLOT tempoutstats tempcolor;
22751      length text $800 _RASE_ _VRASE_ 8;
MPRINT(EM_DIAGRAM):   length text $800 _RASE_ _VRASE_ 8;
22752      retain _RASE_ _VRASE_ VN eventlevel;
MPRINT(EM_DIAGRAM):   retain _RASE_ _VRASE_ VN eventlevel;
22753      by node;
MPRINT(EM_DIAGRAM):   by node;
22754      if STATNAME = 'N' then N=STATVALUE;
MPRINT(EM_DIAGRAM):   if STATNAME = 'N' then N=STATVALUE;
22755      else if STATNAME = 'VALID: N' then VN=STATVALUE;
MPRINT(EM_DIAGRAM):   else if STATNAME = 'VALID: N' then VN=STATVALUE;
22756      if STATNAME='NPRIORS' then N=statvalue;
MPRINT(EM_DIAGRAM):   if STATNAME='NPRIORS' then N=statvalue;
22757      else if STATNAME = 'VALID: NPRIORS' then VN=STATVALUE;
MPRINT(EM_DIAGRAM):   else if STATNAME = 'VALID: NPRIORS' then VN=STATVALUE;
22758      if STATNAME = 'RASE' then _RASE_ = STATVALUE;
MPRINT(EM_DIAGRAM):   if STATNAME = 'RASE' then _RASE_ = STATVALUE;
22759      else if STATNAME = 'VALID: RASE' then _VRASE_ = STATVALUE;
MPRINT(EM_DIAGRAM):   else if STATNAME = 'VALID: RASE' then _VRASE_ = STATVALUE;
22760      else if STATNAME = 'PREDICTION' then eventlevel=CATEGORY;
MPRINT(EM_DIAGRAM):   else if STATNAME = 'PREDICTION' then eventlevel=CATEGORY;
22761      if last.node then output EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   if last.node then output EMWS1.Clus_TREE_PLOT;
22762      if STATNAME ="N" or STATNAME="VALID: N" or STATNAME="TARGET" or STATNAME="RASE" or STATNAME="VALID: RASE" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="N" or STATNAME="VALID: N" or STATNAME="TARGET" or STATNAME="RASE" or STATNAME="VALID: RASE" then delete;
22763      if STATNAME ="ALTERNATIVE PROFIT" or STATNAME="VALID: ALTERNATIVE PROFIT" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="ALTERNATIVE PROFIT" or STATNAME="VALID: ALTERNATIVE PROFIT" then delete;
22764      if STATNAME ="ALTERNATIVE LOSS" or STATNAME="VALID: ALTERNATIVE LOSS" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="ALTERNATIVE LOSS" or STATNAME="VALID: ALTERNATIVE LOSS" then delete;
22765      if STATNAME ="NPRIORS" or STATNAME="VALID: NPRIORS" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="NPRIORS" or STATNAME="VALID: NPRIORS" then delete;
22766      if tarlevel ^='INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if tarlevel ^='INTERVAL' then do;
22767      if STATNAME = "PREDICTION" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME = "PREDICTION" then delete;
22768      if STATNAME = "PROPORTION" or STATNAME="VALID: PROPORTION" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME = "PROPORTION" or STATNAME="VALID: PROPORTION" then delete;
22769      end;
MPRINT(EM_DIAGRAM):   end;
22770      label _RASE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_trase_vlabel, noquote))" _VRASE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_vrase_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label _RASE_ = "Train: Root Average Square Error" _VRASE_ = "Valid: Root Average Square Error";
22771      drop STATNAME STATVALUE;
MPRINT(EM_DIAGRAM):   drop STATNAME STATVALUE;
22772      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable text is uninitialized.
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: There were 117 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 13 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
22773      data tree_temp;
MPRINT(EM_DIAGRAM):   data tree_temp;
22774      set tempoutstats;
MPRINT(EM_DIAGRAM):   set tempoutstats;
22775      if STATNAME^="N" AND STATNAME ^="VALID: N" AND STATNAME^="RASE" AND STATNAME ^="VALID: RASE" AND STATNAME ^="TARGET";
MPRINT(EM_DIAGRAM):   if STATNAME^="N" AND STATNAME ^="VALID: N" AND STATNAME^="RASE" AND STATNAME ^="VALID: RASE" AND STATNAME ^="TARGET";
22776      if STATNAME ="ALTERNATIVE PROFIT" or STATNAME="VALID: ALTERNATIVE PROFIT" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="ALTERNATIVE PROFIT" or STATNAME="VALID: ALTERNATIVE PROFIT" then delete;
22777      if STATNAME ="ALTERNATIVE LOSS" or STATNAME="VALID: ALTERNATIVE LOSS" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="ALTERNATIVE LOSS" or STATNAME="VALID: ALTERNATIVE LOSS" then delete;
22778      if STATNAME ="NPRIORS" or STATNAME="VALID: NPRIORS" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME ="NPRIORS" or STATNAME="VALID: NPRIORS" then delete;
22779      if TARLEVEL ^="INTERVAL" then do;
MPRINT(EM_DIAGRAM):   if TARLEVEL ^="INTERVAL" then do;
22780      if STATNAME="PREDICTION" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME="PREDICTION" then delete;
22781      if STATNAME = "PROPORTION" or STATNAME="VALID: PROPORTION" then delete;
MPRINT(EM_DIAGRAM):   if STATNAME = "PROPORTION" or STATNAME="VALID: PROPORTION" then delete;
22782      end;
MPRINT(EM_DIAGRAM):   end;
22783      if NODE = . then delete;
MPRINT(EM_DIAGRAM):   if NODE = . then delete;
22784      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 117 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set WORK.TREE_TEMP has 91 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22785      proc sort data=tree_temp;
MPRINT(EM_DIAGRAM):    proc sort data=tree_temp;
22786      by node category;
MPRINT(EM_DIAGRAM):   by node category;
22787      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 91 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set WORK.TREE_TEMP has 91 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22788      data tree_temp;
MPRINT(EM_DIAGRAM):   data tree_temp;
22789      merge EMWS1.Clus_TREE_PLOT tree_temp;
MPRINT(EM_DIAGRAM):   merge EMWS1.Clus_TREE_PLOT tree_temp;
22790      by node;
MPRINT(EM_DIAGRAM):   by node;
22791      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: There were 91 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set WORK.TREE_TEMP has 91 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22792      data EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_TREE_PLOT;
22793      merge EMWS1.Clus_TREE_PLOT tree_temp;
MPRINT(EM_DIAGRAM):   merge EMWS1.Clus_TREE_PLOT tree_temp;
22794      length text textall nodetext stext ntext $800 P__SEGMENT_4 V__SEGMENT_4 8;
MPRINT(EM_DIAGRAM):   length text textall nodetext stext ntext $800 P__SEGMENT_4 V__SEGMENT_4 8;
22795      retain P__SEGMENT_4 V__SEGMENT_4 ntext stext textall;
MPRINT(EM_DIAGRAM):   retain P__SEGMENT_4 V__SEGMENT_4 ntext stext textall;
22796      by node category;
MPRINT(EM_DIAGRAM):   by node category;
22797      _RASE_ = .;
MPRINT(EM_DIAGRAM):   _RASE_ = .;
22798      _VRASE_ = .;
MPRINT(EM_DIAGRAM):   _VRASE_ = .;
22799      if tarlevel ^= 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if tarlevel ^= 'INTERVAL' then do;
22800      if CATEGORY=EVENTLEVEL AND STATNAME = "PROBABILITY" then do;
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL AND STATNAME = "PROBABILITY" then do;
22801      P__SEGMENT_4 = round(STATVALUE, .01);
MPRINT(EM_DIAGRAM):   P__SEGMENT_4 = round(STATVALUE, .01);
22802      end;
MPRINT(EM_DIAGRAM):   end;
22803      else if CATEGORY=EVENTLEVEL AND STATNAME = "VALID: PROBABILITY" then do;
MPRINT(EM_DIAGRAM):   else if CATEGORY=EVENTLEVEL AND STATNAME = "VALID: PROBABILITY" then do;
22804      V__SEGMENT_4 = round(STATVALUE, .01);
MPRINT(EM_DIAGRAM):   V__SEGMENT_4 = round(STATVALUE, .01);
22805      end;
MPRINT(EM_DIAGRAM):   end;
22806      if CATEGORY=EVENTLEVEL then do;
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL then do;
22807      * P__SEGMENT_4 = round(STATVALUE, .01);
MPRINT(EM_DIAGRAM):   * P__SEGMENT_4 = round(STATVALUE, .01);
22808      if first.category then do;
MPRINT(EM_DIAGRAM):   if first.category then do;
22809      ntext = put(strip(CATEGORY)||':', $12.)|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   ntext = put(strip(CATEGORY)||':', $12.)|| right(put(STATVALUE, percent13.1));
22810      end;
MPRINT(EM_DIAGRAM):   end;
22811      else do;
MPRINT(EM_DIAGRAM):   else do;
22812      ntext=trim(ntext)||right(put(STATVALUE, percent15.1));
MPRINT(EM_DIAGRAM):   ntext=trim(ntext)||right(put(STATVALUE, percent15.1));
22813      end;
MPRINT(EM_DIAGRAM):   end;
22814      end;
MPRINT(EM_DIAGRAM):   end;
22815      if first.node then do;
MPRINT(EM_DIAGRAM):   if first.node then do;
22816      stext = put(strip(CATEGORY)||':', $12.)|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   stext = put(strip(CATEGORY)||':', $12.)|| right(put(STATVALUE, percent13.1));
22817      end;
MPRINT(EM_DIAGRAM):   end;
22818      else do;
MPRINT(EM_DIAGRAM):   else do;
22819      if first.category then do;
MPRINT(EM_DIAGRAM):   if first.category then do;
22820      stext=trim(stext)||'0A'x||put(strip(CATEGORY)||':', $12.)||right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   stext=trim(stext)||'0A'x||put(strip(CATEGORY)||':', $12.)||right(put(STATVALUE, percent13.1));
22821      end;
MPRINT(EM_DIAGRAM):   end;
22822      else do;
MPRINT(EM_DIAGRAM):   else do;
22823      stext=trim(stext)||right(put(STATVALUE, percent15.1));
MPRINT(EM_DIAGRAM):   stext=trim(stext)||right(put(STATVALUE, percent15.1));
22824      end;
MPRINT(EM_DIAGRAM):   end;
22825      end;
MPRINT(EM_DIAGRAM):   end;
22826      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
22827      nodetext = trim(nodetext)||'0A'x||put("%sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):", $12.)|| put(N, 13.);
MPRINT(EM_DIAGRAM):   nodetext = trim(nodetext)||'0A'x||put("Count:", $12.)|| put(N, 13.);
22828      textall = trim(textall)||'0A'x||put("%sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):", $12.)|| put(N, 13.);
MPRINT(EM_DIAGRAM):   textall = trim(textall)||'0A'x||put("Count:", $12.)|| put(N, 13.);
22829      textall = put("%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stat, noquote))", $12.)||right(put("%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel, noquote))", $13.))||right(put("%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel
22830      , noquote))", $15.));
MPRINT(EM_DIAGRAM):   textall = put("Statistic", $12.)||right(put("Train", $13.))||right(put("Validation", $15.));
22831      textall = trim(textall)||'0A'x||trim(stext);
MPRINT(EM_DIAGRAM):   textall = trim(textall)||'0A'x||trim(stext);
22832      textall = trim(textall)||'0A'x||put("%sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):", $12.)|| put(N, 13.)|| put(VN, 15.);
MPRINT(EM_DIAGRAM):   textall = trim(textall)||'0A'x||put("Count:", $12.)|| put(N, 13.)|| put(VN, 15.);
22833      nodetext= put("%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stat, noquote))", $12.)||right(put("%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel, noquote))" , $13.))||right(put("%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel
22834       , noquote))" , $15.));
MPRINT(EM_DIAGRAM):   nodetext= put("Statistic", $12.)||right(put("Train" , $13.))||right(put("Validation" , $15.));
22835      nodetext= trim(nodetext)||'0A'x||trim(ntext);
MPRINT(EM_DIAGRAM):   nodetext= trim(nodetext)||'0A'x||trim(ntext);
22836      nodetext= trim(nodetext)||'0A'x||put("%sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):", $12.)|| put(N, 13.)|| put(VN, 15.);
MPRINT(EM_DIAGRAM):   nodetext= trim(nodetext)||'0A'x||put("Count:", $12.)|| put(N, 13.)|| put(VN, 15.);
22837      output EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS1.Clus_TREE_PLOT;
22838      end;
MPRINT(EM_DIAGRAM):   end;
22839      end;
MPRINT(EM_DIAGRAM):   end;
22840      else do;
MPRINT(EM_DIAGRAM):   else do;
22841      if first.node then do;
MPRINT(EM_DIAGRAM):   if first.node then do;
22842      vprobflag = 0;
MPRINT(EM_DIAGRAM):   vprobflag = 0;
22843      if STATNAME = "PREDICTION" then do;
MPRINT(EM_DIAGRAM):   if STATNAME = "PREDICTION" then do;
22844      P__SEGMENT_4 = STATVALUE;
MPRINT(EM_DIAGRAM):   P__SEGMENT_4 = STATVALUE;
22845      end;
MPRINT(EM_DIAGRAM):   end;
22846      else if STATNAME="VALID: PREDICTION" then do;
MPRINT(EM_DIAGRAM):   else if STATNAME="VALID: PREDICTION" then do;
22847      V__SEGMENT_4 = STATVALUE;
MPRINT(EM_DIAGRAM):   V__SEGMENT_4 = STATVALUE;
22848      end;
MPRINT(EM_DIAGRAM):   end;
22849      stext = put("%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))", $12.)|| right(put(STATVALUE, 13.4));
MPRINT(EM_DIAGRAM):   stext = put("Average", $12.)|| right(put(STATVALUE, 13.4));
22850      end;
MPRINT(EM_DIAGRAM):   end;
22851      else do;
MPRINT(EM_DIAGRAM):   else do;
22852      vprobflag = 0;
MPRINT(EM_DIAGRAM):   vprobflag = 0;
22853      if STATNAME = "PREDICTION" then do;
MPRINT(EM_DIAGRAM):   if STATNAME = "PREDICTION" then do;
22854      P__SEGMENT_4 = STATVALUE;
MPRINT(EM_DIAGRAM):   P__SEGMENT_4 = STATVALUE;
22855      end;
MPRINT(EM_DIAGRAM):   end;
22856      else if STATNAME="VALID: PREDICTION" then do;
MPRINT(EM_DIAGRAM):   else if STATNAME="VALID: PREDICTION" then do;
22857      V__SEGMENT_4 = STATVALUE;
MPRINT(EM_DIAGRAM):   V__SEGMENT_4 = STATVALUE;
22858      end;
MPRINT(EM_DIAGRAM):   end;
22859      stext=trim(stext)||right(put(STATVALUE, 13.4));
MPRINT(EM_DIAGRAM):   stext=trim(stext)||right(put(STATVALUE, 13.4));
22860      vprobflag=1;
MPRINT(EM_DIAGRAM):   vprobflag=1;
22861      end;
MPRINT(EM_DIAGRAM):   end;
22862      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
22863      nodetext = put("%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stat, noquote))", $12.)||right(put("%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel, noquote))", $8.))||right(put("%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel
22864      , noquote))", $15.));
MPRINT(EM_DIAGRAM):   nodetext = put("Statistic", $12.)||right(put("Train", $8.))||right(put("Validation", $15.));
22865      if vprobflag eq 0 then do;
MPRINT(EM_DIAGRAM):   if vprobflag eq 0 then do;
22866      stext=trim(stext)||right(put(0, 13.4));
MPRINT(EM_DIAGRAM):   stext=trim(stext)||right(put(0, 13.4));
22867      end;
MPRINT(EM_DIAGRAM):   end;
22868      nodetext = trim(nodetext)||'0A'x||trim(stext);
MPRINT(EM_DIAGRAM):   nodetext = trim(nodetext)||'0A'x||trim(stext);
22869      nodetext = trim(nodetext)||'0A'x||put("%sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):", $12.)|| put(N, 8.)|| put(VN, 15.);
MPRINT(EM_DIAGRAM):   nodetext = trim(nodetext)||'0A'x||put("Count:", $12.)|| put(N, 8.)|| put(VN, 15.);
22870      textall = nodetext;
MPRINT(EM_DIAGRAM):   textall = nodetext;
22871      output EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS1.Clus_TREE_PLOT;
22872      end;
MPRINT(EM_DIAGRAM):   end;
22873      end;
MPRINT(EM_DIAGRAM):   end;
22874      label _RASE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_trase_vlabel, noquote))" _VRASE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_vrase_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label _RASE_ = "Train: Root Average Square Error" _VRASE_ = "Valid: Root Average Square Error";
22875      label P__SEGMENT_4 = "%sysfunc(sasmsg(sashelp.dmine, rpt_predictedvar_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label P__SEGMENT_4 = "Predicted Variable";
22876      keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N VN NODECOLOR _RASE_ _VRASE_ P__SEGMENT_4 V__SEGMENT_4;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N VN NODECOLOR _RASE_ _VRASE_ P__SEGMENT_4 V__SEGMENT_4;
22877      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: There were 91 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.07 seconds
 
 
22878      data EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_TREE_PLOT;
22879      set EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_TREE_PLOT;
22880      if NODE eq . then delete;
MPRINT(EM_DIAGRAM):   if NODE eq . then delete;
22881      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22882      data EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_TREE_PLOT;
22883      set EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_TREE_PLOT;
22884      textall = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote, )):"|| put(Node, 13.)||'0A'x||trim(textall);
MPRINT(EM_DIAGRAM):   textall = "Node Id:"|| put(Node, 13.)||'0A'x||trim(textall);
22885      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
22886      data tempout;
MPRINT(EM_DIAGRAM):   data tempout;
22887      set WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.Clus_outnodes;
22888      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: The data set WORK.TEMPOUT has 13 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22889      proc sort data=tempout;
MPRINT(EM_DIAGRAM):   proc sort data=tempout;
22890      by descending P__SEGMENT_4;
MPRINT(EM_DIAGRAM):   by descending P__SEGMENT_4;
22891      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TEMPOUT has 13 observations and 33 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22892      data tree_temp;
MPRINT(EM_DIAGRAM):   data tree_temp;
22893      set tempout;
MPRINT(EM_DIAGRAM):   set tempout;
22894      if LEAF ne .;
MPRINT(EM_DIAGRAM):   if LEAF ne .;
22895      label index="%sysfunc(sasmsg(sashelp.dmine, rpt_leafindex_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label index= "Leaf Index";
22896      label percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percevent_train = "Percent Cases";
22897      label perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label perc_train = "Event Percentage";
22898      label tprob="%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel  , NOQUOTE, %nrbquote()))";
MPRINT(EM_DIAGRAM):   label tprob= "Training Percent ";
22899      label vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel  , NOQUOTE, %nrbquote()))";
MPRINT(EM_DIAGRAM):   label vprob = "Validation Percent ";
22900      label percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percevent_valid = "Valid: Percent Cases";
22901      label perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label perc_valid = "Valid: Event Percentage";
22902      vprob = round(V__SEGMENT_4, .01);
MPRINT(EM_DIAGRAM):   vprob = round(V__SEGMENT_4, .01);
22903      percevent_valid = round ( vprob*100, .01);
MPRINT(EM_DIAGRAM):   percevent_valid = round ( vprob*100, .01);
22904      * perc_valid =round( ( VN / validtotal)*100, .001);
MPRINT(EM_DIAGRAM):   * perc_valid =round( ( VN / validtotal)*100, .001);
22905      perc_valid =round( ( VN / validtotal), .01);
MPRINT(EM_DIAGRAM):   perc_valid =round( ( VN / validtotal), .01);
22906      tprob = round(P__SEGMENT_4, .01);
MPRINT(EM_DIAGRAM):   tprob = round(P__SEGMENT_4, .01);
22907      percevent_train = round ( tprob*100, .01);
MPRINT(EM_DIAGRAM):   percevent_train = round ( tprob*100, .01);
22908      *perc_train =round( ( N / traintotal)*100, .001);
MPRINT(EM_DIAGRAM):   *perc_train =round( ( N / traintotal)*100, .001);
22909      perc_train =round( ( N / traintotal), .01);
MPRINT(EM_DIAGRAM):   perc_train =round( ( N / traintotal), .01);
22910      if missing(perc_train) then perc_train = round( linkwidth*100, .001);
MPRINT(EM_DIAGRAM):   if missing(perc_train) then perc_train = round( linkwidth*100, .001);
22911      index = _n_;
MPRINT(EM_DIAGRAM):   index = _n_;
22912      keep NODE index tprob perc_train percevent_train
22913      vprob perc_valid percevent_valid
22914      ;
MPRINT(EM_DIAGRAM):   keep NODE index tprob perc_train percevent_train vprob perc_valid percevent_valid ;
22915      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable V__SEGMENT_4 is uninitialized.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      7 at 22902:9    7 at 22903:19   7 at 22903:32   7 at 22905:13   7 at 22905:25
NOTE: There were 13 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TREE_TEMP has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
22916      proc sort data=tree_temp;
MPRINT(EM_DIAGRAM):   proc sort data=tree_temp;
22917      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
22918      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set WORK.TREE_TEMP has 7 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22919      proc sort data=EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_TREE_PLOT;
22920      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
22921      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 15 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22922      data EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_TREE_PLOT;
22923      merge EMWS1.Clus_TREE_PLOT tree_temp;
MPRINT(EM_DIAGRAM):   merge EMWS1.Clus_TREE_PLOT tree_temp;
22924      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
22925      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: There were 7 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22926      proc sort data=EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_TREE_PLOT;
22927      by node index;
MPRINT(EM_DIAGRAM):   by node index;
22928      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22929      title9 ' ';
MPRINT(EM_DIAGRAM):    title9 ' ';
22930      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_VariableImportance_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Importance";
22931      proc print data=EMWS1.Clus_OUTIMPORT(where=(IMPORTANCE>0)) noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Clus_OUTIMPORT(where=(IMPORTANCE>0)) noobs label;
22932      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS1.CLUS_OUTIMPORT.
      WHERE IMPORTANCE>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22933      title10;
MPRINT(EM_DIAGRAM):   title10;
22934      data WORK.M126UQ_1;
MPRINT(EM_DIAGRAM):    data WORK.M126UQ_1;
22935      set WORK.M126UQ_1;
MPRINT(EM_DIAGRAM):   set WORK.M126UQ_1;
22936      if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
22937      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.M126UQ_1.
NOTE: The data set WORK.M126UQ_1 has 13 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22938      proc sort data=EMWS1.Clus_OUTIMPORT out=WORK.Clus_GRAPHVARS(keep=NAME);
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus_OUTIMPORT out=WORK.Clus_GRAPHVARS(keep=NAME);
22939      where IMPORTANCE>0;
MPRINT(EM_DIAGRAM):   where IMPORTANCE>0;
22940      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22941      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS1.CLUS_OUTIMPORT.
      WHERE IMPORTANCE>0;
NOTE: The data set WORK.CLUS_GRAPHVARS has 5 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22942      proc sort data = WORK.M126UQ_1;
MPRINT(EM_DIAGRAM):   proc sort data = WORK.M126UQ_1;
22943      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22944      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.M126UQ_1.
NOTE: The data set WORK.M126UQ_1 has 13 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22945      data WORK.M126UQ_1;
MPRINT(EM_DIAGRAM):   data WORK.M126UQ_1;
22946      merge WORK.M126UQ_1 WORK.Clus_GRAPHVARS(in=_b_);
MPRINT(EM_DIAGRAM):   merge WORK.M126UQ_1 WORK.Clus_GRAPHVARS(in=_b_);
22947      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22948      if _b_ or ROLE = "FREQ" or REPORT="Y" then output;
MPRINT(EM_DIAGRAM):   if _b_ or ROLE = "FREQ" or REPORT="Y" then output;
22949      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.M126UQ_1.
NOTE: There were 5 observations read from the data set WORK.CLUS_GRAPHVARS.
NOTE: The data set WORK.M126UQ_1 has 5 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22950      data WORK.M126UQ_1;
MPRINT(EM_DIAGRAM):    data WORK.M126UQ_1;
22951      set WORK.M126UQ_1 end=_eof_ nobs=_nobs_;
MPRINT(EM_DIAGRAM):   set WORK.M126UQ_1 end=_eof_ nobs=_nobs_;
22952      output;
MPRINT(EM_DIAGRAM):   output;
22953      if _eof_ then do;
MPRINT(EM_DIAGRAM):   if _eof_ then do;
22954      name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
22955      ROLE = 'BY';
MPRINT(EM_DIAGRAM):   ROLE = 'BY';
22956      LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
22957      LABEL = 'Segment Variable';
MPRINT(EM_DIAGRAM):   LABEL = 'Segment Variable';
22958      TYPE = 'N';
MPRINT(EM_DIAGRAM):   TYPE = 'N';
22959      FORMAT = '';
MPRINT(EM_DIAGRAM):   FORMAT = '';
22960      INFORMAT = '';
MPRINT(EM_DIAGRAM):   INFORMAT = '';
22961      output;
MPRINT(EM_DIAGRAM):   output;
22962      end;
MPRINT(EM_DIAGRAM):   end;
22963      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.M126UQ_1.
NOTE: The data set WORK.M126UQ_1 has 6 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22964      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
22965      * Clus: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   * Clus: STDIZE Variables Macro ;
22966      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22967      %macro stdizevar;
22968          AvgTumorSize Avginv_node_group deg_malig
22969      %mend stdizevar;
22970      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22971      * Clus: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   * Clus: Computing Summary Statistics;
22972      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22973      proc stdize
22974      data = EMWS1.Clus_TRAIN
22975      out=_null_
22976      outstat=WORK.Clus_STAT
22977      add=0 fuzz=1E-14 initial=MAD
22978      vardef=df
22979      method=STD
22980      mult=1
22981      pctlmtd=ORD_STAT pctldef=2
22982      pctlpts=(
22983      0
22984      100
22985      )
22986      ;
MPRINT(EM_DIAGRAM):   proc stdize data = EMWS1.Clus_TRAIN out=_null_ outstat=WORK.Clus_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 100 ) ;
MPRINT(EM_DIAGRAM):   var
22987      var %stdizevar;
MPRINT(STDIZEVAR):   AvgTumorSize Avginv_node_group deg_malig
MPRINT(EM_DIAGRAM):  ;
22988      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: INITIAL= will be ignored.
NOTE: There were 227 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.CLUS_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.10 seconds
 
NOTE: There were 227 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 227 observations read from the data set EMWS1.CLUS_TRAIN.
NOTE: The data set WORK.CLUS_STAT has 10 observations and 4 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.16 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
22989      quit;
 
22990      data WORK.Clus_MINMAX;
MPRINT(EM_DIAGRAM):    data WORK.Clus_MINMAX;
22991      set WORK.Clus_STAT;
MPRINT(EM_DIAGRAM):   set WORK.Clus_STAT;
22992      where _TYPE_ in('P0','P100');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('P0','P100');
22993      if _TYPE_='P0' then _TYPE_='MIN';
MPRINT(EM_DIAGRAM):   if _TYPE_='P0' then _TYPE_='MIN';
22994      else if _TYPE_='P100' then _TYPE_='MAX';
MPRINT(EM_DIAGRAM):   else if _TYPE_='P100' then _TYPE_='MAX';
22995      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.CLUS_STAT.
      WHERE _TYPE_ in ('P0', 'P100');
NOTE: The data set WORK.CLUS_MINMAX has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22996      proc transpose data=WORK.Clus_MINMAX out=WORK.Clus_MINMAX(drop=_LABEL_ rename=(_NAME_=_VARIABLE_));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Clus_MINMAX out=WORK.Clus_MINMAX(drop=_LABEL_ rename=(_NAME_=_VARIABLE_));
22997      id _TYPE_;
MPRINT(EM_DIAGRAM):   id _TYPE_;
22998      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.CLUS_MINMAX.
NOTE: The data set WORK.CLUS_MINMAX has 3 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
22999      data WORK.Clus_UGRID;
MPRINT(EM_DIAGRAM):    data WORK.Clus_UGRID;
23000      set WORK.Clus_MINMAX;
MPRINT(EM_DIAGRAM):   set WORK.Clus_MINMAX;
23001      B1 = MIN + (1-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B1 = MIN + (1-1)*(MAX-MIN)/8;
23002      B2 = MIN + (2-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B2 = MIN + (2-1)*(MAX-MIN)/8;
23003      B3 = MIN + (3-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B3 = MIN + (3-1)*(MAX-MIN)/8;
23004      B4 = MIN + (4-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B4 = MIN + (4-1)*(MAX-MIN)/8;
23005      B5 = MIN + (5-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B5 = MIN + (5-1)*(MAX-MIN)/8;
23006      B6 = MIN + (6-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B6 = MIN + (6-1)*(MAX-MIN)/8;
23007      B7 = MIN + (7-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B7 = MIN + (7-1)*(MAX-MIN)/8;
23008      B8 = MIN + (8-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B8 = MIN + (8-1)*(MAX-MIN)/8;
23009      B9 = MIN + (9-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B9 = MIN + (9-1)*(MAX-MIN)/8;
23010      drop MIN MAX;
MPRINT(EM_DIAGRAM):   drop MIN MAX;
23011      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.CLUS_MINMAX.
NOTE: The data set WORK.CLUS_UGRID has 3 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23012      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23013      * Clus: Creating formats for binning interval variables;
MPRINT(EM_DIAGRAM):   * Clus: Creating formats for binning interval variables;
23014      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23015      proc format;
MPRINT(EM_DIAGRAM):   proc format;
23016      value F1_
23017      2-8.25 = "2:8.25"
23018      8.25-14.5 = "8.25:14.5"
23019      14.5-20.75 = "14.5:20.75"
23020      20.75-27 = "20.75:27"
23021      27-33.25 = "27:33.25"
23022      33.25-39.5 = "33.25:39.5"
23023      39.5-45.75 = "39.5:45.75"
23024      45.75-52 = "45.75:52"
23025      ;
MPRINT(EM_DIAGRAM):   value F1_ 2-8.25 = "2:8.25" 8.25-14.5 = "8.25:14.5" 14.5-20.75 = "14.5:20.75" 20.75-27 = "20.75:27" 27-33.25 = "27:33.25" 33.25-39.5 = "33.25:39.5" 39.5-45.75 = "39.5:45.75" 45.75-52 = "45.75:52" ;
NOTE: Format F1_ has been output.
23026      value F2_
23027      1-2.875 = "1:2.875"
23028      2.875-4.75 = "2.875:4.75"
23029      4.75-6.625 = "4.75:6.625"
23030      6.625-8.5 = "6.625:8.5"
23031      8.5-10.375 = "8.5:10.375"
23032      10.375-12.25 = "10.375:12.25"
23033      12.25-14.125 = "12.25:14.125"
23034      14.125-16 = "14.125:16"
23035      ;
MPRINT(EM_DIAGRAM):   value F2_ 1-2.875 = "1:2.875" 2.875-4.75 = "2.875:4.75" 4.75-6.625 = "4.75:6.625" 6.625-8.5 = "6.625:8.5" 8.5-10.375 = "8.5:10.375" 10.375-12.25 = "10.375:12.25" 12.25-14.125 = "12.25:14.125" 14.125-16 = "14.125:16" ;
NOTE: Format F2_ has been output.
23036      value F3_
23037      1-1.25 = "1:1.25"
23038      1.25-1.5 = "1.25:1.5"
23039      1.5-1.75 = "1.5:1.75"
23040      1.75-2 = "1.75:2"
23041      2-2.25 = "2:2.25"
23042      2.25-2.5 = "2.25:2.5"
23043      2.5-2.75 = "2.5:2.75"
23044      2.75-3 = "2.75:3"
23045      ;
MPRINT(EM_DIAGRAM):   value F3_ 1-1.25 = "1:1.25" 1.25-1.5 = "1.25:1.5" 1.5-1.75 = "1.5:1.75" 1.75-2 = "1.75:2" 2-2.25 = "2:2.25" 2.25-2.5 = "2.25:2.5" 2.5-2.75 = "2.5:2.75" 2.75-3 = "2.75:3" ;
NOTE: Format F3_ has been output.
MPRINT(EM_DIAGRAM):   run;
23046      run;
 
NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23047      ods listing close;
MPRINT(EM_DIAGRAM):    ods listing close;
23048      ods output crosstabfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   ods output crosstabfreqs=WORK.TEMPFREQ;
23049      proc freq data = EMWS1.Clus_TRAIN order=formatted addnames;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS1.Clus_TRAIN order=formatted addnames;
23050      table AvgTumorSize * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table AvgTumorSize * _SEGMENT_ / missing;
23051      table Avginv_node_group * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table Avginv_node_group * _SEGMENT_ / missing;
23052      table IMP_node_caps * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table IMP_node_caps * _SEGMENT_ / missing;
23053      table deg_malig * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table deg_malig * _SEGMENT_ / missing;
23054      table irradiat * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table irradiat * _SEGMENT_ / missing;
23055      format AVGTUMORSIZE F1_.;
MPRINT(EM_DIAGRAM):   format AVGTUMORSIZE F1_.;
23056      format AVGINV_NODE_GROUP F2_.;
MPRINT(EM_DIAGRAM):   format AVGINV_NODE_GROUP F2_.;
23057      format DEG_MALIG F3_.;
MPRINT(EM_DIAGRAM):   format DEG_MALIG F3_.;
23058      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 227 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.CLUS_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.07 seconds
 
NOTE: There were 227 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: The data set WORK.TEMPFREQ has 200 observations and 16 variables.
NOTE: There were 227 observations read from the data set EMWS1.CLUS_TRAIN.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.14 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
23059      quit;
23060      ods listing;
MPRINT(EM_DIAGRAM):   ods listing;
23061      data EMWS1.Clus_PROFILE(keep=_VARIABLE_ _SEGMENT_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):    data EMWS1.Clus_PROFILE(keep=_VARIABLE_ _SEGMENT_ TYPE COUNT PERCENT _X_ _XLABEL_);
23062      label _VARIABLE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" _SEGMENT_ = "Segment Variable" Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,         NOQUOTE))" _X_ =
23063         "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel, NOQUOTE))" _XLABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel ,    NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,        NOQUOTE))" PERCENT =
23064         "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" _SEGMENT_ = "Segment Variable" Type = "Type" _X_ = "Numeric Value" _XLABEL_ = "Formatted Value" COUNT = "Frequency Count" PERCENT = "Percent";
23065      dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
23066      varnum = varnum(dsid, 'ROWVARIABLE');
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'ROWVARIABLE');
23067      freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
23068      pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
23069      typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
23070      bynum = varnum(dsid, "_SEGMENT_");
MPRINT(EM_DIAGRAM):   bynum = varnum(dsid, "_SEGMENT_");
23071      length varformat _VARIABLE_ $32 _XLABEL_ $32 TYPE $1;
MPRINT(EM_DIAGRAM):   length varformat _VARIABLE_ $32 _XLABEL_ $32 TYPE $1;
23072      do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
23073      count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
23074      percent = getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   percent = getvarn(dsid, pvarnum);
23075      _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
23076      varblnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   varblnum = varnum(dsid, _VARIABLE_);
23077      _SEGMENT_ = getvarn(dsid, bynum);
MPRINT(EM_DIAGRAM):   _SEGMENT_ = getvarn(dsid, bynum);
23078      type = vartype(dsid, varblnum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, varblnum);
23079      varformat = varfmt(dsid, varblnum);
MPRINT(EM_DIAGRAM):   varformat = varfmt(dsid, varblnum);
23080      if varformat eq '' then varformat = 'best12.';
MPRINT(EM_DIAGRAM):   if varformat eq '' then varformat = 'best12.';
23081      _X_=.;
MPRINT(EM_DIAGRAM):   _X_=.;
23082      if type = 'N' then do;
MPRINT(EM_DIAGRAM):   if type = 'N' then do;
23083      _X_ = getvarn(dsid, varblnum);
MPRINT(EM_DIAGRAM):   _X_ = getvarn(dsid, varblnum);
23084      _XLABEL_ = left(putn(_X_, varformat));
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(putn(_X_, varformat));
23085      end;
MPRINT(EM_DIAGRAM):   end;
23086      else _XLABEL_ = getvarc(dsid, varblnum);
MPRINT(EM_DIAGRAM):   else _XLABEL_ = getvarc(dsid, varblnum);
23087      if getvarc(dsid, typenum) = '11' then output;
MPRINT(EM_DIAGRAM):   if getvarc(dsid, typenum) = '11' then output;
23088      end;
MPRINT(EM_DIAGRAM):   end;
23089      dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
23090      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set EMWS1.CLUS_PROFILE has 140 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
 
 
23091      proc sort data=EMWS1.Clus_PROFILE NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_PROFILE NOTHREADS;
23092      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
23093      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 140 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: The data set EMWS1.CLUS_PROFILE has 140 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23094      proc means data=EMWS1.Clus_PROFILE noprint missing NWAY;
MPRINT(EM_DIAGRAM):   proc means data=EMWS1.Clus_PROFILE noprint missing NWAY;
23095      class _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   class _VARIABLE_ _SEGMENT_;
23096      var COUNT;
MPRINT(EM_DIAGRAM):   var COUNT;
23097      output out=WORK.Clus_STATCOUNT(keep=_SEGMENT_ _VARIABLE_ SUM) SUM=SUM;
MPRINT(EM_DIAGRAM):   output out=WORK.Clus_STATCOUNT(keep=_SEGMENT_ _VARIABLE_ SUM) SUM=SUM;
23098      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 140 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: The data set WORK.CLUS_STATCOUNT has 35 observations and 3 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.15 seconds
      cpu time            0.06 seconds
 
 
23099      proc sort data=WORK.Clus_STATCOUNT NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus_STATCOUNT NOTHREADS;
23100      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
23101      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 35 observations read from the data set WORK.CLUS_STATCOUNT.
NOTE: The data set WORK.CLUS_STATCOUNT has 35 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23102      data EMWS1.Clus_PROFILE(drop=SUM);
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_PROFILE(drop=SUM);
23103      label BYPERCENT= "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel, NOQUOTE, _SEGMENT_))";
MPRINT(EM_DIAGRAM):   label BYPERCENT= "Percent";
23104      merge EMWS1.Clus_PROFILE WORK.Clus_STATCOUNT;
MPRINT(EM_DIAGRAM):   merge EMWS1.Clus_PROFILE WORK.Clus_STATCOUNT;
23105      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
23106      if SUM ne . then BYPERCENT = 100*COUNT/SUM;
MPRINT(EM_DIAGRAM):   if SUM ne . then BYPERCENT = 100*COUNT/SUM;
23107      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 140 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: There were 35 observations read from the data set WORK.CLUS_STATCOUNT.
NOTE: The data set EMWS1.CLUS_PROFILE has 140 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
23108      proc sort data=EMWS1.Clus_PROFILE NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus_PROFILE NOTHREADS;
23109      by _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
23110      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 140 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: The data set EMWS1.CLUS_PROFILE has 140 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23111      proc sort data=WORK.M126UQ_1;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M126UQ_1;
23112      by Name;
MPRINT(EM_DIAGRAM):   by Name;
23113      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.M126UQ_1.
NOTE: The data set WORK.M126UQ_1 has 6 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23114      data EMWS1.Clus_PROFILE;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_PROFILE;
23115      merge EMWS1.Clus_PROFILE(in=_a) WORK.M126UQ_1(keep=Name Label Role rename=(Name=_Variable_ Label=_Label_));
MPRINT(EM_DIAGRAM):   merge EMWS1.Clus_PROFILE(in=_a) WORK.M126UQ_1(keep=Name Label Role rename=(Name=_Variable_ Label=_Label_));
23116      by _Variable_;
MPRINT(EM_DIAGRAM):   by _Variable_;
23117      label Role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Role = "Role";
23118      label Label = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Label = "Label";
23119      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
23120      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable Label is uninitialized.
WARNING: Multiple lengths were specified for the BY variable _VARIABLE_ by input data sets. This might cause unexpected results.
NOTE: There were 140 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: There were 6 observations read from the data set WORK.M126UQ_1.
NOTE: The data set EMWS1.CLUS_PROFILE has 140 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
23121      proc sort data=EMWS1.Clus_PROFILE;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus_PROFILE;
23122      by _SEGMENT_ _VARIABLE_ _X_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_ _VARIABLE_ _X_;
23123      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 140 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: The data set EMWS1.CLUS_PROFILE has 140 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23124      data EMWS1.Clus_PROFILE(rename=(_VARIABLE_=Variable _X_=NumericValue _XLABEL_=FmtValue));
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_PROFILE(rename=(_VARIABLE_=Variable _X_=NumericValue _XLABEL_=FmtValue));
23125      set EMWS1.Clus_PROFILE;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_PROFILE;
23126      retain orderedValue 0;
MPRINT(EM_DIAGRAM):   retain orderedValue 0;
23127      label OrderedValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_OrderedValue_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label OrderedValue = "Ordered Values";
23128      by _SEGMENT_ _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_ _VARIABLE_;
23129      if first._variable_ then orderedValue=1;
MPRINT(EM_DIAGRAM):   if first._variable_ then orderedValue=1;
23130      else orderedValue+1;
MPRINT(EM_DIAGRAM):   else orderedValue+1;
23131      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 140 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: The data set EMWS1.CLUS_PROFILE has 140 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23132      data WORK.Clus_temp;
MPRINT(EM_DIAGRAM):    data WORK.Clus_temp;
23133      set EMWS1.Clus_OUTMEAN;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTMEAN;
23134      _idvar_=left(put(_SEGMENT_,4.));
MPRINT(EM_DIAGRAM):   _idvar_=left(put(_SEGMENT_,4.));
23135      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS1.CLUS_OUTMEAN.
NOTE: The data set WORK.CLUS_TEMP has 7 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23136      proc distance data=WORK.Clus_temp out=EMWS1.Clus_DISTANCE method=l(2) shape=square;
MPRINT(EM_DIAGRAM):   proc distance data=WORK.Clus_temp out=EMWS1.Clus_DISTANCE method=l(2) shape=square;
23137      id _idvar_;
MPRINT(EM_DIAGRAM):   id _idvar_;
23138      var interval(%dmvqvars);
MPRINT(EM_DIAGRAM):   var interval(
MPRINT(DMVQVARS):  AvgTumorSize Avginv_node_group deg_malig IMP_node_capsno IMP_node_capsyes irradiatno irradiatyes
MPRINT(EM_DIAGRAM):  );
23139      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set EMWS1.CLUS_DISTANCE has 7 observations and 8 variables.
NOTE: PROCEDURE DISTANCE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23140      proc mds data=EMWS1.Clus_DISTANCE out=WORK.Clus_mds level=absolute nohist shape=square dim=3;
MPRINT(EM_DIAGRAM):    proc mds data=EMWS1.Clus_DISTANCE out=WORK.Clus_mds level=absolute nohist shape=square dim=3;
23141      object _idvar_;
MPRINT(EM_DIAGRAM):   object _idvar_;
23142      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Convergence reached in 9 iterations.
NOTE: The data set WORK.CLUS_MDS has 8 observations and 8 variables.
NOTE: PROCEDURE MDS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
23143      quit;
23144      data WORK.Clus_mds;
MPRINT(EM_DIAGRAM):   data WORK.Clus_mds;
23145      set WORK.Clus_mds;
MPRINT(EM_DIAGRAM):   set WORK.Clus_mds;
23146      if _type_ ne 'CONFIG' then delete;
MPRINT(EM_DIAGRAM):   if _type_ ne 'CONFIG' then delete;
23147      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.CLUS_MDS.
NOTE: The data set WORK.CLUS_MDS has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23148      data WORK.Clus_mds(label="&label" keep=_idvar_ _radius_ dim1 dim2 dim3);
WARNING: Apparent symbolic reference LABEL not resolved.
MPRINT(EM_DIAGRAM):   data WORK.Clus_mds(label="&label" KEEP=_idvar_ _radius_ dim1 dim2 dim3);
23149      merge WORK.Clus_temp WORK.Clus_mds;
MPRINT(EM_DIAGRAM):   merge WORK.Clus_temp WORK.Clus_mds;
23150      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.CLUS_TEMP.
NOTE: There were 7 observations read from the data set WORK.CLUS_MDS.
NOTE: The data set WORK.CLUS_MDS has 7 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23151      options nodate;
MPRINT(EM_DIAGRAM):   options nodate;
23152      title1 "%sysfunc(sasmsg(sashelp.dmine, rpt_ClusterDistance_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title1 "Cluster Proximities";
23153      %plotit(data=WORK.Clus_mds, datatype=mds, radii=_radius_, labelvar=_idvar_, symtype=circle, symbols='*', gout=WORK.Clus, gname=DISTANCE, gopts2=nodisplay, gopts=device=GIF, gopplot=cback=white, titlecol=black, labelcol=black, tickcol=black,
MPRINT(EM_DIAGRAM):   *------debugging routine to dump out macro variables------;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):  *=========================== Macro Start =============================;
23154         framecol=black, post=C:\Users\manas\AppData\Local\Temp\SAS Temporary Files\_TD13272_DESKTOP-GPKLHDH_\Prc2\plotit.ps);
MPRINT(PLOTIT):   options nonotes;
MPRINT(PLOTIT):   options missing='.';
MPRINT(PLOTIT):   options noserror;
MPRINT(PLOTIT):   options serror;
MPRINT(PLOTIT):   *------store starting time, initialize a few variables-------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length name $ 8 __debug value $ 500 glob $ 32767;
MPRINT(PLOTIT):   __time = datetime();
MPRINT(PLOTIT):   call symput('start',compress(put(__time,best15.)));
MPRINT(PLOTIT):   *------override parameters?-------;
MPRINT(PLOTIT):   glob = left(symget('plotitop'));
MPRINT(PLOTIT):   if glob ne ' ' then put 'Overridden Parameters:';
MPRINT(PLOTIT):   do while(glob ne ' ');
MPRINT(PLOTIT):   i = index(glob, '=');
MPRINT(PLOTIT):   name = substr(glob, 1, i - 1);
MPRINT(PLOTIT):   glob = left(substr(glob, i + 1));
MPRINT(PLOTIT):   i = index(glob, ',');
MPRINT(PLOTIT):   if i = 0 then i = length(glob) + 1;
MPRINT(PLOTIT):   value = substr(glob, 1, i);
MPRINT(PLOTIT):   value = translate(value, ' ', ',');
MPRINT(PLOTIT):   glob = left(substr(glob, i + 1));
MPRINT(PLOTIT):   put name +(-1) '=' value;
MPRINT(PLOTIT):   call symput(name, trim(value));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------debugging flags-------;
MPRINT(PLOTIT):   __debug = symget('debug');
MPRINT(PLOTIT):   call symput('dbyes' ,compress(put(index(__debug,'vars') ,3.)));
MPRINT(PLOTIT):   call symput('dbprint' ,compress(put(index(__debug,'dprint'),3.)));
MPRINT(PLOTIT):   call symput('dbtime' ,compress(put(index(__debug,'time') ,3.)));
MPRINT(PLOTIT):   call symput('dbmprint',compress(put(index(__debug,'mprint'),3.)));
MPRINT(PLOTIT):   if (sysprod('stat') + sysprod('graph')) ne 2 then do;
MPRINT(PLOTIT):   put 'ERROR: SAS/STAT and SAS/GRAPH must be licensed ' 'to run this macro.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symget('style') ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: STYLE= is not supported in this release of the macro.' / '       Use OPTIONS NOGSTYLE to get the old appearance.' / '       Typically, you should set a style ' 'on the ODS destination.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length s $ 20;
MPRINT(PLOTIT):   retain s ' ';
MPRINT(PLOTIT):   file print;
MPRINT(PLOTIT):   set sashelp.vdest;
MPRINT(PLOTIT):   notb = style ne ' ';
MPRINT(PLOTIT):   style = lowcase(style);
MPRINT(PLOTIT):   if style eq 'listing' and s eq ' ' then call symputx('style', style, 'L');
MPRINT(PLOTIT):   else if style ne 'listing' and notb then do;
MPRINT(PLOTIT):   if s eq ' ' then s = style;
MPRINT(PLOTIT):   else if style ne s then do;
MPRINT(PLOTIT):   file log;
MPRINT(PLOTIT):   put 'ERROR: Multiple non-listing destinations with ' 'multiple ' 'styles ' 'are ' 'open.';
MPRINT(PLOTIT):   call symput('abort', '2');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if s ne ' ' then call symputx('style', s, 'L');
MPRINT(PLOTIT):   if _error_ then call symput('abort', '1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   *------mention var names for ordinary SAS syntax check-------;
MPRINT(PLOTIT):   retain _idvar_ __junk 0;
MPRINT(PLOTIT):   array __1 _idvar_ __junk;
MPRINT(PLOTIT):   *------guard against silly n-literals------;
MPRINT(PLOTIT):   if length(symget('labelvar')) > 67 or length(symget('symvar')) > 67 or length(symget('typevar')) > 67 then do;
MPRINT(PLOTIT):   put 'ERROR: Your names are too long!';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store current linesize and pagesize to restore later------;
MPRINT(PLOTIT):   length __ls __ps __var sysscp $ 8 ;
MPRINT(PLOTIT):   __num = getoption('number');
MPRINT(PLOTIT):   __ls = getoption('linesize');
MPRINT(PLOTIT):   __ps = getoption('pagesize');
MPRINT(PLOTIT):   __lab = getoption('label');
MPRINT(PLOTIT):   __var = getoption('validvarname');
MPRINT(PLOTIT):   __page = input(__ps, 8.);
MPRINT(PLOTIT):   if __page < 200 then __logps = __page + 1;
MPRINT(PLOTIT):   else __logps = 200;
MPRINT(PLOTIT):   if __logps < 20 then __logps = 20;
MPRINT(PLOTIT):   call symput('v7' , put(index(__var, '6') eq 0, 1.));
MPRINT(PLOTIT):   call symput('restornum',compress(__num));
MPRINT(PLOTIT):   call symput('restorla', compress(__lab));
MPRINT(PLOTIT):   call symput('restorls', compress(__ls));
MPRINT(PLOTIT):   call symput('restorps', compress(__ps));
MPRINT(PLOTIT):   call symput('logps' , compress(put(__logps, best8.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options label;
MPRINT(PLOTIT):   *------start parameter checking, initialization------;
MPRINT(PLOTIT):   *------initialization------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length data f1-f11 $ 72 name $ 70 post opts datatype plotvars $ 500 filepref $ 32;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   *------change other options based on GSTYLE/NOGSTYLE------;
MPRINT(PLOTIT):   if upcase(symget('style')) ne ' ' then do;
MPRINT(PLOTIT):   if symget('font') eq ' ' then call symput('font', 'none');
MPRINT(PLOTIT):   if symget('tickaxes') eq ' ' then call symput('tickaxes', 'LBFh');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if symget('font') eq ' ' then call symput('font', 'swiss');
MPRINT(PLOTIT):   if symget('tickaxes') eq ' ' then call symput('tickaxes', 'LRTBFlb');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   datatype = upcase(symget('datatype'));
MPRINT(PLOTIT):   *------start setting up background color, border------;
MPRINT(PLOTIT):   opts = lowcase(symget('options'));
MPRINT(PLOTIT):   call symput('noback', put(index(opts, 'noback') ge 1, 1.));
MPRINT(PLOTIT):   if symget('noback') eq '1' then call symput('cframe', ' ');
MPRINT(PLOTIT):   if index(opts, 'noborder') then b = '0';
MPRINT(PLOTIT):   else if index(opts, 'border') then b = '1';
MPRINT(PLOTIT):   else if upcase(symget('style')) eq ' ' then b = '0';
MPRINT(PLOTIT):   else b = '1';
MPRINT(PLOTIT):   call symput('border', b);
MPRINT(PLOTIT):   *------initialize some macro variables------;
MPRINT(PLOTIT):   call symput('onetype','1');
MPRINT(PLOTIT):   call symput('singular','1e-8');
MPRINT(PLOTIT):   call symput('allblank','1');
MPRINT(PLOTIT):   call symput('botblank','0');
MPRINT(PLOTIT):   call symput('nlines' ,'0');
MPRINT(PLOTIT):   call symput('symnumer','0');
MPRINT(PLOTIT):   call symput('typenum' ,'0');
MPRINT(PLOTIT):   call symput('search' ,' ');
MPRINT(PLOTIT):   call symput('actualls','-1');
MPRINT(PLOTIT):   call symput('symdummy','#');
MPRINT(PLOTIT):   call symput('paintcol',' ');
MPRINT(PLOTIT):   call symput('paintmin','.');
MPRINT(PLOTIT):   call symput('paintmax','.');
MPRINT(PLOTIT):   call symput('paintnum','0');
MPRINT(PLOTIT):   call symput('ncontour','0');
MPRINT(PLOTIT):   call symput('hcontour','0');
MPRINT(PLOTIT):   call symput('vcontour','0');
MPRINT(PLOTIT):   call symput('hcondir ','0');
MPRINT(PLOTIT):   call symput('vcondir ','0');
MPRINT(PLOTIT):   call symput('looklist','0');
MPRINT(PLOTIT):   call symput('sizsquar','1');
MPRINT(PLOTIT):   call symput('ntitles' ,'0');
MPRINT(PLOTIT):   call symput('device' ,symget('sysdevic'));
MPRINT(PLOTIT):   call symput('datatype',trim(datatype));
MPRINT(PLOTIT):   call symput('listtitl','*** Wrapped Listing of Point Locations ***');
MPRINT(PLOTIT):   *------set vector scale factor------;
MPRINT(PLOTIT):   name = ' ';
MPRINT(PLOTIT):   do i = 5 to 2 by -1;
MPRINT(PLOTIT):   if name = ' ' then name = scan(datatype,i,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if name = ' ' or nmiss(input(name,?? 32.)) then name = '1';
MPRINT(PLOTIT):   call symput('biplot',trim(name));
MPRINT(PLOTIT):   *------make sure there are input data------;
MPRINT(PLOTIT):   data = left(upcase(symget('data')));
MPRINT(PLOTIT):   if data in (' ' '_LAST_') then do;
MPRINT(PLOTIT):   data = symget('syslast');
MPRINT(PLOTIT):   call symput('data',trim(data));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if data = '_NULL_' then do;
MPRINT(PLOTIT):   put 'ERROR: No input data set.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set default file name------;
MPRINT(PLOTIT):   post = symget('post');
MPRINT(PLOTIT):   if post = ' ' then do;
MPRINT(PLOTIT):   sysscp = symget('sysscp');
MPRINT(PLOTIT):   filepref = symget('filepref');
MPRINT(PLOTIT):   if filepref = ' ' then filepref = 'sasplot';
MPRINT(PLOTIT):   if sysscp = 'CMS' then post = trim(filepref) || ' ' || 'ps';
MPRINT(PLOTIT):   else if sysscp =: 'VMS' or sysscp = 'WIN' or sysscp = 'OS2' then post = trim(filepref) || '.' || 'ps';
MPRINT(PLOTIT):   else post = '.' || trim(filepref) || '.' || 'ps';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('post', trim(post));
MPRINT(PLOTIT):   *------some options cannot have null values------;
MPRINT(PLOTIT):   if symget('out') = ' ' then call symput('out' ,'anno');
MPRINT(PLOTIT):   if symget('tempdat1') = ' ' then call symput('tempdat1','tempdat1');
MPRINT(PLOTIT):   if symget('tempdat2') = ' ' then call symput('tempdat2','tempdat2');
MPRINT(PLOTIT):   if symget('tempdat3') = ' ' then call symput('tempdat3','tempdat3');
MPRINT(PLOTIT):   if symget('tempdat4') = ' ' then call symput('tempdat4','tempdat4');
MPRINT(PLOTIT):   if symget('tempdat5') = ' ' then call symput('tempdat5','tempdat5');
MPRINT(PLOTIT):   if symget('tempdat6') = ' ' then call symput('tempdat6','tempdat6');
MPRINT(PLOTIT):   if symget('regdat') = ' ' then call symput('regdat' ,'regdat');
MPRINT(PLOTIT):   if symget('preproc') = ' ' then call symput('preproc' ,'preproc');
MPRINT(PLOTIT):   if symget('extraobs') = ' ' then call symput('extraobs','extraobs');
MPRINT(PLOTIT):   if symget('radii') = ' ' then call symput('radii' ,'1, 2');
MPRINT(PLOTIT):   if symget('cirsegs') = ' ' then call symput('cirsegs' ,'.1');
MPRINT(PLOTIT):   if symget('cursegs') = ' ' then call symput('cursegs' ,'200');
MPRINT(PLOTIT):   if symget('maxiter') = ' ' then call symput('maxiter' ,'15');
MPRINT(PLOTIT):   if symget('lsinc') = ' ' then call symput('lsinc' ,'15');
MPRINT(PLOTIT):   if symget('place') = ' ' then call symput('place' ,'2 search');
MPRINT(PLOTIT):   if symget('symlen') = ' ' then call symput('symlen' ,'1');
MPRINT(PLOTIT):   if symget('ls') = ' ' then call symput('ls','compute search');
MPRINT(PLOTIT):   if symget('maxokpen') = ' ' then call symput('maxokpen','0');
MPRINT(PLOTIT):   if symget('ticklen') = ' ' then call symput('ticklen' ,'1.5');
MPRINT(PLOTIT):   if symget('tickfor') = ' ' then call symput('tickfor' ,'32.');
MPRINT(PLOTIT):   if symget('hnobs') = ' ' then call symput('hnobs' ,'0');
MPRINT(PLOTIT):   if symget('vnobs') = ' ' then call symput('vnobs' ,'0');
MPRINT(PLOTIT):   *------is radii a variable name?------;
MPRINT(PLOTIT):   name = upcase(substr(left(symget('radii')),1,1));
MPRINT(PLOTIT):   call symput('radname', put('A' <= name <= 'Z' or name = '_' or name = '"' or name = "'", 1.));
MPRINT(PLOTIT):   *------always use a formchar------;
MPRINT(PLOTIT):   call symput('procopts', trim(symget('procopts')) || " formchar='|----|+|---'");
MPRINT(PLOTIT):   *------was TYPES= specified?------;
MPRINT(PLOTIT):   call symput('typespec', put(symget('types') ne ' ',1.));
MPRINT(PLOTIT):   *------set default plotvars------;
MPRINT(PLOTIT):   plotvars = symget('plotvars');
MPRINT(PLOTIT):   if plotvars = ' ' then do;
MPRINT(PLOTIT):   if index(datatype,'MDS') or index(datatype,'MCA') or index(datatype,'ROW') or index(datatype,'COLUMN') or index(datatype,'CORRESP') then plotvars = 'Dim2 Dim1';
MPRINT(PLOTIT):   else if index(datatype,'MDPREF') or index(datatype,'VECTOR') or index(datatype,'IDEAL') then plotvars = 'Prin2 Prin1';
MPRINT(PLOTIT):   call symput('plotvars',trim(plotvars));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for conflicting data set names------;
MPRINT(PLOTIT):   f1 = left(upcase(symget('data')));
MPRINT(PLOTIT):   f2 = left(upcase(symget('out')));
MPRINT(PLOTIT):   f3 = left(upcase(symget('tempdat1')));
MPRINT(PLOTIT):   f4 = left(upcase(symget('tempdat2')));
MPRINT(PLOTIT):   f5 = left(upcase(symget('tempdat3')));
MPRINT(PLOTIT):   f6 = left(upcase(symget('tempdat4')));
MPRINT(PLOTIT):   f7 = left(upcase(symget('tempdat5')));
MPRINT(PLOTIT):   f8 = left(upcase(symget('tempdat6')));
MPRINT(PLOTIT):   f9 = left(upcase(symget('preproc')));
MPRINT(PLOTIT):   f10 = left(upcase(symget('extraobs')));
MPRINT(PLOTIT):   f11 = left(upcase(symget('regdat')));
MPRINT(PLOTIT):   opts = 'DATA OUT TEMPDAT1 TEMPDAT2 TEMPDAT3 TEMPDAT4 TEMPDAT5 ' || 'TEMPDAT6 PREPROC EXTRAOBS REGDAT';
MPRINT(PLOTIT):   array f[11] f1-f11;
MPRINT(PLOTIT):   do i = 1 to 11;
MPRINT(PLOTIT):   if f[i] =: 'WORK.' then f[i] = substr(f[i],6);
MPRINT(PLOTIT):   __name = f[i];
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   f[i] = __name;
MPRINT(PLOTIT):   do j = 1 to (i - 1);
MPRINT(PLOTIT):   if f[i] = f[j] then do;
MPRINT(PLOTIT):   oi = scan(opts,i,' ');
MPRINT(PLOTIT):   oj = scan(opts,j,' ');
MPRINT(PLOTIT):   put 'ERROR: Data sets ' oi +(-1) '=' f[i] 'and ' oj +(-1) '=' f[j] 'must be different.';
MPRINT(PLOTIT):   if oj = 'DATA' then put 'WARNING: You may have not specified DATA=.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   norm: * Normalize name, upper case, strip n-literals. * Input: __name * Output: __name (updated) * Sample usage: * __name = '"a b"n';
MPRINT(PLOTIT):   * link norm;
MPRINT(PLOTIT):   * Creates: __name = 'A B';
MPRINT(PLOTIT):   __name = upcase(__name);
MPRINT(PLOTIT):   if substr(__name,1,1) in ("'", '"') then __name = dequote(__name);
MPRINT(PLOTIT):   drop __name;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------store input data set variable names------;
MPRINT(PLOTIT):   proc contents data=WORK.Clus_mds noprint out=tempdat1;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort data=tempdat1(keep=varnum type name);
MPRINT(PLOTIT):   by varnum;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------look for the type variable, plot variables------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length tvname vplotvar hplotvar upname vnormvar hnormvar pnormvar snormvar $ 70 __list plotvars __name $ 500 __c $ 1;
MPRINT(PLOTIT):   retain tvname vplotvar hplotvar hnormvar vnormvar pnormvar snormvar ' ' ok 1 vfound hfound pfound sfound 0;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   f = (index(symget('datatype'), 'FUNCTION') or index(upcase(symget('symtype')), 'FUNCTION'));
MPRINT(PLOTIT):   call symput('functype', put(f, 1.));
MPRINT(PLOTIT):   __name = symget('typevar');
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   tvname = __name;
MPRINT(PLOTIT):   __list = symget('plotvars');
MPRINT(PLOTIT):   __n = 1;
MPRINT(PLOTIT):   plotvars = __list;
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   vplotvar = __name;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   vnormvar = __name;
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   hplotvar = __name;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   hnormvar = __name;
MPRINT(PLOTIT):   __name = symget('labelvar');
MPRINT(PLOTIT):   pfound = (lowcase(__name) eq '_blank_' or __name eq ' ');
MPRINT(PLOTIT):   if not pfound then do;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   pnormvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = symget('symvar');
MPRINT(PLOTIT):   sfound = (lowcase(__name) eq '_symbol_' or __name eq ' ' or lowcase(__name) eq "'00'x" or lowcase(__name) eq '"00"x');
MPRINT(PLOTIT):   if not sfound then do;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   snormvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __list = symget('paint');
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   call symput('paintvar',trim(__name));
MPRINT(PLOTIT):   call symput('paint' ,trim(__list));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set tempdat1 end=eof;
MPRINT(PLOTIT):   upname = upcase(name);
MPRINT(PLOTIT):   if upname = tvname or (tvname = ' ' and upname = '_TYPE_') then do;
MPRINT(PLOTIT):   if tvname = ' ' then call symput('typevar','_type_');
MPRINT(PLOTIT):   if (type = 1) then call symput('typenum','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------plotting variables must be numeric------;
MPRINT(PLOTIT):   if (upname = hnormvar or upname = vnormvar) and type = 2 then do;
MPRINT(PLOTIT):   put 'ERROR: PLOTVARS=' plotvars 'must be numeric.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set default plotting variables if not set yet------;
MPRINT(PLOTIT):   if type = 1 then do;
MPRINT(PLOTIT):   if hplotvar = ' ' then do;
MPRINT(PLOTIT):   hplotvar = name;
MPRINT(PLOTIT):   hnormvar = upname;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if vplotvar = ' ' then do;
MPRINT(PLOTIT):   vplotvar = name;
MPRINT(PLOTIT):   vnormvar = upname;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------make sure axis variables are found------;
MPRINT(PLOTIT):   if upname = hnormvar then do;
MPRINT(PLOTIT):   hfound = 1;
MPRINT(PLOTIT):   __name = name;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   hplotvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if upname = vnormvar then do;
MPRINT(PLOTIT):   vfound = 1;
MPRINT(PLOTIT):   __name = name;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   vplotvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if upname = pnormvar then pfound = 1;
MPRINT(PLOTIT):   if upname = snormvar then sfound = 1;
MPRINT(PLOTIT):   *------at end, output results------;
MPRINT(PLOTIT):   if eof then do;
MPRINT(PLOTIT):   call symput('vplotvar',trim(vplotvar));
MPRINT(PLOTIT):   call symput('hplotvar',trim(hplotvar));
MPRINT(PLOTIT):   __list = trim(hplotvar) || ' ' || trim(vplotvar);
MPRINT(PLOTIT):   call symput('plotvars',trim(hplotvar) || ' ' || trim(vplotvar));
MPRINT(PLOTIT):   name = 'A' || vplotvar;
MPRINT(PLOTIT):   call symput('appvar1',trim(name));
MPRINT(PLOTIT):   if vplotvar = ' ' or hplotvar = ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Not enough variables to plot.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not hfound then do;
MPRINT(PLOTIT):   put 'ERROR: Horizontal axis variable ' hplotvar 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not vfound then do;
MPRINT(PLOTIT):   put 'ERROR: Vertical axis variable ' vplotvar 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not pfound then do;
MPRINT(PLOTIT):   __name = symget('labelvar');
MPRINT(PLOTIT):   put 'ERROR: Label variable ' __name 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not sfound then do;
MPRINT(PLOTIT):   __name = symget('symvar');
MPRINT(PLOTIT):   put 'ERROR: Symbol variable ' __name 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if hnormvar = '_TYPE_' or vnormvar = '_TYPE_' then put 'WARNING: _TYPE_ is one of the axis variables.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   norm: * Normalize name, upper case, strip n-literals. * Input: __name * Output: __name (updated) * Sample usage: * __name = '"a b"n';
MPRINT(PLOTIT):   * link norm;
MPRINT(PLOTIT):   * Creates: __name = 'A B';
MPRINT(PLOTIT):   __name = upcase(__name);
MPRINT(PLOTIT):   if substr(__name,1,1) in ("'", '"') then __name = dequote(__name);
MPRINT(PLOTIT):   drop __name;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   nliteral: * Puts n-literal on name if necessary. * Input: __name * Output: __name (updated) * Sample usage: * __name = 'a b';
MPRINT(PLOTIT):   * link nliteral;
MPRINT(PLOTIT):   * Creates: __name = "'a b'n";
MPRINT(PLOTIT):   __v7 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789';
MPRINT(PLOTIT):   __len = length(__name);
MPRINT(PLOTIT):   if index(__name, ' ') < __len or '0' <= substr(__name, 1, 1) <= '9' or compress(upcase(__name), __v7) ne ' ' then do;
MPRINT(PLOTIT):   __k = 1;
MPRINT(PLOTIT):   do __i = 1 to length(__name);
MPRINT(PLOTIT):   if substr(__name, __k, 1) eq "'" then do;
MPRINT(PLOTIT):   substr(__name, __k + 1) = "'" || substr(__name, __k + 1);
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = "'" || trim(__name) || "'n";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __name __i __k __v7 __len;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   namescan: * Returns nth name from a list. * Input: __list, __n * Output: __list, (trashed) * __name * Sample usage: * __list = 'a "b"n "C d"N d';
MPRINT(PLOTIT):   * __n = 2;
MPRINT(PLOTIT):   * link namescan;
MPRINT(PLOTIT):   * Creates: __name = '"b"n' * Notes: __name must have a length of at least 67. * a much longer length (say > 256) helps guard * against long, blank padded n-literals.;
MPRINT(PLOTIT):   __list = left(__list);
MPRINT(PLOTIT):   do __i = 1 to __n;
MPRINT(PLOTIT):   __c = substr(__list, 1, 1);
MPRINT(PLOTIT):   if trim(__c) in ("'", '"') then do;
MPRINT(PLOTIT):   __e = 0;
MPRINT(PLOTIT):   __len = length(__list);
MPRINT(PLOTIT):   do __k = 2 to __len until(__e);
MPRINT(PLOTIT):   if upcase(substr(__list, __k, 2)) in ("''", '""') then __k + 1;
MPRINT(PLOTIT):   else if upcase(substr(__list, __k, 2)) = compress(__c || 'N') then __e = __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else __e = index(__list, ' ') - 1;
MPRINT(PLOTIT):   if __e < 1 then __e = length(__list);
MPRINT(PLOTIT):   __name = substr(__list, 1, __e);
MPRINT(PLOTIT):   __list = left(substr(__list, __e + 2));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------guard against silly n-literals------;
MPRINT(PLOTIT):   if length(__name) > 67 then do;
MPRINT(PLOTIT):   put 'ERROR: Your names are too long!';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __list __n __i __k __len __name __c __e;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------generate TYPES= list from data?------;
MPRINT(PLOTIT):   *------preliminary preprocessing that changes the data------;
MPRINT(PLOTIT):   data preproc;
MPRINT(PLOTIT):   set WORK.Clus_mds;
MPRINT(PLOTIT):   if n(Dim2,Dim1) = 2;
MPRINT(PLOTIT):   *------eliminate anti-ideal points------;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------get colors from style------;
MPRINT(PLOTIT):   data tempdat5 tempdat4 tempdat3 tempdat2;
MPRINT(PLOTIT):   length w c $ 20 n 8;
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat6 tempdat6(memtype=view);
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   * Set defaults based on options (from the pre-style days);
MPRINT(PLOTIT):   data tempdat6;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   w = 'parent      ';
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   c = ' ';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gaxis       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('framecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gborderlines';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('color');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('color');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcfit       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('curvecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'glabel      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('labelcol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gtext       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('titlecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gwalls      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('cframe');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata1     ';
MPRINT(PLOTIT):   n = 1;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata2     ';
MPRINT(PLOTIT):   n = 2;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata3     ';
MPRINT(PLOTIT):   n = 3;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata4     ';
MPRINT(PLOTIT):   n = 4;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata5     ';
MPRINT(PLOTIT):   n = 5;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata6     ';
MPRINT(PLOTIT):   n = 6;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata7     ';
MPRINT(PLOTIT):   n = 7;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata8     ';
MPRINT(PLOTIT):   n = 8;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata9     ';
MPRINT(PLOTIT):   n = 9;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata10    ';
MPRINT(PLOTIT):   n = 10;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata11    ';
MPRINT(PLOTIT):   n = 11;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata12    ';
MPRINT(PLOTIT):   n = 12;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   * Get values from style and style parents up to four levels;
MPRINT(PLOTIT):   proc template;
MPRINT(PLOTIT):   source styles.listing / file="C:\Users\manas\AppData\Local\Temp\SAS Temporary Files\_TD13272_DESKTOP-GPKLHDH_\Prc2\plotit.ps";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat2(keep=w c n);
MPRINT(PLOTIT):   infile "C:\Users\manas\AppData\Local\Temp\SAS Temporary Files\_TD13272_DESKTOP-GPKLHDH_\Prc2\plotit.ps" lrecl=80 pad;
MPRINT(PLOTIT):   input line $80.;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   if _n_ eq 1 then call symput('abort', '0');
MPRINT(PLOTIT):   line = lowcase(line);
MPRINT(PLOTIT):   w = scan(line, 1, '"'' =');
MPRINT(PLOTIT):   c = left(scan(line, 2, '=;'));
MPRINT(PLOTIT):   if index(c, '(') then c = ' ';
MPRINT(PLOTIT):   if (w eq 'gaxis') or (w eq 'gtext') or (w eq 'parent') or (w eq 'glabel') or (w eq 'gcfit') or (index(line, 'gwalls') and not index(line, 'olor')) or (index(line, 'gborderlines') and not index(line, 'olor')) or (index(line, 'gcdata') and
not index(line, 'contrast'));
MPRINT(PLOTIT):   line = left(translate(line, '  ', '''"'));
MPRINT(PLOTIT):   n = input(scan(line, 3, 'a '), ?? 3.);
MPRINT(PLOTIT):   if w = 'parent' then do;
MPRINT(PLOTIT):   call symputx('style', scan(c, 2, '.'), 'L');
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc template;
MPRINT(PLOTIT):   source styles.default / file="C:\Users\manas\AppData\Local\Temp\SAS Temporary Files\_TD13272_DESKTOP-GPKLHDH_\Prc2\plotit.ps";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat3(keep=w c n);
MPRINT(PLOTIT):   infile "C:\Users\manas\AppData\Local\Temp\SAS Temporary Files\_TD13272_DESKTOP-GPKLHDH_\Prc2\plotit.ps" lrecl=80 pad;
MPRINT(PLOTIT):   input line $80.;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   if _n_ eq 1 then call symput('abort', '0');
MPRINT(PLOTIT):   line = lowcase(line);
MPRINT(PLOTIT):   w = scan(line, 1, '"'' =');
MPRINT(PLOTIT):   c = left(scan(line, 2, '=;'));
MPRINT(PLOTIT):   if index(c, '(') then c = ' ';
MPRINT(PLOTIT):   if (w eq 'gaxis') or (w eq 'gtext') or (w eq 'parent') or (w eq 'glabel') or (w eq 'gcfit') or (index(line, 'gwalls') and not index(line, 'olor')) or (index(line, 'gborderlines') and not index(line, 'olor')) or (index(line, 'gcdata') and
not index(line, 'contrast'));
MPRINT(PLOTIT):   line = left(translate(line, '  ', '''"'));
MPRINT(PLOTIT):   n = input(scan(line, 3, 'a '), ?? 3.);
MPRINT(PLOTIT):   if w = 'parent' then do;
MPRINT(PLOTIT):   call symputx('style', scan(c, 2, '.'), 'L');
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat3;
MPRINT(PLOTIT):   merge tempdat6 tempdat5 tempdat4 tempdat3 tempdat2;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length list $ 200;
MPRINT(PLOTIT):   retain list ' ';
MPRINT(PLOTIT):   set tempdat3 end=eof;
MPRINT(PLOTIT):   if w eq 'gaxis' then do;
MPRINT(PLOTIT):   if symget('framecol') eq ' ' then call symputx('framecol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'gtext' then do;
MPRINT(PLOTIT):   if symget('titlecol') eq ' ' then call symputx('titlecol', c, 'L');
MPRINT(PLOTIT):   if symget('tickcol') eq ' ' then call symputx('tickcol' , c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'glabel' then do;
MPRINT(PLOTIT):   if symget('labelcol') eq ' ' then call symputx('labelcol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'gcfit' then do;
MPRINT(PLOTIT):   if symget('curvecol') eq ' ' then call symputx('curvecol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not 0 and w eq 'gwalls' and symget('cframe') eq ' ' and c ne '_undef_' then call symputx('cframe', c, 'L');
MPRINT(PLOTIT):   else if 1 and w eq 'gborderlines' then call symput('border', c);
MPRINT(PLOTIT):   if 1 and w =: 'gcdata' then do;
MPRINT(PLOTIT):   if n = 1 then n = .;
MPRINT(PLOTIT):   else if n = . then n = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(n);
MPRINT(PLOTIT):   list = trim(list) || ' ' || c;
MPRINT(PLOTIT):   list = compbl(list);
MPRINT(PLOTIT):   if eof then call symput('colors', compbl(list));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------more initializations------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length name symvar $ 70 color framecol titlecol labelcol tickcol curvecol monochro font size name1-name2 tsize $ 12 anele anele2 $ 16 word $ 24 list list2 datatype types colors symbols symcol symtype symfont symsize labcol labfont
labsize britypes rgbtypes exttypes $ 500;
MPRINT(PLOTIT):   *------finalize border, border color------;
MPRINT(PLOTIT):   word = symget('border');
MPRINT(PLOTIT):   if word eq '1' then word = "black";
MPRINT(PLOTIT):   else if word eq '0' then word = ' ';
MPRINT(PLOTIT):   call symput('border', trim(word));
MPRINT(PLOTIT):   *------set default symbol variable------;
MPRINT(PLOTIT):   symvar = symget('symvar');
MPRINT(PLOTIT):   *------list of valid DATATYPE= values------;
MPRINT(PLOTIT):   array dts[15] corresp mca row column mdpref mdpref2 vector ideal mds curve curve2 function contour square symbol;
MPRINT(PLOTIT):   *------22 lists, 10 lists of ntypes elements, 9 single-element lists 3 longer lists------;
MPRINT(PLOTIT):   listn = 22;
MPRINT(PLOTIT):   listm = 10;
MPRINT(PLOTIT):   listo = 19;
MPRINT(PLOTIT):   array vars[22] $ types colors symbols symcol symtype symfont symsize labcol labfont labsize color framecol titlecol labelcol tickcol curvecol monochro font cframe britypes rgbtypes exttypes;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   *------check method------;
MPRINT(PLOTIT):   name = symget('method');
MPRINT(PLOTIT):   word = lowcase(compress(name,' 2'));
MPRINT(PLOTIT):   if not (word in ('gplot' 'print' 'plot' 'none')) then do;
MPRINT(PLOTIT):   put 'ERROR: METHOD=' name 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   call symput('method',trim(word));
MPRINT(PLOTIT):   if word = 'plot' then call symput('looklist', '1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------convert binary options ------;
MPRINT(PLOTIT):   list = lowcase(symget('options'));
MPRINT(PLOTIT):   call symput('diag' ,put(index(list,'diag') > 0,1.));
MPRINT(PLOTIT):   call symput('expand' ,put(index(list,'expand') > 0,1.));
MPRINT(PLOTIT):   call symput('closebord',put(index(list,'close') > 0,1.));
MPRINT(PLOTIT):   call symput('center' ,put(index(list,'nocenter') = 0,1.));
MPRINT(PLOTIT):   call symput('clip' ,put(index(list,'noclip') = 0,1.));
MPRINT(PLOTIT):   call symput('delete' ,put(index(list,'nodelete') = 0,1.));
MPRINT(PLOTIT):   call symput('linetext' ,put(index(list,'textline') = 0,1.));
MPRINT(PLOTIT):   call symput('squarplt' ,put(index(list,'square') > 0,1.));
MPRINT(PLOTIT):   print = (index(list,'noprint') = 0);
MPRINT(PLOTIT):   call symput('legend' ,put(index(list,'nolegend') = 0 and print,1.));
MPRINT(PLOTIT):   call symput('history',put(index(list,'nohistory') = 0 and print,1.));
MPRINT(PLOTIT):   call symput('code' ,put(index(list,'nocode') = 0 and print,1.));
MPRINT(PLOTIT):   *------make sure all options are recognized------;
MPRINT(PLOTIT):   list2 = 'noborder border close diag expand noclip nocode nodelete ' || 'nocenter noback nohistory nolegend noprint square textline';
MPRINT(PLOTIT):   do i = 1 to 13;
MPRINT(PLOTIT):   word = scan(list2,i);
MPRINT(PLOTIT):   j = index(list,trim(word));
MPRINT(PLOTIT):   if j then substr(list,j,length(word)) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if list ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: The following options are not recognized: ' list +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check INTERPOL=------;
MPRINT(PLOTIT):   list = lowcase(symget('interpol'));
MPRINT(PLOTIT):   call symput('intrtick',put((index(list,'tick') or not (index(list,'ls') or index(list,'no'))),1.));
MPRINT(PLOTIT):   call symput('intrls' ,put((index(list,'ls') or not index(list,'no')),1.));
MPRINT(PLOTIT):   call symput('hlogscal',put((index(list,'hlog') > 0),1.));
MPRINT(PLOTIT):   call symput('vlogscal',put((index(list,'vlog') > 0),1.));
MPRINT(PLOTIT):   *------parse the DATATYPE= option------;
MPRINT(PLOTIT):   datatype = symget('datatype');
MPRINT(PLOTIT):   list = datatype;
MPRINT(PLOTIT):   do i = 1 to 15;
MPRINT(PLOTIT):   call vname(dts[i],name);
MPRINT(PLOTIT):   j = index(datatype,trim(upcase(name)));
MPRINT(PLOTIT):   if j then substr(list,j,length(name)) = ' ';
MPRINT(PLOTIT):   dts[i] = (j ne 0);
MPRINT(PLOTIT):   call symput(name,compress(put(dts[i],1.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   list = compress(list,'0123456789.e+-');
MPRINT(PLOTIT):   if list ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Invalid DATATYPE=' datatype +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------get the lists that must be quoted------;
MPRINT(PLOTIT):   do i = 1 to listn;
MPRINT(PLOTIT):   call vname(vars[i],name);
MPRINT(PLOTIT):   vars[i] = symget(name);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   symtype = lowcase(symtype);
MPRINT(PLOTIT):   britypes = lowcase(britypes);
MPRINT(PLOTIT):   rgbtypes = lowcase(rgbtypes);
MPRINT(PLOTIT):   exttypes = lowcase(exttypes);
MPRINT(PLOTIT):   *-----make sure these are set------;
MPRINT(PLOTIT):   if font = ' ' then font = 'swiss';
MPRINT(PLOTIT):   tsize = symget('tsize');
MPRINT(PLOTIT):   if tsize = ' ' then do;
MPRINT(PLOTIT):   tsize = '1';
MPRINT(PLOTIT):   call symput('tsize','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------process DATATYPE= option------;
MPRINT(PLOTIT):   if datatype ne ' ' then do;
MPRINT(PLOTIT):   if contour then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' contour';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' solid';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   rgbtypes = trim(rgbtypes) || ' contour';
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' contour';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if square then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || ' U';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' square';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' marker';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   rgbtypes = trim(rgbtypes) || ' square';
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' square';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if function then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' function';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' function';
MPRINT(PLOTIT):   name = symget('labelvar');
MPRINT(PLOTIT):   if name = ' ' then call symput('labelvar','_blank_');
MPRINT(PLOTIT):   if symvar = ' ' then put 'WARNING: Null symbol variable ' 'specified with ' 'DATATYPE=function.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref or vector or ideal then types = trim(types) || ' SCORE';
MPRINT(PLOTIT):   if mdpref or vector or ideal or symbol then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || font;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if corresp or row or mca or column then do;
MPRINT(PLOTIT):   types = trim(types) || ' VAR OBS SUPVAR SUPOBS';
MPRINT(PLOTIT):   if row then do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector symbol symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || " '' * * *";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if column then do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol vector symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || " * '' * *";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol symbol symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' * * * *';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   symsize = trim(symsize) || repeat(' ' || trim(tsize),3);
MPRINT(PLOTIT):   symfont = trim(symfont) || repeat(' ' || trim(font) ,3);
MPRINT(PLOTIT):   labsize = trim(labsize) || repeat(' ' || trim(tsize),3);
MPRINT(PLOTIT):   labfont = trim(labfont) || repeat(' ' || trim(font) ,3);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref then do;
MPRINT(PLOTIT):   types = trim(types) || ' CORR';
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref2 then labsize = trim(labsize) || ' ' || compress(put(input(tsize, ?? 32.) * 0.75, best8.));
MPRINT(PLOTIT):   else labsize = trim(labsize) || ' 0';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   size = compress(put(input(tsize,?? 32.) * 1.5, best8.));
MPRINT(PLOTIT):   if vector then do;
MPRINT(PLOTIT):   types = trim(types) || ' MCOEFFI';
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || size;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if ideal then do;
MPRINT(PLOTIT):   types = trim(types) || ' MPOINT';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' +';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' circle';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || size;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mds then do;
MPRINT(PLOTIT):   types = trim(types) || ' CONFIG';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || font;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if (mds or corresp or mca or row or column or mdpref or mdpref2 or vector or ideal) and symget('label') = ' ' then call symput('label','typical');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------ in case these were only specified in the symtype------;
MPRINT(PLOTIT):   if index(symtype, 'contour' ) then call symput('contour' , '1');
MPRINT(PLOTIT):   if index(symtype, 'square' ) then call symput('square' , '1');
MPRINT(PLOTIT):   *------set colors, other defaults------;
MPRINT(PLOTIT):   if color = ' ' then color = 'black';
MPRINT(PLOTIT):   if colors = ' ' then colors = color;
MPRINT(PLOTIT):   if framecol = ' ' then framecol = color;
MPRINT(PLOTIT):   if titlecol = ' ' then titlecol = color;
MPRINT(PLOTIT):   if labelcol = ' ' then labelcol = color;
MPRINT(PLOTIT):   if tickcol = ' ' then tickcol = color;
MPRINT(PLOTIT):   if curvecol = ' ' then curvecol = color;
MPRINT(PLOTIT):   if symtype = ' ' then symtype = 'symbol';
MPRINT(PLOTIT):   if symsize = ' ' then symsize = tsize;
MPRINT(PLOTIT):   if symfont = ' ' then symfont = font;
MPRINT(PLOTIT):   if labsize = ' ' then labsize = tsize;
MPRINT(PLOTIT):   if labfont = ' ' then labfont = font;
MPRINT(PLOTIT):   if exttypes = ' ' then exttypes = "''";
MPRINT(PLOTIT):   if rgbtypes = ' ' then rgbtypes = "''";
MPRINT(PLOTIT):   labcol = trim(labcol) || ' ' || colors;
MPRINT(PLOTIT):   symcol = trim(symcol) || ' ' || colors;
MPRINT(PLOTIT):   *------default symbols when unspecified------;
MPRINT(PLOTIT):   if index(symtype, 'symbol') and symvar eq '_symbol_' and symbols = ' ' then do;
MPRINT(PLOTIT):   word = scan(symtype, 1, ' ');
MPRINT(PLOTIT):   do i = 1 to 500 while(word ne ' ');
MPRINT(PLOTIT):   if index(word, 'symbol') then symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   else symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   word = scan(symtype, i + 1, ' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symbols = ' ' then symbols = "''";
MPRINT(PLOTIT):   *------count the number of types------;
MPRINT(PLOTIT):   if types = ' ' then types = "''";
MPRINT(PLOTIT):   do until(word eq ' ');
MPRINT(PLOTIT):   ntypes + 1;
MPRINT(PLOTIT):   word = scan(types, ntypes + 1, ' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   holdntyp = ntypes;
MPRINT(PLOTIT):   *------output number of observation types------;
MPRINT(PLOTIT):   call symput('ntypes',compress(put(ntypes,3.)));
MPRINT(PLOTIT):   *------output lists, make sure they are quoted------;
MPRINT(PLOTIT):   do i = 1 to listn;
MPRINT(PLOTIT):   if i > listm then ntypes = 1;
MPRINT(PLOTIT):   if i > listo then ntypes = 200;
MPRINT(PLOTIT):   link qlist;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   ntypes = holdntyp;
MPRINT(PLOTIT):   *------output sizes for squares------;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   word = scan(symtype, i, ' ');
MPRINT(PLOTIT):   if index(word, 'square') then call symput('sizsquar', compress(scan(symsize, i, ' '), " '"||'"'));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for constant symvar with vectors------;
MPRINT(PLOTIT):   symcon = (symvar = ' ' or (compress(symvar,"'"||'"') ne symvar));
MPRINT(PLOTIT):   if symcon then do;
MPRINT(PLOTIT):   i = length(symvar);
MPRINT(PLOTIT):   if i > 3 then do;
MPRINT(PLOTIT):   word = upcase(substr(symvar, i - 1));
MPRINT(PLOTIT):   if word in ('"N', "'N") then symcon = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('symcon',put(symcon,1.));
MPRINT(PLOTIT):   if symcon and index(symtype,'vector') then do;
MPRINT(PLOTIT):   put 'ERROR: Constant SYMVAR= is not allowed with vectors.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------parse RGBROUND= option------;
MPRINT(PLOTIT):   list = symget('rgbround');
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   do i = 1 to 4;
MPRINT(PLOTIT):   name = scan(list, i, ' ');
MPRINT(PLOTIT):   num = input(name, ?? 32.);
MPRINT(PLOTIT):   if nmiss(num) then num = .;
MPRINT(PLOTIT):   if i > 1 and num <= 0 then num = 1;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || compress(put(num,best8.));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('rgbround',trim(left(list2)));
MPRINT(PLOTIT):   *------anything specified for the BRIGHT= option?------;
MPRINT(PLOTIT):   if symget('bright') = ' ' then do;
MPRINT(PLOTIT):   britypes = ' ';
MPRINT(PLOTIT):   call symput('britypes', compress(britypes));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------anything specified for the PAINT= option?------;
MPRINT(PLOTIT):   list = left(symget('paint'));
MPRINT(PLOTIT):   if symget('paintvar') = ' ' then do;
MPRINT(PLOTIT):   rgbtypes = ' ';
MPRINT(PLOTIT):   call symput('rgbtypes', compress(rgbtypes));
MPRINT(PLOTIT):   if contour then put 'WARNING: PAINT= was not specified ' 'with a contour plot.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------parse PAINT= option------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   *------count list elements------;
MPRINT(PLOTIT):   do n = 1 to 500 until(name2 = ' ');
MPRINT(PLOTIT):   name2 = scan(list,n,' ');
MPRINT(PLOTIT):   if n(input(name2,?? 32.)) then name2 = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   n = n - 1;
MPRINT(PLOTIT):   *------set default, when only a variable name is specified------;
MPRINT(PLOTIT):   if n < 1 then do;
MPRINT(PLOTIT):   n = 3;
MPRINT(PLOTIT):   list = 'blue magenta red';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if n < 2 then do;
MPRINT(PLOTIT):   n = 2;
MPRINT(PLOTIT):   name2 = scan(list,1,' ');
MPRINT(PLOTIT):   list = compress(name2) || ' ' || compress(name2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('paintcol', trim(list));
MPRINT(PLOTIT):   *------store, check number of list elements------;
MPRINT(PLOTIT):   call symput('paintnum',compress(put(n,3.)));
MPRINT(PLOTIT):   *------table of recognized colors and their hex rgb------;
MPRINT(PLOTIT):   allcols = 'BLACK--BLUE---BROWN--GRAY---GREEN--OLIVE--ORANGE-' || 'PINK---PURPLE-RED----VIOLET-WHITE--YELLOW-MAGENTA' || 'CYAN---';
MPRINT(PLOTIT):   hexcols = '000000 0000ff a05000 808080 00ff00 2a8307 ff8000 ' || 'ff0080 703070 ff0000 b090d0 ffffff ffff00 ff00ff ' || '00ffff ';
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   *------construct list of (decimal) RGB values------;
MPRINT(PLOTIT):   do j = 1 to 3;
MPRINT(PLOTIT):   do i = 1 to n;
MPRINT(PLOTIT):   color = upcase(scan(list, i, ' '));
MPRINT(PLOTIT):   k = index(allcols,trim(color));
MPRINT(PLOTIT):   *------grab hex code for name, or parse CXrrggbb------;
MPRINT(PLOTIT):   if k then name1 = substr(hexcols,k + (j - 1) * 2,2);
MPRINT(PLOTIT):   else name1 = substr(color ,(j - 1) * 2 + 3,2);
MPRINT(PLOTIT):   *------check for validity------;
MPRINT(PLOTIT):   num = input(name1,?? hex2.);
MPRINT(PLOTIT):   if nmiss(num) then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= color of ' color 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   j = 4;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   name1 = compress(put(num,3.));
MPRINT(PLOTIT):   if length(list2) + length(name1) + 1 > 500 then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   j = 3;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------build list------;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || trim(name1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store line segment end points in list if specified------;
MPRINT(PLOTIT):   list2 = left(list2);
MPRINT(PLOTIT):   name1 = scan(list,n + 1,' ');
MPRINT(PLOTIT):   if name1 ne ' ' then do;
MPRINT(PLOTIT):   do i = 1 to n;
MPRINT(PLOTIT):   name1 = scan(list,n + i,' ');
MPRINT(PLOTIT):   if nmiss(input(name1,?? 32.)) then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= data value of ' name1 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if length(list2) + length(name1) + 1 > 500 then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || name1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   name1 = scan(list,2 * n + 1,' ');
MPRINT(PLOTIT):   if name1 ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= data value list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store processed PAINT= list------;
MPRINT(PLOTIT):   call symput('paint',trim(list2));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if input(symget('legend'), ?? 32.) then do;
MPRINT(PLOTIT):   awidth = 9;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele = scan(types, i, ' ');
MPRINT(PLOTIT):   awidth = max(awidth, length(anele) + 1);
MPRINT(PLOTIT):   awidth = max(awidth, length(scan(symbols, i, ' ')) + 1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   cols = min(15 + awidth * ntypes, 256);
MPRINT(PLOTIT):   cols = 15 + floor((cols - 15) / awidth) * awidth;
MPRINT(PLOTIT):   m = floor((256 - cols) / 2);
MPRINT(PLOTIT):   cols = cols - 1;
MPRINT(PLOTIT):   put / +m 'Types Legend  |' @@;
MPRINT(PLOTIT):   list = types;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   list = repeat('-', cols);
MPRINT(PLOTIT):   substr(list, 15, 1) = '+';
MPRINT(PLOTIT):   put +m list;
MPRINT(PLOTIT):   put +m 'Symbol Types  |' @@;
MPRINT(PLOTIT):   list = symtype;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbols       |' @@;
MPRINT(PLOTIT):   list = symbols;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbol Colors |' @@;
MPRINT(PLOTIT):   list = symcol;
MPRINT(PLOTIT):   link legendc;
MPRINT(PLOTIT):   put +m 'Label  Colors |' @@;
MPRINT(PLOTIT):   list = labcol;
MPRINT(PLOTIT):   link legendc;
MPRINT(PLOTIT):   put +m 'Symbol Sizes  |' @@;
MPRINT(PLOTIT):   list = symsize;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Label  Sizes  |' @@;
MPRINT(PLOTIT):   list = labsize;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbol Fonts  |' @@;
MPRINT(PLOTIT):   list = symfont;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Label  Fonts  |' @@;
MPRINT(PLOTIT):   list = labfont;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   list = repeat('-', cols);
MPRINT(PLOTIT):   put +m list;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ or not ok then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   legend: *------print legend------;
MPRINT(PLOTIT):   j = 0;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele = compress(scan(list, i, ' '), "'"||'"');
MPRINT(PLOTIT):   link printele;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   legendc: *------print legend for colors------;
MPRINT(PLOTIT):   j = 0;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele2 = scan(symtype, i, ' ');
MPRINT(PLOTIT):   if index(rgbtypes, trim(anele2)) or index(britypes, trim(anele2)) then anele = ' ';
MPRINT(PLOTIT):   else anele = compress(scan(list, i, ' '), "'"||'"');
MPRINT(PLOTIT):   link printele;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   printele: *------print one table element------;
MPRINT(PLOTIT):   j = j + 1;
MPRINT(PLOTIT):   if (15 + awidth * j) > 256 then do;
MPRINT(PLOTIT):   put / +(m+14) '|' @@;
MPRINT(PLOTIT):   j = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put @(m + 17 + (j - 1) * awidth) anele $ @@;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   qlist: *------quote the elements of a list------;
MPRINT(PLOTIT):   call vname(vars[i],name);
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   list = vars[i];
MPRINT(PLOTIT):   charv = not index(upcase(name),'SIZE');
MPRINT(PLOTIT):   word = scan(list,1,' ');
MPRINT(PLOTIT):   do n = 1 to ntypes while(word ne ' ');
MPRINT(PLOTIT):   if charv then do;
MPRINT(PLOTIT):   word = compress("'" || compress(word,"'"||'"') || "'");
MPRINT(PLOTIT):   if not index(substr(word,2),"'") then do;
MPRINT(PLOTIT):   put 'ERROR: The list element ' name +(-1) '=' word 'is too long.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if (length(list2) + length(word)) >= 500 then do;
MPRINT(PLOTIT):   put 'ERROR: The list ' name +(-1) '=' list2 'is too long.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || word;
MPRINT(PLOTIT):   word = scan(list,n + 1,' ');
MPRINT(PLOTIT):   if word = ' ' and i <= listm then word = scan(list2,1,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput(name,trim(left(list2)));
MPRINT(PLOTIT):   vars[i] = list2;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
 
                                                                                                                    Types Legend  | CONFIG
                                                                                                                    --------------+---------
                                                                                                                    Symbol Types  | circle
                                                                                                                    Symbols       | *
                                                                                                                    Symbol Colors | cx000000
                                                                                                                    Label  Colors | cx000000
                                                                                                                    Symbol Sizes  | 1
                                                                                                                    Label  Sizes  | 1
                                                                                                                    Symbol Fonts  | none
                                                                                                                    Label  Fonts  | none
                                                                                                                    ------------------------
MPRINT(PLOTIT):   *------inertias for correspondence analysis variable labels------;
MPRINT(PLOTIT):   *------check, set remaining variables------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   set tempdat1 end=eof;
MPRINT(PLOTIT):   length __name setl labelvar tvname symvar paintvar upname $ 70;
MPRINT(PLOTIT):   retain setl labelvar tvname symvar paintvar ' ' paintfou typefoun 0 ok 1;
MPRINT(PLOTIT):   upname = upcase(name);
MPRINT(PLOTIT):   *------get current names------;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   tvname = dequote(symget('typevar'));
MPRINT(PLOTIT):   labelvar = dequote(symget('labelvar'));
MPRINT(PLOTIT):   paintvar = dequote(symget('paintvar'));
MPRINT(PLOTIT):   if 0 then symvar = _symbol_;
MPRINT(PLOTIT):   else symvar = dequote(symget('symvar'));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------is the symbol variable numeric or character?------;
MPRINT(PLOTIT):   if not 0 and upname = upcase(symvar) and type = 1 then call symput('symnumer','1');
MPRINT(PLOTIT):   *------find _type_ variable------;
MPRINT(PLOTIT):   if upname = upcase(tvname) then typefoun = 1;
MPRINT(PLOTIT):   *------find PAINT= variable------;
MPRINT(PLOTIT):   if upname = upcase(paintvar) and type = 1 then paintfou = 1;
MPRINT(PLOTIT):   *------find default label variable name------;
MPRINT(PLOTIT):   else if type = 2 and (setl = ' ' or upname ne '_TYPE_') then setl = name;
MPRINT(PLOTIT):   *------at end, output results------;
MPRINT(PLOTIT):   if eof then do;
MPRINT(PLOTIT):   if labelvar = ' ' and setl ne ' ' then labelvar = setl;
MPRINT(PLOTIT):   if labelvar = ' ' then labelvar = '_blank_';
MPRINT(PLOTIT):   __name = labelvar;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   call symput('labelvar', trim(__name));
MPRINT(PLOTIT):   *------assorted error checking------;
MPRINT(PLOTIT):   if not typefoun and tvname ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: TYPEVAR=' tvname 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not typefoun and input(symget('typespec'), ?? 32.) then do;
MPRINT(PLOTIT):   put 'ERROR: A type variable must be available ' 'when TYPES= ' 'is specified.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not (paintvar = ' ' or paintfou) then do;
MPRINT(PLOTIT):   put 'ERROR: A numeric PAINT=' paintvar 'variable was not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   nliteral: * Puts n-literal on name if necessary. * Input: __name * Output: __name (updated) * Sample usage: * __name = 'a b';
MPRINT(PLOTIT):   * link nliteral;
MPRINT(PLOTIT):   * Creates: __name = "'a b'n";
MPRINT(PLOTIT):   __v7 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789';
MPRINT(PLOTIT):   __len = length(__name);
MPRINT(PLOTIT):   if index(__name, ' ') < __len or '0' <= substr(__name, 1, 1) <= '9' or compress(upcase(__name), __v7) ne ' ' then do;
MPRINT(PLOTIT):   __k = 1;
MPRINT(PLOTIT):   do __i = 1 to __len;
MPRINT(PLOTIT):   if substr(__name, __k, 1) eq "'" then do;
MPRINT(PLOTIT):   substr(__name, __k + 1) = "'" || substr(__name, __k + 1);
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = "'" || trim(__name) || "'n";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __name __i __k __v7 __len;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------find minima, maxima------;
MPRINT(PLOTIT):   proc means data=preproc noprint;
MPRINT(PLOTIT):   output out=tempdat1 max(Dim2 Dim1 )=vmax hmax min(Dim2 Dim1 )=vmin hmin;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------set goptions------;
MPRINT(PLOTIT):   goptions nodisplay device=PNG cback=white device=GIF;
MPRINT(PLOTIT):   *------check some parameters for valid values, set up others------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length c $ 1 vplotvar hplotvar labelvar $ 70 opt $ 8 str place vecheadr vecheadw tinc device $ 12 outward search vechead ls $ 32 label plotreq plotopts upopts pl list labely labelx label $ 500 ind1 ind2 $ 35;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   call symput('somedata','0');
MPRINT(PLOTIT):   set tempdat1(drop=_type_);
MPRINT(PLOTIT):   call symput('somedata','1');
MPRINT(PLOTIT):   call symput('vinter', '.');
MPRINT(PLOTIT):   call symput('hinter', '.');
MPRINT(PLOTIT):   call symput('hslope', '.');
MPRINT(PLOTIT):   call symput('vslope', '.');
MPRINT(PLOTIT):   *------check missings------;
MPRINT(PLOTIT):   if n(vmin,hmin,vmax,hmax) < 4 then do;
MPRINT(PLOTIT):   put 'ERROR: At least one variable is all missing.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for nonpositive data with log scales------;
MPRINT(PLOTIT):   if (vmin <= 0 and 0) or (hmin <= 0 and 0) then do;
MPRINT(PLOTIT):   put "ERROR: Nonpositive data with INTERPOL=yes.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store extend values------;
MPRINT(PLOTIT):   list = symget('extend');
MPRINT(PLOTIT):   call symput('close',compress(put(index(list,'close'),best3.)));
MPRINT(PLOTIT):   if nmiss(input(scan(list,1,' '),?? 32.)) then call symput('extendl',' ');
MPRINT(PLOTIT):   else call symput('extendl',scan(list,1,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,2,' '),?? 32.)) then call symput('extendr',' ');
MPRINT(PLOTIT):   else call symput('extendr',scan(list,2,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,3,' '),?? 32.)) then call symput('extendt',' ');
MPRINT(PLOTIT):   else call symput('extendt',scan(list,3,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,4,' '),?? 32.)) then call symput('extendb',' ');
MPRINT(PLOTIT):   else call symput('extendb',scan(list,4,' '));
MPRINT(PLOTIT):   *------make sure PAINT= minimum, maximum are stored------;
MPRINT(PLOTIT):   call symput('rgbround', trim(symget('rgbround')) || ' .');
MPRINT(PLOTIT):   *------compute (possibly adjusted) range------;
MPRINT(PLOTIT):   isavec = index(symget('symtype'),'vector');
MPRINT(PLOTIT):   if isavec then do;
MPRINT(PLOTIT):   vmin = min(0,vmin);
MPRINT(PLOTIT):   hmin = min(0,hmin);
MPRINT(PLOTIT):   vmax = max(0,vmax);
MPRINT(PLOTIT):   hmax = max(0,hmax);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   vmax = max(vmax,hmax);
MPRINT(PLOTIT):   hmax = vmax;
MPRINT(PLOTIT):   vmin = min(vmin,hmin);
MPRINT(PLOTIT):   hmin = vmin;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 and not 0 then range = vmax - vmin;
MPRINT(PLOTIT):   else if 0 and not 0 then range = hmax - hmin;
MPRINT(PLOTIT):   else range = max(vmax - vmin, hmax - hmin);
MPRINT(PLOTIT):   range = max(1e4 * 1e-8,range);
MPRINT(PLOTIT):   *------default increment, minima, maxima------;
MPRINT(PLOTIT):   inc = input(symget('inc'),?? 32.);
MPRINT(PLOTIT):   if n(inc) = 0 then do;
MPRINT(PLOTIT):   inc = 10 ** ceil(log10(range) - 1.0);
MPRINT(PLOTIT):   if range / inc >= 7.5 then inc = inc * 2;
MPRINT(PLOTIT):   if range / inc <= 2.5 then inc = inc / 2;
MPRINT(PLOTIT):   if range / inc <= 2.5 then inc = inc / 2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   tinc = compress(put(inc,best12.));
MPRINT(PLOTIT):   if n(inc) = 0 then do;
MPRINT(PLOTIT):   put 'ERROR: Input data set is empty, constant, or corrupt.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('inc' ,trim(tinc));
MPRINT(PLOTIT):   call symput('hmax',compress(put(hmax,best15.)));
MPRINT(PLOTIT):   call symput('hmin',compress(put(hmin,best15.)));
MPRINT(PLOTIT):   call symput('vmax',compress(put(vmax,best15.)));
MPRINT(PLOTIT):   call symput('vmin',compress(put(vmin,best15.)));
MPRINT(PLOTIT):   *------construct plot request------;
MPRINT(PLOTIT):   vplotvar = symget('vplotvar');
MPRINT(PLOTIT):   hplotvar = symget('hplotvar');
MPRINT(PLOTIT):   plotopts = symget('plotopts');
MPRINT(PLOTIT):   labelvar = symget('labelvar');
MPRINT(PLOTIT):   upopts = upcase(plotopts);
MPRINT(PLOTIT):   plotreq = trim(vplotvar) || ' * ' || trim(hplotvar) || ' $ ' || trim(labelvar) || ' = _symbol_';
MPRINT(PLOTIT):   *------check for HREF= VREF= options------;
MPRINT(PLOTIT):   if index(upopts,'HREF') or index(upopts,'VREF') then put 'WARNING: HREF= and VREF= PLOT options are ignored.  ' 'Specify ' 'them as ' 'macro options ' 'instead.';
MPRINT(PLOTIT):   *------see if we need to generate a placement list------;
MPRINT(PLOTIT):   pl = ' ';
MPRINT(PLOTIT):   i = index(upopts,'PLACE');
MPRINT(PLOTIT):   if i then do;
MPRINT(PLOTIT):   pl = substr(plotopts,i);
MPRINT(PLOTIT):   if i > 1 then plotopts = substr(plotopts,1,i - 1);
MPRINT(PLOTIT):   else plotopts = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle horizontal ticks if not already specified------;
MPRINT(PLOTIT):   c = 'h';
MPRINT(PLOTIT):   maxim = hmax;
MPRINT(PLOTIT):   minim = hmin;
MPRINT(PLOTIT):   logscal = 0;
MPRINT(PLOTIT):   link maketick;
MPRINT(PLOTIT):   *------handle vertical ticks if not already specified------;
MPRINT(PLOTIT):   c = 'v';
MPRINT(PLOTIT):   maxim = vmax;
MPRINT(PLOTIT):   minim = vmin;
MPRINT(PLOTIT):   logscal = 0;
MPRINT(PLOTIT):   link maketick;
MPRINT(PLOTIT):   *------outward option------;
MPRINT(PLOTIT):   outward = symget('outward');
MPRINT(PLOTIT):   if outward ne 'none' then do;
MPRINT(PLOTIT):   if outward = ' ' and isavec then outward = symget('symdummy');
MPRINT(PLOTIT):   if outward ne ' ' then plotopts = trim(plotopts) || ' outward="' || compress(outward,"'"||'" ') || '"';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------box option------;
MPRINT(PLOTIT):   plotopts = trim(left(plotopts)) || ' box';
MPRINT(PLOTIT):   *------reference lines------;
MPRINT(PLOTIT):   list = symget('href');
MPRINT(PLOTIT):   if list ne ' ' then plotopts = trim(plotopts) || ' href=' || list;
MPRINT(PLOTIT):   list = symget('vref');
MPRINT(PLOTIT):   if list ne ' ' then plotopts = trim(plotopts) || ' vref=' || list;
MPRINT(PLOTIT):   *------set up vector heads------;
MPRINT(PLOTIT):   vechead = symget('vechead');
MPRINT(PLOTIT):   vecheadr = scan(vechead,1,' ');
MPRINT(PLOTIT):   vecheadw = scan(vechead,2,' ');
MPRINT(PLOTIT):   if vecheadw = ' ' then vecheadr = ' ';
MPRINT(PLOTIT):   *------determine graphics area------;
MPRINT(PLOTIT):   rc1 = ginit();
MPRINT(PLOTIT):   call gask('maxdisp',units,xmax,ymax,xpix,ypix,rc2);
MPRINT(PLOTIT):   call gask('device',device,rc3);
MPRINT(PLOTIT):   rc4 = gterm();
MPRINT(PLOTIT):   if rc1 or rc2 or rc3 or rc4 then do;
MPRINT(PLOTIT):   put 'ERROR: GASK call for XMAX= and YMAX= failed.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   xmax = xmax * 100;
MPRINT(PLOTIT):   ymax = ymax * 100;
MPRINT(PLOTIT):   if symget('unit') = 'in' then do;
MPRINT(PLOTIT):   xmax = xmax / 2.54;
MPRINT(PLOTIT):   ymax = ymax / 2.54;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   xmax = floor(xmax * 100) / 100;
MPRINT(PLOTIT):   ymax = floor(ymax * 100) / 100;
MPRINT(PLOTIT):   *------max horizontal graph size------;
MPRINT(PLOTIT):   if symget('xmax') = ' ' then call symput('xmax',compress(put(xmax,9.2)));
MPRINT(PLOTIT):   *-------max vertical graph size------;
MPRINT(PLOTIT):   if symget('ymax') = ' ' then call symput('ymax',compress(put(ymax,9.2)));
MPRINT(PLOTIT):   *------construct typical label------;
MPRINT(PLOTIT):   label = symget('label');
MPRINT(PLOTIT):   if label = 'typical' then do;
MPRINT(PLOTIT):   ind1 = substr(vplotvar,length(vplotvar),1);
MPRINT(PLOTIT):   ind2 = substr(hplotvar,length(hplotvar),1);
MPRINT(PLOTIT):   if not ('1' <= ind1 <= '9' and '1' <= ind2 <= '9') then label = ' ';
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   do i = length(vplotvar) to 1 by -1;
MPRINT(PLOTIT):   x = substr(vplotvar,i,1);
MPRINT(PLOTIT):   if not ('1' <= x <= '9') then do;
MPRINT(PLOTIT):   ind1 = substr(vplotvar, i + 1);
MPRINT(PLOTIT):   i = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   do i = length(hplotvar) to 1 by -1;
MPRINT(PLOTIT):   x = substr(hplotvar,i,1);
MPRINT(PLOTIT):   if not ('1' <= x <= '9') then do;
MPRINT(PLOTIT):   ind2 = substr(hplotvar, i + 1);
MPRINT(PLOTIT):   i = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------for correspondence analysis, ------;
MPRINT(PLOTIT):   *------put inertia percentages in labels------;
MPRINT(PLOTIT):   if labelx = ' ' then do;
MPRINT(PLOTIT):   labely = "Dimension " || compress(ind1);
MPRINT(PLOTIT):   labelx = "Dimension " || compress(ind2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   label = 'label ' || symget('vplotvar') || " = '" || trim(labely) || "' " || symget('hplotvar') || " = '" || trim(labelx) || "'";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------simple, imperfect, label statement check------;
MPRINT(PLOTIT):   label = left(label);
MPRINT(PLOTIT):   if label ne ' ' and compress(label,"'"||'="') = label then do;
MPRINT(PLOTIT):   put 'ERROR: Invalid LABEL statement, LABEL=' label +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   str = upcase(scan(label,1));
MPRINT(PLOTIT):   if str ne 'LABEL' and str ne ' ' then label = 'label ' || label;
MPRINT(PLOTIT):   call symput('label' ,trim(label));
MPRINT(PLOTIT):   *------make sure we have britypes with BRIGHT= specified------;
MPRINT(PLOTIT):   if symget('bright') ne ' ' and symget('britypes') = ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Null BRITYPES= is not ' 'permitted ' 'with ' "BRIGHT=.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set up search parameters------;
MPRINT(PLOTIT):   ls = symget('ls');
MPRINT(PLOTIT):   if index(ls,'search') then do;
MPRINT(PLOTIT):   ls = scan(ls,1,' ');
MPRINT(PLOTIT):   if ls = 'compute' then search = 'compute';
MPRINT(PLOTIT):   else search = 'ls';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if ls = ' ' or ls = 'compute' then ls = '.';
MPRINT(PLOTIT):   if pl = ' ' then place = symget('place');
MPRINT(PLOTIT):   else place = '.';
MPRINT(PLOTIT):   if index(place,'search') then do;
MPRINT(PLOTIT):   search = trim(search) || ' place';
MPRINT(PLOTIT):   place = scan(place,1,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if place = ' ' then place = '.';
MPRINT(PLOTIT):   *------see if we should store device------;
MPRINT(PLOTIT):   list = upcase(symget('gopprint'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopplot'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopts2'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopts'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   *------output generated macro variables------;
MPRINT(PLOTIT):   call symput('search' ,trim(search));
MPRINT(PLOTIT):   call symput('ls' ,trim(ls));
MPRINT(PLOTIT):   call symput('place' ,trim(place));
MPRINT(PLOTIT):   call symput('plotopts',trim(plotopts));
MPRINT(PLOTIT):   call symput('plotreq' ,trim(plotreq));
MPRINT(PLOTIT):   call symput('pl' ,trim(pl));
MPRINT(PLOTIT):   call symput('vecheadr',trim(vecheadr));
MPRINT(PLOTIT):   call symput('vecheadw',trim(vecheadw));
MPRINT(PLOTIT):   call symput('device' ,trim(device));
MPRINT(PLOTIT):   *------check some parameters for valid values------;
MPRINT(PLOTIT):   opt='VECHEAD';
MPRINT(PLOTIT):   str=vecheadr;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VECHEAD';
MPRINT(PLOTIT):   str=vecheadw;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='INC';
MPRINT(PLOTIT):   str=tinc;
MPRINT(PLOTIT):   min=1e-8;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HNOBS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VNOBS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='BIPLOT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min=1e-8;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='SYMLEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 22;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='OFFSET';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 1;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='TSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='TICKLEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -10;
MPRINT(PLOTIT):   max= 10;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='ANTIIDEA';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -2;
MPRINT(PLOTIT):   max= 2;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='CIRSEGS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min=1e-4;
MPRINT(PLOTIT):   max= 500;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='CURSEGS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 20;
MPRINT(PLOTIT):   max= 500;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VTOH';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 3;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAKEFIT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -10;
MPRINT(PLOTIT):   max= 10;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='XMAX';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='YMAX';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HPOS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VPOS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='PS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 15;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAXITER';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAXOKPEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 1e9;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='BRIGHT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 5;
MPRINT(PLOTIT):   max= 250;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDL';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDR';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDB';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='LSINC';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='LS';
MPRINT(PLOTIT):   str=ls;
MPRINT(PLOTIT):   min= 64;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   if ls ne '.' then link checkit;
MPRINT(PLOTIT):   opt='PLACE';
MPRINT(PLOTIT):   str=place;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 13;
MPRINT(PLOTIT):   if place ne '.' then link checkit;
MPRINT(PLOTIT):   list = compress(symget('tickaxes'));
MPRINT(PLOTIT):   call symput('tickaxes',trim(list));
MPRINT(PLOTIT):   if compress(list,'LRTBlrtbFh') ne ' ' then do;
MPRINT(PLOTIT):   put "ERROR: TICKAXES=LBFh is not valid.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('frame',put(indexc(list,'RTrtF') > 0,1.));
MPRINT(PLOTIT):   if not (symget('unit') in ('in' 'cm')) then do;
MPRINT(PLOTIT):   put "ERROR: UNIT=in is not valid.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if scan(symget('lsizes'),5,' ') = ' ' then do;
MPRINT(PLOTIT):   put "ERROR: LSIZES=1 1 1 1 1 must specify five sizes.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ or not ok then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   checkit: *------check parameter range------;
MPRINT(PLOTIT):   if str ne ' ' then do;
MPRINT(PLOTIT):   param = input(str,?? 32.);
MPRINT(PLOTIT):   if not (min <= param <= max) then do;
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   put 'ERROR: ' opt +(-1) '=' str 'is not valid.  ' 'The valid range is ' min '<= ' opt '<= ' max +(-1) '.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   maketick: *------handle ticks if not already specified------;
MPRINT(PLOTIT):   minor = input(symget(c ||'minor'),?? 32.);
MPRINT(PLOTIT):   if index(upopts,upcase(c) || 'AXIS') = 0 then do;
MPRINT(PLOTIT):   if maxim > 0 then logmax = ceil(log10(maxim));
MPRINT(PLOTIT):   else logmax = .;
MPRINT(PLOTIT):   if minim > 0 then logmin = floor(log10(minim));
MPRINT(PLOTIT):   else logmin = .;
MPRINT(PLOTIT):   *------major ticks for log scale------;
MPRINT(PLOTIT):   if logscal and n(logmin) then do;
MPRINT(PLOTIT):   plotopts = trim(plotopts) || ' ' || c || 'axis=';
MPRINT(PLOTIT):   do i = logmin to logmax;
MPRINT(PLOTIT):   plotopts = trim(plotopts) || '1e' || compress(put(i,4.)) || ',';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   plotopts = substr(plotopts,1,length(plotopts) - 1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------ordinary major ticks------;
MPRINT(PLOTIT):   else plotopts = trim(plotopts) || ' ' || c || 'axis=by ' || tinc;
MPRINT(PLOTIT):   *------minor ticks------;
MPRINT(PLOTIT):   if minor >= 1 then do;
MPRINT(PLOTIT):   if n(logmax) then do;
MPRINT(PLOTIT):   if logscal then do;
MPRINT(PLOTIT):   maxim = logmax;
MPRINT(PLOTIT):   minim = logmin;
MPRINT(PLOTIT):   i = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else i = inc;
MPRINT(PLOTIT):   maxim = ceil(2 + maxim / i) * i;
MPRINT(PLOTIT):   minim = floor(minim / i - 2) * i;
MPRINT(PLOTIT):   call symput(c || 'minor', compress(put(minim,best12.)) || ' to ' || compress(put(maxim,best12.)) || ' by ' || compress(put(i / (minor + 1),best12.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else call symput(c||'minor',' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------number of minor ticks only allowed with inc is known------;
MPRINT(PLOTIT):   else if n(minor) then do;
MPRINT(PLOTIT):   put 'WARNING: Minor ticks are suppressed when HAXIS= ' 'or VAXIS= ' 'is specified ' 'on PLOTOPTS=.';
MPRINT(PLOTIT):   call symput(c||'minor',' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *========================preprocessing of data========================;
MPRINT(PLOTIT):   *------preprocess the input data set------;
MPRINT(PLOTIT):   data preproc;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length _symbol_ $ 1 __symbol $ 1 __lfont __lcolor __sfont __scolor __stype __color $ 12 __otype $ 16 __temp $ 60 __excols $ 64;
MPRINT(PLOTIT):   retain __nblank __bblank 0 __oldx __oldy . __color __excols ' ';
MPRINT(PLOTIT):   drop __nblank __bblank __dummy __mrkwrn __nconto __oldx __oldy __excols;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   *------set the variable labels------;
MPRINT(PLOTIT):   label Dim2 = 'Dimension 2' Dim1 = 'Dimension 1';
MPRINT(PLOTIT):   call label(Dim2, __temp);
MPRINT(PLOTIT):   call symput('labely',trim(__temp));
MPRINT(PLOTIT):   call label(Dim1, __temp);
MPRINT(PLOTIT):   call symput('labelx',trim(__temp));
MPRINT(PLOTIT):   drop __temp;
MPRINT(PLOTIT):   *------output x coordinates for the curve------;
MPRINT(PLOTIT):   *------computed colors------;
MPRINT(PLOTIT):   *------excluded colors------;
MPRINT(PLOTIT):   __excols = lowcase(symget('excolors'));
MPRINT(PLOTIT):   drop __roupai __roured __rougre __roublu;
MPRINT(PLOTIT):   retain __roupai __roured __rougre __roublu;
MPRINT(PLOTIT):   array __rou[5] __dummy __roured __rougre __roublu __roupai (-240 1 1 1 .);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set up observation type variable------;
MPRINT(PLOTIT):   _type_ = repeat(' ',7);
MPRINT(PLOTIT):   *------preprocess raw data------;
MPRINT(PLOTIT):   set preproc;
MPRINT(PLOTIT):   *------store label/symbol colors, sizes, fonts, types------;
MPRINT(PLOTIT):   array a__ty[1] $ 15 _temporary_ ('CONFIG');
MPRINT(PLOTIT):   __li = 1;
MPRINT(PLOTIT):   drop __li __i;
MPRINT(PLOTIT):   do __i = 1 to 1;
MPRINT(PLOTIT):   _type_ = compress(_type_);
MPRINT(PLOTIT):   __otype = _type_;
MPRINT(PLOTIT):   if _type_ = a__ty[__i] then do;
MPRINT(PLOTIT):   __li = __i;
MPRINT(PLOTIT):   __i = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   array a__ls[1] _temporary_ (1);
MPRINT(PLOTIT):   array a__ss[1] _temporary_ (1);
MPRINT(PLOTIT):   array a__lf[1] $ 12 _temporary_ ('none');
MPRINT(PLOTIT):   array a__lc[1] $ 12 _temporary_ ('cx000000');
MPRINT(PLOTIT):   array a__sf[1] $ 12 _temporary_ ('none');
MPRINT(PLOTIT):   array a__sc[1] $ 12 _temporary_ ('cx000000');
MPRINT(PLOTIT):   array a__st[1] $ 12 _temporary_ ('circle');
MPRINT(PLOTIT):   array a__sy[1] $ 1 _temporary_ ('*');
MPRINT(PLOTIT):   __lsize = a__ls[__li];
MPRINT(PLOTIT):   __ssize = a__ss[__li];
MPRINT(PLOTIT):   __lfont = a__lf[__li];
MPRINT(PLOTIT):   __lcolor = a__lc[__li];
MPRINT(PLOTIT):   __sfont = a__sf[__li];
MPRINT(PLOTIT):   __scolor = a__sc[__li];
MPRINT(PLOTIT):   __stype = a__st[__li];
MPRINT(PLOTIT):   __symbol = a__sy[__li];
MPRINT(PLOTIT):   if upcase(__sfont) = 'MARKER' and upcase(__stype) = 'CONTOUR' then do;
MPRINT(PLOTIT):   __mrkwrn + 1;
MPRINT(PLOTIT):   __sfont = 'solid';
MPRINT(PLOTIT):   if __mrkwrn = 1 then put 'WARNING: The marker font is obsolete ' 'for contour ' 'plots.  The ' 'SOLID font ' 'will be ' 'used instead.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------assign specialized symbols------;
MPRINT(PLOTIT):   if symget('symvar') = '_symbol_' then do;
MPRINT(PLOTIT):   _symbol_ = __symbol;
MPRINT(PLOTIT):   if __stype in ('vector' 'circle') and _symbol_ = ' ' then _symbol_ = "#";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   _symbol_ = _symbol_;
MPRINT(PLOTIT):   __symbol = _symbol_;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------blank out labels?------;
MPRINT(PLOTIT):   if __lsize = 0 or symget('labelvar') = '_blank_' then _idvar_ = ' ';
MPRINT(PLOTIT):   *------stretch vectors------;
MPRINT(PLOTIT):   *------computed colors------;
MPRINT(PLOTIT):   *-------count contour observations, determine directions------;
MPRINT(PLOTIT):   if __stype = 'contour' then do;
MPRINT(PLOTIT):   __nconto + 1;
MPRINT(PLOTIT):   if __nconto = 1 then do;
MPRINT(PLOTIT):   __oldx = Dim1;
MPRINT(PLOTIT):   __oldy = Dim2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if __nconto = 2 then do;
MPRINT(PLOTIT):   call symput('hcondir',compress(put(Dim1-__oldx,best8.)));
MPRINT(PLOTIT):   call symput('vcondir',compress(put(Dim2-__oldy,best8.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('ncontour',compress(put(__nconto,best12.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------exclude observations in excluded color list------;
MPRINT(PLOTIT):   if __color eq ' ' or index(__excols, trim(lowcase(__color))) = 0;
MPRINT(PLOTIT):   *------adjustments to preprocessed data------;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   __xvar = Dim1;
MPRINT(PLOTIT):   __yvar = Dim2;
MPRINT(PLOTIT):   *------are labels all blank?------;
MPRINT(PLOTIT):   if not __nblank then do;
MPRINT(PLOTIT):   if _idvar_ ne ' ' then do;
MPRINT(PLOTIT):   __nblank = 1;
MPRINT(PLOTIT):   call symput('allblank','0');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------are there obs with both label and symbol blank?------;
MPRINT(PLOTIT):   if not __bblank then do;
MPRINT(PLOTIT):   if _idvar_ = ' ' and _symbol_ = ' ' then do;
MPRINT(PLOTIT):   __bblank = 1;
MPRINT(PLOTIT):   call symput('botblank','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   *------create regression data set for curve fitting------;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------separate out obs that will not go through PROC PLOT------;
MPRINT(PLOTIT):   data preproc extraobs;
MPRINT(PLOTIT):   retain __listit 0;
MPRINT(PLOTIT):   length __stype $ 12;
MPRINT(PLOTIT):   *------make sure PROC PLOT scales axes based on min, max------;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   __stype = 'dummy';
MPRINT(PLOTIT):   output extraobs;
MPRINT(PLOTIT):   do Dim1 = -14.71936156996, 11.004306639029;
MPRINT(PLOTIT):   do Dim2 = -4.088680659597, 10.494788570124;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __stype = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set preproc;
MPRINT(PLOTIT):   if "gplot" = "plot" then output preproc;
MPRINT(PLOTIT):   else if _idvar_ = ' ' and __stype in ('vector') then output extraobs;
MPRINT(PLOTIT):   else if _idvar_ ne ' ' or not (0 or (0 and (_symbol_ = ' ' and _idvar_ = ' '))) then do;
MPRINT(PLOTIT):   if __listit = 0 then do;
MPRINT(PLOTIT):   call symput('looklist','1');
MPRINT(PLOTIT):   __listit = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else output extraobs;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------find regression function------;
MPRINT(PLOTIT):   *------see if there is anything more than corners in preproc------;
MPRINT(PLOTIT):   *------initpen=0 when nothing to plot, otherwise missing ------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   if _n_ = 0 then set preproc nobs=__nobs;
MPRINT(PLOTIT):   call symput('initpen', scan('0 .', (__nobs > 4) + 1, ' '));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------set up iteration parameters------;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=========================create printer plot=========================;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length pl $ 200 search $ 24;
MPRINT(PLOTIT):   iternum = 0 + 1;
MPRINT(PLOTIT):   place = 2;
MPRINT(PLOTIT):   ls = .;
MPRINT(PLOTIT):   search = symget('search');
MPRINT(PLOTIT):   ispl = index(search,'place');
MPRINT(PLOTIT):   isls = index(search,'ls');
MPRINT(PLOTIT):   isco = index(search,'compute');
MPRINT(PLOTIT):   *------adjust placement list, line size------;
MPRINT(PLOTIT):   if iternum > 1 then do;
MPRINT(PLOTIT):   if ispl then place = place + 1;
MPRINT(PLOTIT):   if isls then ls = ls + 15;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if isco then ls = round(36 + 29 * iternum - 20 * log(iternum),5);
MPRINT(PLOTIT):   isls = (isls or isco);
MPRINT(PLOTIT):   *------last iteration if we cannot increment------;
MPRINT(PLOTIT):   *------the parameters any more. ------;
MPRINT(PLOTIT):   if (isls and ispl and ls >= 200 and place >= 13) or (isls and not ispl and ls >= 200) or (ispl and not isls and place >= 13) or (not ispl and not isls and not isco) then maxiter = iternum;
MPRINT(PLOTIT):   else maxiter = 15;
MPRINT(PLOTIT):   if ls > 200 then ls = 200;
MPRINT(PLOTIT):   if ls < 64 then ls = 64;
MPRINT(PLOTIT):   actualps = input(symget('ps'),?? 32.);
MPRINT(PLOTIT):   if n(actualps) = 0 then do;
MPRINT(PLOTIT):   vtoh = input(symget('vtoh'),?? 32.);
MPRINT(PLOTIT):   if nmiss(vtoh) then do;
MPRINT(PLOTIT):   hsize = input(symget('hsize'),?? 32.);
MPRINT(PLOTIT):   vsize = input(symget('vsize'),?? 32.);
MPRINT(PLOTIT):   if nmiss(hsize) then hsize = 8.33;
MPRINT(PLOTIT):   if nmiss(vsize) then vsize = 6.24;
MPRINT(PLOTIT):   actualps = round(ls * (vsize / (hsize * 2)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else actualps = round(10 + ls / vtoh,5);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if actualps > 200 then actualps = 200;
MPRINT(PLOTIT):   *------construct placement list------;
MPRINT(PLOTIT):   if n(place) then do;
MPRINT(PLOTIT):   if place > 13 then place = 13;
MPRINT(PLOTIT):   if place = 0 then pl = '(s=center)';
MPRINT(PLOTIT):   else pl = '(h=2 -2 : s=right left)';
MPRINT(PLOTIT):   if place = 1 then pl = trim(pl) || ' (v=1 * h=0 -1 to -2 by alt)';
MPRINT(PLOTIT):   else if place = 2 then pl = trim(pl) || ' (v=1 -1 * h=0 -1 to -5 by alt)';
MPRINT(PLOTIT):   else if place > 2 then pl = trim(pl) || ' (v=1 to 2 by alt * h=0 -1 to -10 by alt)';
MPRINT(PLOTIT):   if place > 3 then do;
MPRINT(PLOTIT):   pl = trim(pl) || ' (s=center right left * v=0 1 to ' || compress(put(place - 2,5.)) || ' by alt * h=0 -1 to ' || compress(put(-3 * (place - 2),5.)) || ' by alt * l= 1 to ' || compress(put(2 + (place - 3.5) / 3,5.)) || ')';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   pl = 'placement=(' || trim(pl) || ')';
MPRINT(PLOTIT):   if place > 4 then do;
MPRINT(PLOTIT):   pl = trim(pl) || ' penalty(7)=' || compress(put(1.5 * place,5.));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('maxiter' ,compress(put(maxiter,5.)));
MPRINT(PLOTIT):   call symput('iternum' ,compress(put(iternum,5.)));
MPRINT(PLOTIT):   call symput('place' ,compress(put(place,5.)));
MPRINT(PLOTIT):   call symput('ls' ,compress(put(ls,5.)));
MPRINT(PLOTIT):   call symput('actualps',compress(put(actualps,5.)));
MPRINT(PLOTIT):   if pl ne ' ' then call symput('pl',trim(pl));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------initialize data sets because they might not be created------;
MPRINT(PLOTIT):   data tempdat3;
MPRINT(PLOTIT):   value = .;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat4;
MPRINT(PLOTIT):   retain label symbol startposition ' ' vaxis haxis penalty lines vshift hshift length n vposition hposition 0;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options nonumber ls=65 ps=45;
The SAS System
 
MPRINT(PLOTIT):   ods exclude all;
MPRINT(PLOTIT):   proc plot nolegend formchar='|----|+|---'
data=preproc vtoh=2;
MPRINT(PLOTIT):   ods output LocateFacts(nowarn)=tempdat3
Locate(nowarn)=tempdat4 Plot=tempdat5;
MPRINT(PLOTIT):   plot Dim2 * Dim1 $ _idvar_ = _symbol_ /
haxis=by 10 vaxis=by 10 box placement=((h=2 -2 : s=right left)
(v=1 -1 * h=0 -1 to -5 by alt)) list=-1;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   label Dim2 = '#' Dim1 = '#';
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   quit;
MPRINT(PLOTIT):   ods exclude none;
MPRINT(PLOTIT):   ods output close;
MPRINT(PLOTIT):   options NONUMBER ls=256 ps=10000;
MPRINT(PLOTIT):   *------look at the total penalty------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   done = '0';
MPRINT(PLOTIT):   set tempdat3(obs=1 rename=(value=penalty));
MPRINT(PLOTIT):   if n(penalty) & penalty <= 0 then done = '1';
MPRINT(PLOTIT):   iternum = 1;
MPRINT(PLOTIT):   *------print iteration history line------;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   place = 2;
MPRINT(PLOTIT):   ls = 65;
MPRINT(PLOTIT):   actualps = 45;
MPRINT(PLOTIT):   m = floor((256 - 55) / 2);
MPRINT(PLOTIT):   if iternum = 1 then do;
MPRINT(PLOTIT):   put / +m +5 'Iterative Scatter Plot of Labeled Points Macro' /;
MPRINT(PLOTIT):   put +m 'Iteration' +4 'Place' +4 'Line Size' +4 'Page Size' +4 'Penalty';
MPRINT(PLOTIT):   put +m '-------------------------------------------------------';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   m = m - 4;
MPRINT(PLOTIT):   put +m iternum 9. place 11. ls 11. actualps 13. penalty 13.;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if iternum >= 15 then done = '1';
MPRINT(PLOTIT):   call symput('done',compress(done));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
 
                                                                                                         Iterative Scatter Plot of Labeled Points Macro
 
                                                                                                    Iteration    Place    Line Size    Page Size    Penalty
                                                                                                    -------------------------------------------------------
                                                                                                        1          2         65           45            0
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *======================post-process plot, step 1======================;
MPRINT(PLOTIT):   *------put titles, footnotes in plot------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat6;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sql;
MPRINT(PLOTIT):   create view tempdat6 as select * from dictionary.titles;
MPRINT(PLOTIT):   quit;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   set tempdat6 end=eof;
MPRINT(PLOTIT):   if type = 'T' then ntitles + 1;
MPRINT(PLOTIT):   if eof then call symput('ntitles', trim(put(ntitles, 2. -L)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat5(keep=batch);
MPRINT(PLOTIT):   length batch $ 256;
MPRINT(PLOTIT):   if 0 then set tempdat5;
MPRINT(PLOTIT):   set tempdat6(where=(type='T') rename=(text=batch)) tempdat5 tempdat6(where=(type='F') rename=(text=batch));
MPRINT(PLOTIT):   if type = 'F' or type = 'T' then do;
MPRINT(PLOTIT):   i = round((65 - length(batch)) / 2);
MPRINT(PLOTIT):   if i > 1 then do;
MPRINT(PLOTIT):   substr(batch, i) = batch;
MPRINT(PLOTIT):   substr(batch, 1, i - 1) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not (batch = ' ' and lag(batch) = ' ') then output;
MPRINT(PLOTIT):   if type = 'T' and number = 1 then do;
MPRINT(PLOTIT):   batch = ' ';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------start storing locations of lines------;
MPRINT(PLOTIT):   data anno(keep=tx ty comment);
MPRINT(PLOTIT):   length c $ 1 line title $ 256 comment $ 80;
MPRINT(PLOTIT):   retain coln top bottom afterbot nlines xlabline 0 topn botn topextra botextra past 0 vtick1 vtick2 htick1 htick2 . counttop 1 right left col1 labcolum 65 title ' ';
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   *------skip leading blank lines------;
MPRINT(PLOTIT):   if _n_ = 1 then do while(line = ' ');
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------skip note lines and subsequent blanks lines------;
MPRINT(PLOTIT):   if xlabline and _n_ > xlabline and not past then do;
MPRINT(PLOTIT):   if line =: 'NOTE:' then line = ' ';
MPRINT(PLOTIT):   if _n_ > xlabline + 1 then do;
MPRINT(PLOTIT):   do while((line =: 'NOTE:' or line = ' ') and not eof);
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------initialize------;
MPRINT(PLOTIT):   length = length(line);
MPRINT(PLOTIT):   if line = ' ' then length = 0;
MPRINT(PLOTIT):   comment = 'frame, tick';
MPRINT(PLOTIT):   *------store first title line------;
MPRINT(PLOTIT):   if title = ' ' then title = line;
MPRINT(PLOTIT):   *------find frame location------;
MPRINT(PLOTIT):   if left(line) =: '-' and index(line,'-+-') and substr(line,length,1) = '-' then do;
MPRINT(PLOTIT):   bottom = _n_;
MPRINT(PLOTIT):   if top = 0 then do;
MPRINT(PLOTIT):   top = _n_;
MPRINT(PLOTIT):   left = index(line,'-');
MPRINT(PLOTIT):   right = length;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------flag lines after the bottom line of the plot------;
MPRINT(PLOTIT):   c = substr(line,left,1);
MPRINT(PLOTIT):   if _n_ > top and afterbot = 0 and c = '-' and substr(line,right,1) = '-' then afterbot = 1;
MPRINT(PLOTIT):   else if afterbot then afterbot = afterbot + 1;
MPRINT(PLOTIT):   *------can we drop extra top of the plot lines?------;
MPRINT(PLOTIT):   if top and _n_ > top and not afterbot then do;
MPRINT(PLOTIT):   botn = botn + 1;
MPRINT(PLOTIT):   if c = '+' then do;
MPRINT(PLOTIT):   counttop = 0;
MPRINT(PLOTIT):   botextra = 0;
MPRINT(PLOTIT):   botn = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if counttop then topn = topn + 1;
MPRINT(PLOTIT):   if compress(line,'| ') = ' ' then do;
MPRINT(PLOTIT):   if abs(_n_ - top - 1 - topextra) < 1e-8 then topextra = topextra + 1;
MPRINT(PLOTIT):   botextra = botextra + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output horizontal axis tick mark coordinates------;
MPRINT(PLOTIT):   if afterbot = 1 then do;
MPRINT(PLOTIT):   ty = .;
MPRINT(PLOTIT):   do i = left to right;
MPRINT(PLOTIT):   if substr(line,i,1) = '+' then do;
MPRINT(PLOTIT):   tx = i;
MPRINT(PLOTIT):   if nmiss(htick1) then htick1 = tx;
MPRINT(PLOTIT):   else if nmiss(htick2) then htick2 = tx;
MPRINT(PLOTIT):   output anno;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------find last line in plot region------;
MPRINT(PLOTIT):   if afterbot > 2 and not past then do;
MPRINT(PLOTIT):   past = (index(line,"*** Wrapped Listing of Point Locations ***") or index(line,title));
MPRINT(PLOTIT):   if length and not past then do;
MPRINT(PLOTIT):   nlines = _n_;
MPRINT(PLOTIT):   *------find x-axis label line------;
MPRINT(PLOTIT):   if compress(line) = '#' then do;
MPRINT(PLOTIT):   xlabline = _n_;
MPRINT(PLOTIT):   *------check for vertically printing ticks------;
MPRINT(PLOTIT):   if not (afterbot = 3 or afterbot = 4) then do;
MPRINT(PLOTIT):   put 'WARNING: Ticks may be printing vertically.  ' 'The plot may be wrong.';
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   call symput('intrls' ,'1');
MPRINT(PLOTIT):   call symput('intrtick','0');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------first, last nonblank column, label column------;
MPRINT(PLOTIT):   if nlines = 0 and length then do;
MPRINT(PLOTIT):   coln = max(coln,length);
MPRINT(PLOTIT):   i = length + 1 - length(left(line));
MPRINT(PLOTIT):   col1 = min(col1,i);
MPRINT(PLOTIT):   if top then labcolum = min(labcolum,i);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output vertical axis tick mark coordinates------;
MPRINT(PLOTIT):   if top and substr(line,left,1) = '+' then do;
MPRINT(PLOTIT):   tx = .;
MPRINT(PLOTIT):   ty = _n_;
MPRINT(PLOTIT):   if nmiss(vtick1) then vtick1 = ty;
MPRINT(PLOTIT):   else if nmiss(vtick2) then vtick2 = ty;
MPRINT(PLOTIT):   output anno;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------on last observation, output results to macro variables------;
MPRINT(PLOTIT):   if past or eof then do;
MPRINT(PLOTIT):   *------check VTOH=------;
MPRINT(PLOTIT):   vtoh = input(symget('vtoh'),?? 32.);
MPRINT(PLOTIT):   if nmiss(vtoh) then vtoh = 2;
MPRINT(PLOTIT):   else if n(htick1,htick2,vtick1,vtick2) = 4 then do;
MPRINT(PLOTIT):   vtoh = vtick2 - vtick1;
MPRINT(PLOTIT):   if vtoh > 1e-8 then vtoh = (htick2 - htick1) / vtoh;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   * put vtoh= vtick2= vtick1= htick2= htick1=;
MPRINT(PLOTIT):   call symput('vtoh',compress(put(vtoh,best15.)));
MPRINT(PLOTIT):   *------size of plot parameters------;
MPRINT(PLOTIT):   ls = coln - col1 + 1;
MPRINT(PLOTIT):   left = left - col1 + 1;
MPRINT(PLOTIT):   right = right - col1 + 1;
MPRINT(PLOTIT):   labcolum = labcolum - col1 + 1;
MPRINT(PLOTIT):   hpos = ls + 0.5 * (1.0 + abs(1.5));
MPRINT(PLOTIT):   vpos = nlines + 1;
MPRINT(PLOTIT):   uhpos = input(symget('hpos'),?? 32.);
MPRINT(PLOTIT):   if n(uhpos) then do;
MPRINT(PLOTIT):   if uhpos < hpos then do;
MPRINT(PLOTIT):   put "ERROR: HPOS= is too small.  " 'The default ' 'minimum for ' 'this plot is ' hpos +(-1) '.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else hpos = uhpos;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   uvpos = input(symget('vpos'),?? 32.);
MPRINT(PLOTIT):   if n(uvpos) then do;
MPRINT(PLOTIT):   if uvpos < vpos then do;
MPRINT(PLOTIT):   put "ERROR: VPOS= is too small.  " 'The electronics' 'minimum for ' 'this plot is ' vpos +(-1) '.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else vpos = uvpos;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   hpos = ceil(hpos);
MPRINT(PLOTIT):   vpos = ceil(vpos);
MPRINT(PLOTIT):   *------scale plot to use MAKEFIT= proportion of area------;
MPRINT(PLOTIT):   makefit1 = input(symget('makefit'),?? 32.);
MPRINT(PLOTIT):   makefit = makefit1;
MPRINT(PLOTIT):   *------makefit value can be changed inside this loop------;
MPRINT(PLOTIT):   do until(itfits);
MPRINT(PLOTIT):   itfits = 1;
MPRINT(PLOTIT):   *------determine hsize and vsize------;
MPRINT(PLOTIT):   hsize = input(symget('hsize'),?? 32.);
MPRINT(PLOTIT):   vsize = input(symget('vsize'),?? 32.);
MPRINT(PLOTIT):   if n(vsize) and nmiss(hsize) then hsize = hpos * vsize / (vpos * vtoh);
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if n(hsize) = 0 then hsize = 8.33;
MPRINT(PLOTIT):   if n(vsize) = 0 then vsize = (vpos / hpos) * hsize * vtoh;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *-------scale sizes so plot fits in specified area------;
MPRINT(PLOTIT):   if n(makefit) then do;
MPRINT(PLOTIT):   scale = max(hsize / (abs(makefit) * (8.33)), vsize / (abs(makefit) * (6.24)));
MPRINT(PLOTIT):   if scale > 1.0 then do;
MPRINT(PLOTIT):   hsize = hsize / scale;
MPRINT(PLOTIT):   vsize = vsize / scale;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------add extra positions to center plot, extend axes------;
MPRINT(PLOTIT):   extendl = input(symget('extendl'),?? 32.);
MPRINT(PLOTIT):   extendr = input(symget('extendr'),?? 32.);
MPRINT(PLOTIT):   extendt = input(symget('extendt'),?? 32.);
MPRINT(PLOTIT):   extendb = input(symget('extendb'),?? 32.);
MPRINT(PLOTIT):   setlr = (nmiss(extendl,extendr) = 2 and not 0);
MPRINT(PLOTIT):   settb = (nmiss(extendt,extendb) = 2 and not 0);
MPRINT(PLOTIT):   *------centering, compute horizontal, vertical offsets------;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   hposoff = max(0.5 * ((8.33) - hsize) / (hsize / hpos), 0);
MPRINT(PLOTIT):   vposoff = max(0.5 * ((6.24) - vsize) / (vsize / vpos), 0);
MPRINT(PLOTIT):   hsize = 8.33;
MPRINT(PLOTIT):   vsize = 6.24;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   vposoff = 0;
MPRINT(PLOTIT):   hposoff = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------can we extend the left and right axes a little?------;
MPRINT(PLOTIT):   if setlr then do;
MPRINT(PLOTIT):   extendl = max(min(hposoff - 2.5, 2), 0);
MPRINT(PLOTIT):   extendr = extendl;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------even the top and bottom extra positions------;
MPRINT(PLOTIT):   if settb and topn > botn then do;
MPRINT(PLOTIT):   i = topn - botn;
MPRINT(PLOTIT):   if i <= topextra then extendt = -i;
MPRINT(PLOTIT):   else extendb = i;
MPRINT(PLOTIT):   i = -0.5 * sum(extendb,extendt);
MPRINT(PLOTIT):   if i > 0 then do;
MPRINT(PLOTIT):   extendb = sum(extendb,i);
MPRINT(PLOTIT):   extendt = sum(extendt,i);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set the extend variables if not set yet------;
MPRINT(PLOTIT):   if nmiss(extendt) then extendt = 0;
MPRINT(PLOTIT):   if nmiss(extendl) then extendl = 0;
MPRINT(PLOTIT):   if nmiss(extendr) then extendr = 0;
MPRINT(PLOTIT):   if nmiss(extendb) then extendb = 0;
MPRINT(PLOTIT):   *------make the plot square------;
MPRINT(PLOTIT):   if 0 and not 0 then do;
MPRINT(PLOTIT):   *------first try to adjust the left and right------;
MPRINT(PLOTIT):   if setlr then do;
MPRINT(PLOTIT):   setlr = ((right - left + extendr + extendl) - (vtoh * (bottom - top + extendt + extendb))) / 2;
MPRINT(PLOTIT):   extendl = extendl - setlr;
MPRINT(PLOTIT):   extendl = max(min(extendl,hposoff - 2.5),0);
MPRINT(PLOTIT):   extendr = extendl;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------next try to adjust the top and bottom------;
MPRINT(PLOTIT):   if settb then do;
MPRINT(PLOTIT):   settb = ((right - left + extendr + extendl) - (vtoh * (bottom - top + extendt + extendb))) / (-2 * vtoh);
MPRINT(PLOTIT):   extendt = extendt - settb;
MPRINT(PLOTIT):   extendb = extendb - settb;
MPRINT(PLOTIT):   if -extendt > topextra then extendt = -topextra;
MPRINT(PLOTIT):   if -extendb > botextra then extendb = -botextra;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check to see if we succeeded, should be zero------;
MPRINT(PLOTIT):   setlr = (right - left + extendr + extendl) - vtoh * (bottom - top + extendt + extendb);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------see if the plot fits, otherwise try again------;
MPRINT(PLOTIT):   if n(makefit) and makefit < 0 and not 0 and ((0 and abs(setlr) > (1e-8 * hpos)) or (1 and (((extendl + extendr) > (2 * hposoff - 2.5)) or ((extendt + extendb) > (2 * vposoff - 0.25))))) and makefit <= 0.75 * makefit1 then do;
MPRINT(PLOTIT):   makefit = makefit * 0.99;
MPRINT(PLOTIT):   itfits = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------warn if we changed MAKEFIT= to make the plot square------;
MPRINT(PLOTIT):   if n(makefit) and abs(makefit - makefit1) > 1e-8 then put 'WARNING: MAKEFIT=' makefit 'was used ' 'to make ' 'the plot ' 'fit.';
MPRINT(PLOTIT):   * put extendt= extendb= extendl= extendr= vtoh= hposoff= vposoff=;
MPRINT(PLOTIT):   *------override electronics positions------;
MPRINT(PLOTIT):   if n(uhpos) then hposoff = 0;
MPRINT(PLOTIT):   else hpos = ceil(hpos + 2.0 * hposoff);
MPRINT(PLOTIT):   if n(uvpos) then vposoff = 0;
MPRINT(PLOTIT):   else vpos = ceil(vpos + 2.0 * vposoff);
MPRINT(PLOTIT):   *------output plot size parameters------;
MPRINT(PLOTIT):   call symput('col1', compress(put(col1,5.0)));
MPRINT(PLOTIT):   call symput('actualls', compress(put(ls,5.0)));
MPRINT(PLOTIT):   call symput('nlines', compress(put(nlines,5.0)));
MPRINT(PLOTIT):   call symput('top', compress(put(top,5.0)));
MPRINT(PLOTIT):   call symput('bottom', compress(put(bottom,5.0)));
MPRINT(PLOTIT):   call symput('left', compress(put(left,5.0)));
MPRINT(PLOTIT):   call symput('right', compress(put(right,5.0)));
MPRINT(PLOTIT):   call symput('labcolum', compress(put(labcolum,5.0)));
MPRINT(PLOTIT):   call symput('xlabline', compress(put(xlabline,5.0)));
MPRINT(PLOTIT):   call symput('hposoff', compress(put(hposoff,7.1)));
MPRINT(PLOTIT):   call symput('vposoff', compress(put(vposoff,7.1)));
MPRINT(PLOTIT):   call symput('hpos', compress(put(hpos,9.0)));
MPRINT(PLOTIT):   call symput('vpos', compress(put(vpos,9.0)));
MPRINT(PLOTIT):   call symput('hsize', compress(put(hsize,9.2)));
MPRINT(PLOTIT):   call symput('vsize', compress(put(vsize,9.2)));
MPRINT(PLOTIT):   call symput('extendl', compress(put(extendl,9.2)));
MPRINT(PLOTIT):   call symput('extendr', compress(put(extendr,9.2)));
MPRINT(PLOTIT):   call symput('extendt', compress(put(extendt,9.2)));
MPRINT(PLOTIT):   call symput('extendb', compress(put(extendb,9.2)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getline: set tempdat5(keep=batch rename=(batch=line)) end=eof;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=======================post-process plot, step 2======================;
MPRINT(PLOTIT):   data tempdat1(keep=function x y text angle position comment color size style n __xvar __yvar __otype) tempdat2(keep=tx ty comment _radius_ color size style n __xvar __yvar);
MPRINT(PLOTIT):   length text line label $ 256 function color style $ 8 position symbol $ 1 comment $ 80;
MPRINT(PLOTIT):   retain style ' ';
MPRINT(PLOTIT):   function = 'LABEL';
MPRINT(PLOTIT):   color = ' ';
MPRINT(PLOTIT):   size = .;
MPRINT(PLOTIT):   *------read the plot------;
MPRINT(PLOTIT):   if _n_ <= 32 then do;
MPRINT(PLOTIT):   comment = 'text';
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   *------skip leading blank lines------;
MPRINT(PLOTIT):   if _n_ = 1 then do while(line = ' ');
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------skip note lines and subsequent blanks lines------;
MPRINT(PLOTIT):   if _n_ > 32 then do;
MPRINT(PLOTIT):   if line =: 'NOTE:' then line = ' ';
MPRINT(PLOTIT):   if _n_ > 32 + 1 then do;
MPRINT(PLOTIT):   do while((line =: 'NOTE:' or line = ' ') and not eof);
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   line = substr(line, 1, 65);
MPRINT(PLOTIT):   *------is this an axis line?------;
MPRINT(PLOTIT):   istop = (_n_ = 3);
MPRINT(PLOTIT):   isbot = (_n_ = 29);
MPRINT(PLOTIT):   *------set the y-axis label------;
MPRINT(PLOTIT):   if 3 <= _n_ <= 29 and substr(line,1,1) = '#' then substr(line,1,1) = ' ';
MPRINT(PLOTIT):   if _n_ = 32 then do;
MPRINT(PLOTIT):   y = ((2 * 32) - 3 - 29) / 2;
MPRINT(PLOTIT):   x = 1;
MPRINT(PLOTIT):   text = symget('labely');
MPRINT(PLOTIT):   if 12.9 > 1 then x = x - 0.5;
MPRINT(PLOTIT):   if length(text) > 1 then angle = 90;
MPRINT(PLOTIT):   comment = 'text, y label';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   angle = 0;
MPRINT(PLOTIT):   *------remove stuff in the plot------;
MPRINT(PLOTIT):   if 3 <= _n_ <= 29 then substr(line,7,65 - 7 + 1) = ' ';
MPRINT(PLOTIT):   *------output ticks, titles, and so on------;
MPRINT(PLOTIT):   y = 32 - _n_;
MPRINT(PLOTIT):   do iwhile = 1 to 65 while(line ne ' ');
MPRINT(PLOTIT):   i = length(line) - length(left(line)) + 1;
MPRINT(PLOTIT):   text = substr(line,i,1);
MPRINT(PLOTIT):   *------isolate and process one label------;
MPRINT(PLOTIT):   if text ne ' ' then do;
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   x = i;
MPRINT(PLOTIT):   *------special handling of title lines, xaxis label------;
MPRINT(PLOTIT):   if _n_ < 3 or _n_ >= 32 then do;
MPRINT(PLOTIT):   text = left(line);
MPRINT(PLOTIT):   i = 65 + 1;
MPRINT(PLOTIT):   line = ' ';
MPRINT(PLOTIT):   x = (7 + 65) / 2.0;
MPRINT(PLOTIT):   *------special handling of title lines------;
MPRINT(PLOTIT):   if _n_ < 3 then do;
MPRINT(PLOTIT):   comment = 'text, title';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------footnotes------;
MPRINT(PLOTIT):   else if _n_ > 32 then do;
MPRINT(PLOTIT):   comment = 'text, footnote';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle x-axis label------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   text = symget('labelx');
MPRINT(PLOTIT):   comment = 'text, x label';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle label outside the plot, not title------;
MPRINT(PLOTIT):   else if i < 7 or _n_ > 29 then do;
MPRINT(PLOTIT):   do j = i + 1 to 65 until(done);
MPRINT(PLOTIT):   done = substr(line,j,1) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   text = substr(line,i,j - i + 1);
MPRINT(PLOTIT):   substr(line,i,j - i + 1) = ' ';
MPRINT(PLOTIT):   *------handle ticks------;
MPRINT(PLOTIT):   position = '<';
MPRINT(PLOTIT):   x = i + length(text) - 1;
MPRINT(PLOTIT):   if j < 7 then comment = 'text, y tick';
MPRINT(PLOTIT):   else if _n_ < 32 then do;
MPRINT(PLOTIT):   comment = 'text, x tick';
MPRINT(PLOTIT):   *------tweak the placement a tad with new options------;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else comment = 'text, other';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   * put i= text= position=;
MPRINT(PLOTIT):   *------output label------;
MPRINT(PLOTIT):   if text ne ' ' then output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if iwhile >= 65 and symget('abort') ne '1' then do;
MPRINT(PLOTIT):   put 'ERROR: The frame location algorithm is confused.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------read the labels------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   *------bring in the extra observations------;
MPRINT(PLOTIT):   eofextra = 0;
MPRINT(PLOTIT):   p = '+';
MPRINT(PLOTIT):   tx = .;
MPRINT(PLOTIT):   ty = .;
MPRINT(PLOTIT):   vshift = .;
MPRINT(PLOTIT):   hshift = .;
MPRINT(PLOTIT):   text = ' ';
MPRINT(PLOTIT):   n = 0;
MPRINT(PLOTIT):   lines = 0;
MPRINT(PLOTIT):   do while(not eofextra);
MPRINT(PLOTIT):   set extraobs(keep=__: _radius_) end=eofextra;
MPRINT(PLOTIT):   comment = 'extra,';
MPRINT(PLOTIT):   if n(__xvar,__yvar) = 2 then link process;
MPRINT(PLOTIT):   n = n + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------determine point count------;
MPRINT(PLOTIT):   set tempdat3(firstobs=2 rename=(value=npoints));
MPRINT(PLOTIT):   if nmiss(npoints) then do;
MPRINT(PLOTIT):   npoints = 0;
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   sumh = 0;
MPRINT(PLOTIT):   sumv = 0;
MPRINT(PLOTIT):   sumx = 0;
MPRINT(PLOTIT):   sumy = 0;
MPRINT(PLOTIT):   sumx2 = 0;
MPRINT(PLOTIT):   sumy2 = 0;
MPRINT(PLOTIT):   sumxh = 0;
MPRINT(PLOTIT):   sumyv = 0;
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   midh = 65 / 2;
MPRINT(PLOTIT):   midv = 45 / 2;
MPRINT(PLOTIT):   midx = (11.004306639029 + -14.71936156996) / 2;
MPRINT(PLOTIT):   midy = (10.494788570124 + -4.088680659597) / 2;
MPRINT(PLOTIT):   *------read the labels------;
MPRINT(PLOTIT):   do pointn = 1 to npoints;
MPRINT(PLOTIT):   link getlabel;
MPRINT(PLOTIT):   ty = vpositio;
MPRINT(PLOTIT):   tx = hpositio;
MPRINT(PLOTIT):   comment = 'list,';
MPRINT(PLOTIT):   if _error_ = 1 then put _all_;
MPRINT(PLOTIT):   if startpos = 'Center' then p = '+';
MPRINT(PLOTIT):   else if startpos = 'Left' then p = '<';
MPRINT(PLOTIT):   else p = '>';
MPRINT(PLOTIT):   text = symbol;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   set preproc(keep=__: _radius_) point=i;
MPRINT(PLOTIT):   link process;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------least-squares slope and intercept------;
MPRINT(PLOTIT):   b = .;
MPRINT(PLOTIT):   a = .;
MPRINT(PLOTIT):   if nobs > 0 then do;
MPRINT(PLOTIT):   d = sumx - nobs * midx;
MPRINT(PLOTIT):   b = nobs * sumx2 - d * d;
MPRINT(PLOTIT):   if abs(b) < 1e-8 then b = 0;
MPRINT(PLOTIT):   else b = (nobs * sumxh - d * (sumh - nobs * midh)) / b;
MPRINT(PLOTIT):   a = sumh / nobs - b * sumx / nobs;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('hslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('hinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   if nobs > 0 then do;
MPRINT(PLOTIT):   d = (sumy - nobs * midy);
MPRINT(PLOTIT):   b = (nobs * sumy2 - d * d);
MPRINT(PLOTIT):   if abs(b) < 1e-8 then b = 0;
MPRINT(PLOTIT):   else b = (nobs * sumyv - d * (sumv - nobs * midv)) / b;
MPRINT(PLOTIT):   a = sumv / nobs - b * sumy / nobs;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('vslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('vinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   process: *------handle a point in the plot------;
MPRINT(PLOTIT):   type = __stype;
MPRINT(PLOTIT):   if n(tx) then do;
MPRINT(PLOTIT):   tx = tx + 7 + 1;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(ty) then do;
MPRINT(PLOTIT):   ty = ty + 1 + 32 - 29;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   colorset = 0;
MPRINT(PLOTIT):   *------random colors------;
MPRINT(PLOTIT):   *------store full label------;
MPRINT(PLOTIT):   if lines then do;
MPRINT(PLOTIT):   line = label;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   line = compress('('||type||',') || ' ' || compress(put(n,5.)||')');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set colors, sizes, and so on for symbols------;
MPRINT(PLOTIT):   if not colorset then color = __scolor;
MPRINT(PLOTIT):   size = __ssize;
MPRINT(PLOTIT):   style = __sfont;
MPRINT(PLOTIT):   if text = 'NONE' then text = ' ';
MPRINT(PLOTIT):   if __symbol ne '00'x then text = __symbol;
MPRINT(PLOTIT):   if type = 'contour' then function = 'BAR';
MPRINT(PLOTIT):   else if type = 'square' then function = 'SYMBOL';
MPRINT(PLOTIT):   else function = 'LABEL';
MPRINT(PLOTIT):   *------output list info to lines data set------;
MPRINT(PLOTIT):   if type =: 'vector' or type =: 'circle' then do;
MPRINT(PLOTIT):   comment = trim(comment) || ' ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   output tempdat2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output list info to text data set------;
MPRINT(PLOTIT):   if (text ne ' ' and type ne 'dummy') or type = 'contour' or type = 'function' then do;
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   comment = trim(scan(comment,1,' ')) || ' text, ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------intermediate results for slope, intercept------;
MPRINT(PLOTIT):   if n(tx,ty,__xvar,__yvar) = 4 then do;
MPRINT(PLOTIT):   sumh = sumh + tx;
MPRINT(PLOTIT):   sumv = sumv + ty;
MPRINT(PLOTIT):   sumx = sumx + __xvar;
MPRINT(PLOTIT):   sumy = sumy + __yvar;
MPRINT(PLOTIT):   d = __xvar - midx;
MPRINT(PLOTIT):   sumx2 = sumx2 + d * d;
MPRINT(PLOTIT):   sumxh = sumxh + (tx - midh) * d;
MPRINT(PLOTIT):   d = __yvar - midy;
MPRINT(PLOTIT):   sumy2 = sumy2 + d * d;
MPRINT(PLOTIT):   sumyv = sumyv + (ty - midv) * d;
MPRINT(PLOTIT):   nobs = nobs + 1;
MPRINT(PLOTIT):   * put sumh= tx= sumv= ty= sumx= __xvar= sumy= __yvar= midx= sumx2= sumxh= midy= sumy2= sumyv= nobs=;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle the label fragments------;
MPRINT(PLOTIT):   if lines then do;
MPRINT(PLOTIT):   if not colorset then color = __lcolor;
MPRINT(PLOTIT):   size = __lsize;
MPRINT(PLOTIT):   style = __lfont;
MPRINT(PLOTIT):   function = 'LABEL';
MPRINT(PLOTIT):   position = p;
MPRINT(PLOTIT):   comment = trim(scan(comment,1,' ')) || ' text, label, ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   shift = floor(1e-8 + (lines - 1) / 2);
MPRINT(PLOTIT):   do i = 1 to lines;
MPRINT(PLOTIT):   if lines > 1 then link getlabel;
MPRINT(PLOTIT):   text = label;
MPRINT(PLOTIT):   if text ne ' ' and type ne 'dummy' then do;
MPRINT(PLOTIT):   x = tx + hshift;
MPRINT(PLOTIT):   y = 1 + ty + vshift + shift - i;
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getline: set tempdat5(keep=batch rename=(batch=line)) end=eof;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getlabel: set tempdat4(keep=lines symbol n label vshift hshift vposition hposition startposition rename=(startposition=startpos vposition=vpositio hposition=hpositio));
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete extraobs;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------tick mark based slope and intercept------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   merge anno(where=(index(substr(comment,1,12),'tick')) keep=ty tx comment) tempdat1(where=(index(comment,'tick')) keep=text comment);
MPRINT(PLOTIT):   if n(ty) then ty = 32 - ty;
MPRINT(PLOTIT):   data = input(text,?? 32.);
MPRINT(PLOTIT):   if (0 and n(tx)) or (0 and n(ty)) then do;
MPRINT(PLOTIT):   if data > 0 then data = log10(data);
MPRINT(PLOTIT):   else data = .;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   oldty = lag(ty);
MPRINT(PLOTIT):   oldtx = lag(tx);
MPRINT(PLOTIT):   olddata = lag(data);
MPRINT(PLOTIT):   if n(data,olddata) = 2 then do;
MPRINT(PLOTIT):   den = data - olddata;
MPRINT(PLOTIT):   if abs(den) > 1e-8 then do;
MPRINT(PLOTIT):   if n(oldty,ty) = 2 then do;
MPRINT(PLOTIT):   b = (ty - oldty) / den;
MPRINT(PLOTIT):   a = ty - b * data;
MPRINT(PLOTIT):   call symput('vslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('vinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(oldtx,tx) = 2 then do;
MPRINT(PLOTIT):   b = (tx - oldtx) / den;
MPRINT(PLOTIT):   a = tx - b * data - 1 + 1;
MPRINT(PLOTIT):   call symput('hslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('hinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------switch top and bottom to annotate coordinates------;
MPRINT(PLOTIT):   *------make goptions statement------;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=================create annotate data set with lines=================;
MPRINT(PLOTIT):   data anno(keep=function x y comment color size style n);
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length text $ 256 comment $ 100 function color style $ 8;
MPRINT(PLOTIT):   retain curven -1 tickaxes "LBFh" vtoh 2 vinter 12 hinter 36 hslope 1.4 vslope 0.7 hmax 11.004306639029 vmax 10.494788570124 vmin -4.088680659597 hmin -14.71936156996 singular 1e-8 left 7 right 65 top 29 bottom 3;
MPRINT(PLOTIT):   array lsizes[5] _temporary_ (1 1 1 1 1);
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   *------check slope, intercept------;
MPRINT(PLOTIT):   if n(hinter,vinter,hslope,vslope) ne 4 then do;
MPRINT(PLOTIT):   put 'ERROR: Plot algorithm failed.  ' 'Coordinates could ' 'not be ' 'computed.  ' 'Vertically printing ' 'ticks is a ' 'possible cause.  ' 'Another ' 'explanation ' 'is no locate list ' 'was available.  ' 'Look ' 'at the ' 'printer plot
' 'to check.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------how far should plot be extended?------;
MPRINT(PLOTIT):   extendl = input(symget('extendl'), ?? 32.);
MPRINT(PLOTIT):   extendr = input(symget('extendr'), ?? 32.);
MPRINT(PLOTIT):   extendt = input(symget('extendt'), ?? 32.);
MPRINT(PLOTIT):   extendb = input(symget('extendb'), ?? 32.);
MPRINT(PLOTIT):   *------rectangle sizes for contour plots------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   if nobs <= 0 and 0 > singular then nobs = sqrt(0);
MPRINT(PLOTIT):   nobs = nobs - 1;
MPRINT(PLOTIT):   if nobs > singular then vcontour = abs(vslope) * (vmax - vmin) / nobs;
MPRINT(PLOTIT):   else vcontour = .;
MPRINT(PLOTIT):   call symput('vcontour',compress(put(vcontour,best15.)));
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   if nobs <= 0 and 0 > singular then nobs = sqrt(0);
MPRINT(PLOTIT):   nobs = nobs - 1;
MPRINT(PLOTIT):   if nobs > singular then hcontour = abs(hslope) * (hmax - hmin) / nobs;
MPRINT(PLOTIT):   else hcontour = .;
MPRINT(PLOTIT):   call symput('hcontour',compress(put(hcontour,best15.)));
MPRINT(PLOTIT):   *------optionally close up all white space------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   if n(hcontour) then do;
MPRINT(PLOTIT):   extendl = extendl + left - (hinter + hslope * hmin - 0.5 * hcontour);
MPRINT(PLOTIT):   extendr = extendr + (hinter + hslope * hmax + 0.5 * hcontour) - right;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(vcontour) then do;
MPRINT(PLOTIT):   extendt = extendt + (vinter + vslope * vmax + 0.5 * vcontour) - top;
MPRINT(PLOTIT):   extendb = extendb + bottom - (vinter + vslope * vmin - 0.5 * vcontour);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------optionally close up white space with square contours------;
MPRINT(PLOTIT):   if 0 and 0 and not 0 then do;
MPRINT(PLOTIT):   contour = 1 * 0.5;
MPRINT(PLOTIT):   extendl = extendl + left - (hinter + hslope * hmin) + vtoh * contour;
MPRINT(PLOTIT):   extendr = extendr + (hinter + hslope * hmax) - right + vtoh * contour;
MPRINT(PLOTIT):   extendt = extendt + (vinter + vslope * vmax) - top + contour;
MPRINT(PLOTIT):   extendb = extendb + bottom - (vinter + vslope * vmin) + contour;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   call symput('extendl',compress(put(extendl,best15.)));
MPRINT(PLOTIT):   call symput('extendr',compress(put(extendr,best15.)));
MPRINT(PLOTIT):   call symput('extendt',compress(put(extendt,best15.)));
MPRINT(PLOTIT):   call symput('extendb',compress(put(extendb,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------final locations of the axes------;
MPRINT(PLOTIT):   left = left - extendl;
MPRINT(PLOTIT):   right = right + extendr;
MPRINT(PLOTIT):   top = top + extendt;
MPRINT(PLOTIT):   bottom = bottom - extendb;
MPRINT(PLOTIT):   *------frame background color------;
MPRINT(PLOTIT):   color = 'cxffffff';
MPRINT(PLOTIT):   size = 1;
MPRINT(PLOTIT):   style = 'msolid';
MPRINT(PLOTIT):   function = 'POLY';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   comment = 'frame, background, left top start';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'POLYCONT';
MPRINT(PLOTIT):   comment = 'frame, background, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, right bottom';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, right top';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, left top';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   style = ' ';
MPRINT(PLOTIT):   *------draw frame------;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[1];
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   comment = 'frame, box, left top start';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   comment = 'frame, box, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, box, right bottom';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   comment = 'frame, box, right top';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, box, left top';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------diagonal reference line------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   comment = 'frame, diag, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, diag, right top';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------vertical axis reference lines------;
MPRINT(PLOTIT):   *------horizontal axis reference lines------;
MPRINT(PLOTIT):   *------vertical axis minor tick marks------;
MPRINT(PLOTIT):   *------horizontal axis minor tick marks------;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set anno tempdat2(in=td2);
MPRINT(PLOTIT):   *------uncategorize symbol locations------;
MPRINT(PLOTIT):   i = (1 or 1) and td2 and not (comment =: 'frame');
MPRINT(PLOTIT):   if i or (nmiss(tx) and n(__xvar)) then tx = hinter + hslope * __xvar;
MPRINT(PLOTIT):   if i or (nmiss(ty) and n(__yvar)) then ty = vinter + vslope * __yvar;
MPRINT(PLOTIT):   *------figure out curve coordinates------;
MPRINT(PLOTIT):   if comment = 'frame, tick' then do;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[2];
MPRINT(PLOTIT):   halftick = 0.5 * abs(1.5);
MPRINT(PLOTIT):   ticklen = (1 + (1.5 > 0)) * halftick;
MPRINT(PLOTIT):   if index(tickaxes,'h') then ticklen = ticklen / 2;
MPRINT(PLOTIT):   *------adjust for blank cols------;
MPRINT(PLOTIT):   if n(tx) then tx = tx - 1 + 1;
MPRINT(PLOTIT):   *------draw y-axis tick marks------;
MPRINT(PLOTIT):   if nmiss(tx) then do;
MPRINT(PLOTIT):   y = 32 - ty;
MPRINT(PLOTIT):   if bottom <= y <= top then do;
MPRINT(PLOTIT):   if index(tickaxes,'L') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, left';
MPRINT(PLOTIT):   x = left - halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x + ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if index(tickaxes,'R') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, right';
MPRINT(PLOTIT):   x = right + halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x - ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw x-axis tick marks------;
MPRINT(PLOTIT):   else if nmiss(ty) then do;
MPRINT(PLOTIT):   halftick = halftick / vtoh;
MPRINT(PLOTIT):   ticklen = ticklen / vtoh;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   if left <= x <= right then do;
MPRINT(PLOTIT):   if index(tickaxes,'T') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, top';
MPRINT(PLOTIT):   y = top + halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   y = y - ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if index(tickaxes,'B') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, bottom';
MPRINT(PLOTIT):   y = bottom - halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   y = y + ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw vectors------;
MPRINT(PLOTIT):   else if index(substr(comment,1,13),'vector') then do;
MPRINT(PLOTIT):   size = lsizes[3];
MPRINT(PLOTIT):   x = hinter;
MPRINT(PLOTIT):   y = vinter;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   r = index(comment,'vector');
MPRINT(PLOTIT):   comment = substr(comment,1,r + 7) || 'head,' || substr(comment,r + 7);
MPRINT(PLOTIT):   *------compute slope of vector------;
MPRINT(PLOTIT):   vecslope = tx - hinter;
MPRINT(PLOTIT):   if abs(vecslope) > singular then vecslope = (ty - vinter) / (vecslope / vtoh);
MPRINT(PLOTIT):   else vecslope = .;
MPRINT(PLOTIT):   *------find point on vector vecheadr distance from end------;
MPRINT(PLOTIT):   r = -0.1;
MPRINT(PLOTIT):   fromx = tx;
MPRINT(PLOTIT):   fromy = ty;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   fromx = tox;
MPRINT(PLOTIT):   fromy = toy;
MPRINT(PLOTIT):   *------slope of line perpendicular to vector------;
MPRINT(PLOTIT):   if nmiss(vecslope) then vecslope = 0;
MPRINT(PLOTIT):   else if abs(vecslope) > singular then vecslope = -1.0 / vecslope;
MPRINT(PLOTIT):   else vecslope = .;
MPRINT(PLOTIT):   *------draw vector head------;
MPRINT(PLOTIT):   r = -0.025;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   x = tox;
MPRINT(PLOTIT):   y = toy;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   r = 0.025;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = tox;
MPRINT(PLOTIT):   y = toy;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw circles------;
MPRINT(PLOTIT):   else if index(substr(comment,1,13),'circle') then do;
MPRINT(PLOTIT):   size = lsizes[4];
MPRINT(PLOTIT):   comsplit = 15 + (comment =: 'extra');
MPRINT(PLOTIT):   holdcom = comment;
MPRINT(PLOTIT):   pi = 3.1415926536;
MPRINT(PLOTIT):   do rad = _radius_;
MPRINT(PLOTIT):   radius = max(rad, 0) * hslope;
MPRINT(PLOTIT):   comment = substr(holdcom,1,comsplit - 1) || compress(put(rad,best5.) || ',') || ' ' || compress('(' || put(__xvar,best5.) || ',' || put(__yvar,best5.) || '),') || ' ' || substr(holdcom,comsplit);
MPRINT(PLOTIT):   i = (8.33) / (93);
MPRINT(PLOTIT):   if "in" = 'cm' then i = i / 2.54;
MPRINT(PLOTIT):   inc = 2.0 * pi / ceil(20 + (2.0 * pi * radius * i / .1) ** 0.8);
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   seg0 = (inc * singular) ** 2;
MPRINT(PLOTIT):   do i = -pi + inc to pi by inc;
MPRINT(PLOTIT):   x1 = tx + cos(i - inc) * radius;
MPRINT(PLOTIT):   y1 = ty + sin(i - inc) * radius / vtoh;
MPRINT(PLOTIT):   x2 = tx + cos(i) * radius;
MPRINT(PLOTIT):   y2 = ty + sin(i) * radius / vtoh;
MPRINT(PLOTIT):   link clipline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   linept: *------find a point (tox,toy) r distance from ------;
MPRINT(PLOTIT):   *------(fromx,fromy) on a line with slope vecslope------;
MPRINT(PLOTIT):   *------negative r means toward origin ------;
MPRINT(PLOTIT):   r = r * (93) / (8.33);
MPRINT(PLOTIT):   if "in" = 'cm' then r = r * 2.54;
MPRINT(PLOTIT):   vecdir = -sign(r);
MPRINT(PLOTIT):   if n(vecslope) then do;
MPRINT(PLOTIT):   vecm2 = sqrt(r * r / (1.0 + vecslope * vecslope));
MPRINT(PLOTIT):   if fromx > hinter then vecm2 = -vecm2;
MPRINT(PLOTIT):   tox = vecdir * vecm2 + fromx;
MPRINT(PLOTIT):   toy = vecdir * vecslope * vecm2 / vtoh + fromy;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   tox = fromx;
MPRINT(PLOTIT):   if fromy > vinter then vecdir = -vecdir;
MPRINT(PLOTIT):   toy = vecdir * abs(r) / vtoh + fromy;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   clipline: *------clip a line that crosses an edge------;
MPRINT(PLOTIT):   *------find where line crosses edges------;
MPRINT(PLOTIT):   b = (x2 - x1);
MPRINT(PLOTIT):   bi = (y2 - y1);
MPRINT(PLOTIT):   xtop = .;
MPRINT(PLOTIT):   xbottom = .;
MPRINT(PLOTIT):   yleft = .;
MPRINT(PLOTIT):   yright = .;
MPRINT(PLOTIT):   if abs(b) > singular then do;
MPRINT(PLOTIT):   b = (y2 - y1) / b;
MPRINT(PLOTIT):   a = y1 - b * x1;
MPRINT(PLOTIT):   yleft = b * left + a;
MPRINT(PLOTIT):   yright = b * right + a;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if abs(bi) > singular then do;
MPRINT(PLOTIT):   bi = (x2 - x1) / bi;
MPRINT(PLOTIT):   xtop = (top - y1) * bi + x1;
MPRINT(PLOTIT):   xbottom = (bottom - y1) * bi + x1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------adjust coordinates when line crosses edges------;
MPRINT(PLOTIT):   if x1 < left then do;
MPRINT(PLOTIT):   x1 = left;
MPRINT(PLOTIT):   y1 = yleft;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x1 > right then do;
MPRINT(PLOTIT):   x1 = right;
MPRINT(PLOTIT):   y1 = yright;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y1 < bottom then do;
MPRINT(PLOTIT):   y1 = bottom;
MPRINT(PLOTIT):   x1 = xbottom;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y1 > top then do;
MPRINT(PLOTIT):   y1 = top;
MPRINT(PLOTIT):   x1 = xtop;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x2 < left then do;
MPRINT(PLOTIT):   x2 = left;
MPRINT(PLOTIT):   y2 = yleft;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x2 > right then do;
MPRINT(PLOTIT):   x2 = right;
MPRINT(PLOTIT):   y2 = yright;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y2 < bottom then do;
MPRINT(PLOTIT):   y2 = bottom;
MPRINT(PLOTIT):   x2 = xbottom;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y2 > top then do;
MPRINT(PLOTIT):   y2 = top;
MPRINT(PLOTIT):   x2 = xtop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------see if segment should be output------;
MPRINT(PLOTIT):   if n(x1,x2,y1,y2) = 4 and ((x2 - x1) ** 2 + (y2 - y1) ** 2) > seg0 then do;
MPRINT(PLOTIT):   *------draw line------;
MPRINT(PLOTIT):   if not justdraw then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   justdraw = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else justdraw = 0;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat2 regdat;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *======================combine annotate data sets======================;
MPRINT(PLOTIT):   data anno;
MPRINT(PLOTIT):   keep color style function comment x y size text position angle n obstype;
MPRINT(PLOTIT):   length color style function $ 8 comment $ 100 x y size 8 text $ 65 position $ 1 angle n 8 obstype $ 12 excolors $ 64;
MPRINT(PLOTIT):   retain left right top bottom contok conoldx conoldy excolors;
MPRINT(PLOTIT):   array lsizes[5] _temporary_ (1 1 1 1 1);
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   left = 7 - 2.00;
MPRINT(PLOTIT):   right = 65 + 2.00;
MPRINT(PLOTIT):   top = 29 + -0.50;
MPRINT(PLOTIT):   bottom = 3 - 0.50;
MPRINT(PLOTIT):   contok = (n(0,0) = 2);
MPRINT(PLOTIT):   excolors = lowcase(symget('excolors'));
MPRINT(PLOTIT):   *------store goptions with annotate data set------;
MPRINT(PLOTIT):   if not 0 then do;
MPRINT(PLOTIT):   comment = symget('gopts');
MPRINT(PLOTIT):   n = 0;
MPRINT(PLOTIT):   function = 'COMMENT';
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw border------;
MPRINT(PLOTIT):   if "cx000000" ne ' ' then do;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[1];
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   y = 35 - 0.001;
MPRINT(PLOTIT):   if 0 and -0.50 < 0 then y = y + -0.50;
MPRINT(PLOTIT):   comment = 'border, box, left top start';
MPRINT(PLOTIT):   x = 0;
MPRINT(PLOTIT):   if 0 and 2.00 < 0 then x = x - 2.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   comment = 'border, box, left bottom';
MPRINT(PLOTIT):   y = 0;
MPRINT(PLOTIT):   if 0 and 0.50 < 0 then y = y - 0.50;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, right bottom';
MPRINT(PLOTIT):   x = 93 - 0.001;
MPRINT(PLOTIT):   if 0 and 2.00 < 0 then x = x + 2.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, right top';
MPRINT(PLOTIT):   y = 35 - 0.001;
MPRINT(PLOTIT):   if 0 and -0.50 < 0 then y = y + -0.50;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, left top';
MPRINT(PLOTIT):   x = 0;
MPRINT(PLOTIT):   if 0 and 2.00 < 0 then x = x - 2.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set anno tempdat1(in=td1 rename=(text=text2));
MPRINT(PLOTIT):   text = text2;
MPRINT(PLOTIT):   if comment = 'text, y label' then x = x - 2.00;
MPRINT(PLOTIT):   if comment = 'text, title' then y = y + -0.50;
MPRINT(PLOTIT):   if comment = 'text, x label' then y = y - 0.50;
MPRINT(PLOTIT):   if comment = 'text, y tick' then x = x - 2.00;
MPRINT(PLOTIT):   if comment = 'text, x tick' then y = y - 0.50;
MPRINT(PLOTIT):   obstype = __otype;
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   *------discard clipped ticks if necessary------;
MPRINT(PLOTIT):   if comment = 'text, y tick' then do;
MPRINT(PLOTIT):   if not (bottom <= y <= top) then return;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if comment = 'text, x tick' then do;
MPRINT(PLOTIT):   d = right + floor(1e-8 + len / 2);
MPRINT(PLOTIT):   if not (left <= x <= d) then return;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------uncategorize symbol locations------;
MPRINT(PLOTIT):   i = (1 or 1) and td1 and (comment =: 'list' or comment =: 'extra') and not (index(substr(comment,1,18),', text, label'));
MPRINT(PLOTIT):   if i or (nmiss(x) and n(__xvar)) then x = 36 + 1.4 * __xvar;
MPRINT(PLOTIT):   if i or (nmiss(y) and n(__yvar)) then y = 12 + 0.7 * __yvar;
MPRINT(PLOTIT):   *------all angles are zero, except the y-axis label------;
MPRINT(PLOTIT):   if nmiss(angle) then angle = 0;
MPRINT(PLOTIT):   *------set position if not yet set------;
MPRINT(PLOTIT):   if position = ' ' then position = '+';
MPRINT(PLOTIT):   *------flag contour observations------;
MPRINT(PLOTIT):   contour = (function = 'BAR' and style = 'solid');
MPRINT(PLOTIT):   *------clip if necessary------;
MPRINT(PLOTIT):   if comment =: 'extra, text' or comment =: 'list, text' and text ne ' ' and not contour then do;
MPRINT(PLOTIT):   if y >= top or y <= bottom then return;
MPRINT(PLOTIT):   if position = '<' then d = x - len + 1 - left;
MPRINT(PLOTIT):   else if position = '>' then d = x - left;
MPRINT(PLOTIT):   else d = x - len / 2 - left;
MPRINT(PLOTIT):   d = floor(d);
MPRINT(PLOTIT):   if d <= 0 then do;
MPRINT(PLOTIT):   if (len + d) > 0 then text = substr(text, 1, len + d);
MPRINT(PLOTIT):   else text = ' ';
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if position = '<' then d = right - x;
MPRINT(PLOTIT):   else if position = '>' then d = right - (x + len - 1);
MPRINT(PLOTIT):   else d = right - (x + len / 2);
MPRINT(PLOTIT):   d = floor(d);
MPRINT(PLOTIT):   if d <= 0 then do;
MPRINT(PLOTIT):   if (len + d) > 0 then text = substr(text, 1, len + d);
MPRINT(PLOTIT):   else text = ' ';
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------adjust justifications------;
MPRINT(PLOTIT):   if position = '<' then x = x + 0.5;
MPRINT(PLOTIT):   else if position = '>' then x = x - 0.5;
MPRINT(PLOTIT):   *------set line, text sizes------;
MPRINT(PLOTIT):   if nmiss(size) then do;
MPRINT(PLOTIT):   if function = 'LABEL' then size = 1;
MPRINT(PLOTIT):   else size = lsizes[1];
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set font------;
MPRINT(PLOTIT):   if style = ' ' and not (comment =: 'list, text' or comment =: 'extra, text') then style = 'none';
MPRINT(PLOTIT):   *------if color is still not set, set it------;
MPRINT(PLOTIT):   if color = ' ' then color = 'black';
MPRINT(PLOTIT):   *------offset (jitter) coincident symbols but not ptr symbols------;
MPRINT(PLOTIT):   length lastpos $ 1;
MPRINT(PLOTIT):   retain oldx oldy 0 offsetn 1 lastpos '+';
MPRINT(PLOTIT):   if comment =: 'list, text, symbol' or comment =: 'extra, text, symbol' then do;
MPRINT(PLOTIT):   if abs(oldx - x) < 1e-8 and abs(oldy - y) < 1e-8 then do;
MPRINT(PLOTIT):   *------usually go center, right, left, but skip right------;
MPRINT(PLOTIT):   *------on second symbol if last label was right ------;
MPRINT(PLOTIT):   offsetn + 1 + (offsetn = 1 and lastpos = '>');
MPRINT(PLOTIT):   x = x + (mod(offsetn,3) - 1) * (0.25);
MPRINT(PLOTIT):   d = mod(floor((offsetn - 1) / 3) + 1, 3) - 1;
MPRINT(PLOTIT):   y = y + d * (0.25) / (2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   offsetn = 1;
MPRINT(PLOTIT):   oldx = x;
MPRINT(PLOTIT):   oldy = y;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   lastpos = position;
MPRINT(PLOTIT):   *------override colors for monochrome device------;
MPRINT(PLOTIT):   *------exclude observations in excluded color list------;
MPRINT(PLOTIT):   if index(excolors, trim(lowcase(color))) = 0;
MPRINT(PLOTIT):   *------add offsets to center plot ------;
MPRINT(PLOTIT):   *------adjust y so bottom line has coordinate 0.5------;
MPRINT(PLOTIT):   x = x + 12.9;
MPRINT(PLOTIT):   y = y + 0.9 + 0.5;
MPRINT(PLOTIT):   *------set ID variable for sort for functions------;
MPRINT(PLOTIT):   *------create rectangles for contour plots------;
MPRINT(PLOTIT):   if contour and contok then do;
MPRINT(PLOTIT):   text = ' ';
MPRINT(PLOTIT):   epsh = size * 0;
MPRINT(PLOTIT):   epsv = size * 0;
MPRINT(PLOTIT):   x1 = x - epsh / 2;
MPRINT(PLOTIT):   x2 = x1 + epsh;
MPRINT(PLOTIT):   epsh = epsh * 0.1;
MPRINT(PLOTIT):   y1 = y - epsv / 2;
MPRINT(PLOTIT):   y2 = y1 + epsv;
MPRINT(PLOTIT):   epsv = epsv * 0.1;
MPRINT(PLOTIT):   if abs(x1 - conoldx) < epsh and abs(y1 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x2 - conoldx) < epsh and abs(y1 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x2 - conoldx) < epsh and abs(y2 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x1 - conoldx) < epsh and abs(y2 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   if (abs(0) < epsh and 0 > 0) or (abs(0) < epsv and 0 > 0) then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   function = 'BAR';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   conoldx = x;
MPRINT(PLOTIT):   conoldy = y;
MPRINT(PLOTIT):   *------final adjustments------;
MPRINT(PLOTIT):   if text = '*' and function = 'LABEL' then do;
MPRINT(PLOTIT):   style = ' ';
MPRINT(PLOTIT):   text = 'star';
MPRINT(PLOTIT):   function = 'SYMBOL';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):  ;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   call symput('nobs',compress(put(nobs,5.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat1 tempdat3 tempdat4 tempdat5 tempdat6(memtype=view);
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------post-processing for functions------;
MPRINT(PLOTIT):   *------post-processing for expand------;
MPRINT(PLOTIT):   *------make sure that the frame is never covered------;
MPRINT(PLOTIT):   data anno;
MPRINT(PLOTIT):   set anno anno(where=(comment =: 'frame, box'));
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *===========set up for and produce the graphical scatter plot==========;
MPRINT(PLOTIT):   goptions nodisplay hpos=93 vpos=35 hsize=8.33in vsize=6.24in cback=white device=GIF;
MPRINT(PLOTIT):  ;
MPRINT(PLOTIT):   *------print final plot request------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length string $ 500;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   put / 'The following code will create the ' @@;
MPRINT(PLOTIT):   if not 1 then put '(empty) ' @@;
MPRINT(PLOTIT):   put 'printer plot ' 'on which ' 'the ' 'graphical ' 'plot is ' 'based:' /;
MPRINT(PLOTIT):   string = "options nonumber ls=65 ps=45;";
MPRINT(PLOTIT):   indent1 = 0;
MPRINT(PLOTIT):   indent2 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = symget('procopts');
MPRINT(PLOTIT):   indent2 = 10;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = 'plot ' || trim(symget('plotreq')) || ' /';
MPRINT(PLOTIT):   indent1 = 3;
MPRINT(PLOTIT):   indent2 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('plotopts')) || ' list=1';
MPRINT(PLOTIT):   indent1 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('pl')) || ';';
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('label')) || ';';
MPRINT(PLOTIT):   indent1 = 3;
MPRINT(PLOTIT):   indent2 = 9;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('adjust2')) || ';';
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = 'label ' || symget('vplotvar') || " = '#' " || symget('hplotvar') || " = '#';";
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   put +3 'run; quit;' /;
MPRINT(PLOTIT):   put 'The plot was created with the following goptions:' /;
MPRINT(PLOTIT):   string = 'goptions ' || symget('gopts') || ';';
MPRINT(PLOTIT):   indent1 = 0;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   put / "The OUT=anno Annotate data set has 276 observations.";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symget('method') = 'print' then put "The graphics stream file name is C:\Users\manas\AppData\Local\Temp\SAS Temporary Files\_TD13272_DESKTOP-GPKLHDH_\Prc2\plotit.ps.";
MPRINT(PLOTIT):   if 1 and upcase(getoption("STIMER")) eq "STIMER" and getoption('stimer') eq 'STIMER' then do;
MPRINT(PLOTIT):   time = datetime();
MPRINT(PLOTIT):   cum = put(time - 1965695054.694,6.1);
MPRINT(PLOTIT):   put 'The PLOTIT macro used ' cum "seconds to create OUT=anno.";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   wrap: *------print a line, wrapped and indented------;
MPRINT(PLOTIT):   nlit = index(upcase(string), "'N");
MPRINT(PLOTIT):   if nlit = 0 then nlit = index(upcase(string), '"N');
MPRINT(PLOTIT):   string = left(string);
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   if len < 2 or string = ' ' or string = ';' then return;
MPRINT(PLOTIT):   i = index(string,' '||' ');
MPRINT(PLOTIT):   do while(i < (len - 1) and not nlit);
MPRINT(PLOTIT):   string = substr(string,1,i - 1) || substr(string,i + 1);
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   i = index(string,' '||' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   i = index(string,' ;');
MPRINT(PLOTIT):   if i then string = substr(string,1,i - 1) || substr(string,i + 1);
MPRINT(PLOTIT):   len = 1;
MPRINT(PLOTIT):   end = 0;
MPRINT(PLOTIT):   indent = indent1 + 1;
MPRINT(PLOTIT):   do while(len > end);
MPRINT(PLOTIT):   string = left(substr(string,end + 1));
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   nlit = index(upcase(string), "'N");
MPRINT(PLOTIT):   if nlit = 0 then nlit = index(upcase(string), '"N');
MPRINT(PLOTIT):   maxlen = 256 - indent;
MPRINT(PLOTIT):   if len > maxlen and not nlit then do;
MPRINT(PLOTIT):   end = maxlen;
MPRINT(PLOTIT):   do while(end > 0 and not (substr(string,end,1) in (' ' ',')));
MPRINT(PLOTIT):   end = end - 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if len > maxlen then do;
MPRINT(PLOTIT):   end = maxlen;
MPRINT(PLOTIT):   if nlit then end = nlit + 2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else end = len;
MPRINT(PLOTIT):   str = substr(string,1,end);
MPRINT(PLOTIT):   put @indent str;
MPRINT(PLOTIT):   indent = indent2 + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
 
The following code will create the printer plot on which the graphical plot is based:
 
options nonumber ls=65 ps=45;
proc plot nolegend formchar='|----|+|---' data=preproc vtoh=2;
   plot Dim2 * Dim1 $ _idvar_ = _symbol_ /
        haxis=by 10 vaxis=by 10 box list=1
        placement=((h=2 -2 : s=right left) (v=1 -1 * h=0 -1 to -5 by alt));
   label Dim2 = 'Dimension 2' Dim1 = 'Dimension 1';
   label Dim2 = '#' Dim1 = '#';
   run; quit;
 
The plot was created with the following goptions:
 
goptions nodisplay hpos=93 vpos=35 hsize=8.33in vsize=6.24in cback=white device=GIF;
 
The OUT=anno Annotate data set has 276 observations.
The PLOTIT macro used 1.8 seconds to create OUT=anno.
MPRINT(PLOTIT):   *------produce the plot------;
MPRINT(PLOTIT):   proc ganno annotate=anno gout=WORK.Clus name="DISTANCE";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options LABEL;
The SAS System
 
MPRINT(PLOTIT):   *------restore options, quit------;
MPRINT(PLOTIT):   options NOTES missing=".";
MPRINT(EM_DIAGRAM):  ;
23155      goptions display;
MPRINT(EM_DIAGRAM):   goptions display;
23156      title;
MPRINT(EM_DIAGRAM):   title;
23157      filename gsasfile "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\GRAPH\Distance.gif";
MPRINT(EM_DIAGRAM):    filename gsasfile "D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\GRAPH\Distance.gif";
23158      goptions reset=all device=PNG display gaccess= gsasfile gsfmode= replace cback= white;
MPRINT(EM_DIAGRAM):   goptions reset=all device=PNG display gaccess= gsasfile gsfmode= replace cback= white;
23159      proc greplay igout=WORK.Clus nofs;
MPRINT(EM_DIAGRAM):   proc greplay igout=WORK.Clus nofs;
NOTE: Building list of graphs from the catalog.
 
NOTE: Enter greplay commands or statements.
23160      replay DISTANCE;
MPRINT(EM_DIAGRAM):   replay DISTANCE;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
NOTE: 18324 bytes written to D:\\127097210_Pahuja\Workspaces\EMWS1\Clus\GRAPH\Distance.gif.
23161      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE GREPLAY used (Total process time):
      real time           0.22 seconds
      cpu time            0.14 seconds
 
 
23162      goptions reset=all;
MPRINT(EM_DIAGRAM):   goptions reset=all;
23163      filename gsasfile;
MPRINT(EM_DIAGRAM):   filename gsasfile;
NOTE: Fileref GSASFILE has been deassigned.
23164      proc datasets lib=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=EMWS1 nolist;
23165      modify Clus_DISTANCE;
MPRINT(EM_DIAGRAM):   modify Clus_DISTANCE;
23166      rename _idvar_=_SEGMENT_;
MPRINT(EM_DIAGRAM):   rename _idvar_=_SEGMENT_;
NOTE: Renaming variable _idvar_ to _SEGMENT_.
MPRINT(EM_DIAGRAM):   run;
23167      run;
 
NOTE: MODIFY was successful for EMWS1.CLUS_DISTANCE.DATA.
23168      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23169      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23170      * Clus: Creating data set for Input Mean report;
MPRINT(EM_DIAGRAM):   * Clus: Creating data set for Input Mean report;
23171      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23172      data temp(drop=_type_ over_all);
MPRINT(EM_DIAGRAM):   data temp(drop=_type_ over_all);
23173      set EMWS1.Clus_OUTSTAT;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTSTAT;
23174      where _type_ in('DMDB_MEAN', 'CLUS_MEAN');
The SAS System
 
MPRINT(EM_DIAGRAM):   where _type_ in('DMDB_MEAN', 'CLUS_MEAN');
23175      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.CLUS_OUTSTAT.
      WHERE _type_ in ('CLUS_MEAN', 'DMDB_MEAN');
NOTE: The data set WORK.TEMP has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23176      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
23177      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
23178      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23179      proc stdize data=temp out=stdtemp pctlpts=0 100 outstat=stat;
MPRINT(EM_DIAGRAM):   proc stdize data=temp out=stdtemp pctlpts=0 100 outstat=stat;
23180      var AvgTumorSize--irradiatyes;
MPRINT(EM_DIAGRAM):   var AvgTumorSize--irradiatyes;
23181      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.STDTEMP has 8 observations and 8 variables.
NOTE: The data set WORK.STAT has 10 observations and 8 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23182      proc transpose data=stat out=tstat(rename=(COL1=MEAN COL2=STD COL3=MIN COL4=MAX));
MPRINT(EM_DIAGRAM):   proc transpose data=stat out=tstat(rename=(COL1=MEAN COL2=STD COL3=MIN COL4=MAX));
23183      where _type_ in ('LOCATION', 'SCALE','P0', 'P100');
MPRINT(EM_DIAGRAM):   where _type_ in ('LOCATION', 'SCALE','P0', 'P100');
23184      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.STAT.
      WHERE _type_ in ('LOCATION', 'P0', 'P100', 'SCALE');
NOTE: The data set WORK.TSTAT has 7 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
23185      data tstat( rename=(_NAME_=NAME) keep=_NAME_ cv stdmin stdmax);
MPRINT(EM_DIAGRAM):   data tstat( rename=(_NAME_=NAME) keep=_NAME_ cv stdmin stdmax);
23186      set tstat;
MPRINT(EM_DIAGRAM):   set tstat;
23187      if std ^in (0, .) then do;
MPRINT(EM_DIAGRAM):   if std ^in (0, .) then do;
23188      stdmin = abs((min-mean)/std);
The SAS System
 
MPRINT(EM_DIAGRAM):   stdmin = abs((min-mean)/std);
23189      stdmax = abs((max-mean)/std);
MPRINT(EM_DIAGRAM):   stdmax = abs((max-mean)/std);
23190      end;
MPRINT(EM_DIAGRAM):   end;
23191      if mean ^in(0, .) then cv = std/mean;
MPRINT(EM_DIAGRAM):   if mean ^in(0, .) then cv = std/mean;
23192      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTAT has 7 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23193      proc sort data=tstat;
MPRINT(EM_DIAGRAM):   proc sort data=tstat;
23194      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23195      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTAT has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23196      proc transpose data=stdtemp out=tstdtemp(rename=(_NAME_=NAME _LABEL_=LABEL COL1=MEAN));
MPRINT(EM_DIAGRAM):   proc transpose data=stdtemp out=tstdtemp(rename=(_NAME_=NAME _LABEL_=LABEL COL1=MEAN));
23197      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
23198      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.STDTEMP.
NOTE: The data set WORK.TSTDTEMP has 56 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
23199      proc sort data=tstdtemp;
MPRINT(EM_DIAGRAM):   proc sort data=tstdtemp;
23200      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23201      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 56 observations read from the data set WORK.TSTDTEMP.
NOTE: The data set WORK.TSTDTEMP has 56 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23202      data tstdtemp;
MPRINT(EM_DIAGRAM):   data tstdtemp;
23203      merge tstdtemp tstat;
MPRINT(EM_DIAGRAM):   merge tstdtemp tstat;
The SAS System
 
23204      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23205      STDMEAN = (MEAN + stdmin)/(stdmin + stdmax);
MPRINT(EM_DIAGRAM):   STDMEAN = (MEAN + stdmin)/(stdmin + stdmax);
23206      drop stdmin stdmax mean;
MPRINT(EM_DIAGRAM):   drop stdmin stdmax mean;
23207      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 56 observations read from the data set WORK.TSTDTEMP.
NOTE: There were 7 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTDTEMP has 56 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23208      proc transpose data=EMWS1.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME VARIABLE=INPUT));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME VARIABLE=INPUT));
23209      var AvgTumorSize--irradiatyes;
MPRINT(EM_DIAGRAM):   var AvgTumorSize--irradiatyes;
23210      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
23211      where _type_ = 'VARIABLE';
MPRINT(EM_DIAGRAM):   where _type_ = 'VARIABLE';
23212      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.CLUS_OUTVAR.
      WHERE _type_='VARIABLE';
NOTE: The data set WORK.TEMPVAR has 7 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
23213      proc sort data=tempVar;
MPRINT(EM_DIAGRAM):   proc sort data=tempVar;
23214      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23215      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23216      data EMWS1.Clus_INPUTMEAN(rename=(NAME=VARIABLE));
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_INPUTMEAN(rename=(NAME=VARIABLE));
23217      Length _SEGMENT_CHAR_ $7;
MPRINT(EM_DIAGRAM):   Length _SEGMENT_CHAR_ $7;
23218      label _SEGMENT_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentName_vlabel,  NOQUOTE))" _SEGMENT_CHAR_ =
23218    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentId_vlabel,    NOQUOTE))" NAME = "%sysfunc(sasmsg(sashelp.dmine,
23218    ! rpt_variable_vlabel,     NOQUOTE))" INPUT =
23219         "%sysfunc(sasmsg(sashelp.dmine, rpt_input_vlabel,        NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine,
23219    ! rpt_label_vlabel,        NOQUOTE))" CV = "%sysfunc(sasmsg(sashelp.dmine, rpt_cv_vlabel,           NOQUOTE))" STDMEAN =
23220         "%sysfunc(sasmsg(sashelp.dmine, rpt_normmean_vlabel,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = "Segment Name" _SEGMENT_CHAR_ = "Segment Id" NAME = "Variable" INPUT = "Input" LABEL =
"Label" CV = "Coefficient of Variation" STDMEAN = "Normalized Mean";
23221      merge tempvar tstdtemp;
The SAS System
 
MPRINT(EM_DIAGRAM):   merge tempvar tstdtemp;
23222      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
23223      if LABEL='' then LABEL=NAME;
MPRINT(EM_DIAGRAM):   if LABEL='' then LABEL=NAME;
23224      _SEGMENT_CHAR_ = strip(put(_SEGMENT_, best.));
MPRINT(EM_DIAGRAM):   _SEGMENT_CHAR_ = strip(put(_SEGMENT_, best.));
23225      if _SEGMENT_ = . then _SEGMENT_CHAR_='Overall';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = . then _SEGMENT_CHAR_='Overall';
23226      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.TEMPVAR.
NOTE: There were 56 observations read from the data set WORK.TSTDTEMP.
NOTE: The data set EMWS1.CLUS_INPUTMEAN has 56 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
23227      proc sort data=EMWS1.Clus_INPUTMEAN;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_INPUTMEAN;
23228      by descending cv;
MPRINT(EM_DIAGRAM):   by descending cv;
23229      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 56 observations read from the data set EMWS1.CLUS_INPUTMEAN.
NOTE: The data set EMWS1.CLUS_INPUTMEAN has 56 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23230      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23231      * Clus: Determining the important variables;
MPRINT(EM_DIAGRAM):   * Clus: Determining the important variables;
23232      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
23233      %let _nobs = 0;
23234      data keepvars(rename=(NAME=INPUT));
MPRINT(EM_DIAGRAM):    data keepvars(rename=(NAME=INPUT));
23235      set EMWS1.Clus_OUTIMPORT(where=(IMPORTANCE>0.5)) end=eof;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTIMPORT(where=(IMPORTANCE>0.5)) end=eof;
23236      if eof then call symput('_nobs', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   if eof then call symput('_nobs', strip(put(_N_, best.)));
23237      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS1.CLUS_OUTIMPORT.
      WHERE IMPORTANCE>0.5;
NOTE: The data set WORK.KEEPVARS has 5 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
23238      proc transpose data=EMWS1.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME VARIABLE=INPUT));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME VARIABLE=INPUT));
23239      var AvgTumorSize--irradiatyes;
MPRINT(EM_DIAGRAM):   var AvgTumorSize--irradiatyes;
The SAS System
 
23240      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
23241      where _type_ = 'VARIABLE';
MPRINT(EM_DIAGRAM):   where _type_ = 'VARIABLE';
23242      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.CLUS_OUTVAR.
      WHERE _type_='VARIABLE';
NOTE: The data set WORK.TEMPVAR has 7 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
23243      proc sort data=keepvars;
MPRINT(EM_DIAGRAM):   proc sort data=keepvars;
23244      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
23245      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.KEEPVARS.
NOTE: The data set WORK.KEEPVARS has 5 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23246      proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
23247      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
23248      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23249      data vars;
MPRINT(EM_DIAGRAM):   data vars;
23250      merge tempvar keepvars(in=b);
MPRINT(EM_DIAGRAM):   merge tempvar keepvars(in=b);
23251      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
23252      if b then output;
MPRINT(EM_DIAGRAM):   if b then output;
23253      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable INPUT by input data sets. This might cause unexpected results.
NOTE: There were 7 observations read from the data set WORK.TEMPVAR.
NOTE: There were 5 observations read from the data set WORK.KEEPVARS.
NOTE: The data set WORK.VARS has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
The SAS System
 
23254      proc sort data=vars;
MPRINT(EM_DIAGRAM):   proc sort data=vars;
23255      by descending importance;
MPRINT(EM_DIAGRAM):   by descending importance;
23256      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.VARS.
NOTE: The data set WORK.VARS has 7 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23257      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
23258      set vars;
MPRINT(EM_DIAGRAM):   set vars;
23259      if _N_=1 then call symput('CLUS_PROFVARS', strip(NAME));
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('CLUS_PROFVARS', strip(NAME));
23260      else call symput('CLUS_PROFVARS',symget('CLUS_PROFVARS')!!' '!!strip(NAME));
MPRINT(EM_DIAGRAM):   else call symput('CLUS_PROFVARS',symget('CLUS_PROFVARS')!!' '!!strip(NAME));
23261      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.VARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * mergeVarMeansandClusLabel;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23262      *------------------------------------------------------------*;
23263      * mergeVarMeansandClusLabel;
23264      *------------------------------------------------------------*;
23265      data temp(keep=_SEGMENT_ &CLUS_PROFVARS);
MPRINT(EM_DIAGRAM):   data temp(keep=_SEGMENT_ Avginv_node_group AvgTumorSize deg_malig irradiatno irradiatyes IMP_node_capsno
IMP_node_capsyes);
23266      length _SEGMENT_ &CLUS_PROFVARS 8;
MPRINT(EM_DIAGRAM):   length _SEGMENT_ Avginv_node_group AvgTumorSize deg_malig irradiatno irradiatyes IMP_node_capsno
IMP_node_capsyes 8;
23267      set EMWS1.Clus_OUTSTAT;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTSTAT;
23268      where _type_ ='CLUS_MEAN';
MPRINT(EM_DIAGRAM):   where _type_ ='CLUS_MEAN';
23269      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS1.CLUS_OUTSTAT.
      WHERE _type_='CLUS_MEAN';
NOTE: The data set WORK.TEMP has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23270      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
23271      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
23272      run;
The SAS System
 
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 7 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23273      data EMWS1.Clus_LABEL;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_LABEL;
23274      merge EMWS1.Clus_LABEL(keep=_SEGMENT_ LABEL) temp;
MPRINT(EM_DIAGRAM):   merge EMWS1.Clus_LABEL(keep=_SEGMENT_ LABEL) temp;
23275      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
23276      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS1.CLUS_LABEL.
NOTE: There were 7 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.CLUS_LABEL has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
